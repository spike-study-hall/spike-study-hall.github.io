shadow$provide.module$node_modules$proxy_addr$index=function(global,require,module,exports){function alladdrs(req,trust){req=forwarded(req);if(!trust)return req;"function"!==typeof trust&&(trust=compile(trust));for(var i=0;i<req.length-1;i++)trust(req[i],i)||(req.length=i+1);return req}function compile(val){if(!val)throw new TypeError("argument is required");if("string"===typeof val)var trust=[val];else if(Array.isArray(val))trust=val.slice();else throw new TypeError("unsupported trust argument");
for(var i=0;i<trust.length;i++)val=trust[i],Object.prototype.hasOwnProperty.call(IP_RANGES,val)&&(val=IP_RANGES[val],trust.splice.apply(trust,[i,1].concat(val)),i+=val.length-1);val=Array(trust.length);for(i=0;i<trust.length;i++){var JSCompiler_temp_const=i,note=trust[i],pos=note.lastIndexOf("/"),str=-1!==pos?note.substring(0,pos):note;if(!isip(str))throw new TypeError("invalid IP address: "+str);str=parseip(str);-1===pos&&"ipv6"===str.kind()&&str.isIPv4MappedAddress()&&(str=str.toIPv4Address());
var max="ipv6"===str.kind()?128:32;pos=-1!==pos?note.substring(pos+1,note.length):null;null===pos?pos=max:DIGIT_REGEXP.test(pos)?pos=parseInt(pos,10):"ipv4"===str.kind()&&isip(pos)?(pos=parseip(pos),pos="ipv4"===pos.kind()?pos.prefixLengthFromSubnetMask():null):pos=null;if(0>=pos||pos>max)throw new TypeError("invalid range on address: "+note);val[JSCompiler_temp_const]=[str,pos]}trust=val.length;return 0===trust?trustNone:1===trust?trustSingle(val[0]):trustMulti(val)}function trustNone(){return!1}
function trustMulti(subnets){return function(addr){if(!isip(addr))return!1;addr=parseip(addr);for(var ipconv,kind=addr.kind(),i=0;i<subnets.length;i++){var subnet=subnets[i],subnetip=subnet[0],subnetkind=subnetip.kind();subnet=subnet[1];var trusted=addr;if(kind!==subnetkind){if("ipv4"===subnetkind&&!addr.isIPv4MappedAddress())continue;ipconv||(ipconv="ipv4"===subnetkind?addr.toIPv4Address():addr.toIPv4MappedAddress());trusted=ipconv}if(trusted.match(subnetip,subnet))return!0}return!1}}function trustSingle(subnet){var subnetip=
subnet[0],subnetkind=subnetip.kind(),subnetisipv4="ipv4"===subnetkind,subnetrange=subnet[1];return function(addr){if(!isip(addr))return!1;addr=parseip(addr);if(addr.kind()!==subnetkind){if(subnetisipv4&&!addr.isIPv4MappedAddress())return!1;addr=subnetisipv4?addr.toIPv4Address():addr.toIPv4MappedAddress()}return addr.match(subnetip,subnetrange)}}module.exports=function(req,trust){if(!req)throw new TypeError("req argument is required");if(!trust)throw new TypeError("trust argument is required");req=
alladdrs(req,trust);return req[req.length-1]};module.exports.all=alladdrs;module.exports.compile=compile;var forwarded=require("module$node_modules$forwarded$index");global=require("module$node_modules$ipaddr_DOT_js$lib$ipaddr");var DIGIT_REGEXP=/^[0-9]+$/,isip=global.isValid,parseip=global.parse,IP_RANGES={linklocal:["169.254.0.0/16","fe80::/10"],loopback:["127.0.0.1/8","::1/128"],uniquelocal:["10.0.0.0/8","172.16.0.0/12","192.168.0.0/16","fc00::/7"]}}
//# sourceMappingURL=module$node_modules$proxy_addr$index.js.map
