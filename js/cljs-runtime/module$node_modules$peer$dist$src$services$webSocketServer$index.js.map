{
"version":3,
"file":"module$node_modules$peer$dist$src$services$webSocketServer$index.js",
"lineCount":8,
"mappings":"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",
"sources":["node_modules/peer/dist/src/services/webSocketServer/index.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$peer$dist$src$services$webSocketServer$index\"] = function(global,require,module,exports) {\n\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst events_1 = __importDefault(require(\"events\"));\nconst url_1 = __importDefault(require(\"url\"));\nconst ws_1 = __importDefault(require(\"ws\"));\nconst enums_1 = require(\"../../enums\");\nconst client_1 = require(\"../../models/client\");\nconst WS_PATH = 'peerjs';\nclass WebSocketServer extends events_1.default {\n    constructor({ server, realm, config }) {\n        super();\n        this.setMaxListeners(0);\n        this.realm = realm;\n        this.config = config;\n        const path = this.config.path;\n        this.path = `${path}${path.endsWith('/') ? \"\" : \"/\"}${WS_PATH}`;\n        this.socketServer = new ws_1.default.Server({ path: this.path, server });\n        this.socketServer.on(\"connection\", (socket, req) => this._onSocketConnection(socket, req));\n        this.socketServer.on(\"error\", (error) => this._onSocketError(error));\n    }\n    _onSocketConnection(socket, req) {\n        const { query = {} } = url_1.default.parse(req.url, true);\n        const { id, token, key } = query;\n        if (!id || !token || !key) {\n            return this._sendErrorAndClose(socket, enums_1.Errors.INVALID_WS_PARAMETERS);\n        }\n        if (key !== this.config.key) {\n            return this._sendErrorAndClose(socket, enums_1.Errors.INVALID_KEY);\n        }\n        const client = this.realm.getClientById(id);\n        if (client) {\n            if (token !== client.getToken()) {\n                // ID-taken, invalid token\n                socket.send(JSON.stringify({\n                    type: enums_1.MessageType.ID_TAKEN,\n                    payload: { msg: \"ID is taken\" }\n                }));\n                return socket.close();\n            }\n            return this._configureWS(socket, client);\n        }\n        this._registerClient({ socket, id, token });\n    }\n    _onSocketError(error) {\n        // handle error\n        this.emit(\"error\", error);\n    }\n    _registerClient({ socket, id, token }) {\n        // Check concurrent limit\n        const clientsCount = this.realm.getClientsIds().length;\n        if (clientsCount >= this.config.concurrent_limit) {\n            return this._sendErrorAndClose(socket, enums_1.Errors.CONNECTION_LIMIT_EXCEED);\n        }\n        const newClient = new client_1.Client({ id, token });\n        this.realm.setClient(newClient, id);\n        socket.send(JSON.stringify({ type: enums_1.MessageType.OPEN }));\n        this._configureWS(socket, newClient);\n    }\n    _configureWS(socket, client) {\n        client.setSocket(socket);\n        // Cleanup after a socket closes.\n        socket.on(\"close\", () => {\n            if (client.getSocket() === socket) {\n                this.realm.removeClientById(client.getId());\n                this.emit(\"close\", client);\n            }\n        });\n        // Handle messages from peers.\n        socket.on(\"message\", (data) => {\n            try {\n                const message = JSON.parse(data);\n                message.src = client.getId();\n                this.emit(\"message\", client, message);\n            }\n            catch (e) {\n                this.emit(\"error\", e);\n            }\n        });\n        this.emit(\"connection\", client);\n    }\n    _sendErrorAndClose(socket, msg) {\n        socket.send(JSON.stringify({\n            type: enums_1.MessageType.ERROR,\n            payload: { msg }\n        }));\n        socket.close();\n    }\n}\nexports.WebSocketServer = WebSocketServer;\n\n};"],
"names":["shadow$provide","global","require","module","exports","__importDefault","mod","__esModule","Object","defineProperty","value","events_1","url_1","ws_1","enums_1","client_1","WebSocketServer","constructor","server","realm","config","setMaxListeners","path","endsWith","WS_PATH","socketServer","default","Server","on","socket","req","_onSocketConnection","error","_onSocketError","parse","url","query","id","token","key","_sendErrorAndClose","Errors","INVALID_WS_PARAMETERS","INVALID_KEY","client","getClientById","getToken","send","JSON","stringify","type","MessageType","ID_TAKEN","payload","msg","close","_configureWS","_registerClient","emit","getClientsIds","length","concurrent_limit","CONNECTION_LIMIT_EXCEED","newClient","Client","setClient","OPEN","setSocket","getSocket","removeClientById","getId","data","message","src","e","ERROR"]
}
