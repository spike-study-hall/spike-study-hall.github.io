{
"version":3,
"file":"module$node_modules$unpipe$index.js",
"lineCount":2,
"mappings":"AAAAA,cAAA,iCAAA,CAAqD,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CAc7FD,MAAAC,QAAA,CA0BAC,QAAe,CAACC,MAAD,CAAS,CACtB,GAAI,CAACA,MAAL,CACE,KAAM,KAAIC,SAAJ,CAAc,6BAAd,CAAN,CAGF,GAA6B,UAA7B,GAAI,MAAOD,OAAAD,OAAX,CAEEC,MAAAD,OAAA,EAFF,KAAA,CAxBoC,CAAA,CAAA,CAChCG,IAAAA,yBA8BsBF,MA9BVE,UAAA,CAAiB,MAAjB,CAEhB,KAAK,IAAIC,EAAI,CAAb,CAAgBA,CAAhB,CAAoBD,wBAAAE,OAApB,CAAsCD,CAAA,EAAtC,CACE,GAA0B,QAA1B,GAAID,wBAAA,CAAUC,CAAV,CAAAE,KAAJ,CAAoC,CAClC,wBAAA,CAAO,CAAA,CAAP,OAAA,CADkC,CAKtC,wBAAA,CAAO,CAAA,CAT6B,CA+BpC,GAAK,wBAAL,CAAA,CAKIH,CAAAA,CAAYF,MAAAE,UAAA,CAAiB,OAAjB,CAEhB;IAAK,IAAIC,WAAI,CAAb,CAAgBA,UAAhB,CAAoBD,CAAAE,OAApB,CAAsCD,UAAA,EAAtC,CACEG,wBAEA,CAFWJ,CAAA,CAAUC,UAAV,CAEX,CAAsB,SAAtB,GAAIG,wBAAAD,KAAJ,EAAqD,SAArD,GAAmCC,wBAAAD,KAAnC,EAKAC,wBAAAC,KAAA,CAAcP,MAAd,CAfF,CAPA,CALsB,CAxCqE;",
"sources":["node_modules/unpipe/index.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$unpipe$index\"] = function(global,require,module,exports) {\n/*!\n * unpipe\n * Copyright(c) 2015 Douglas Christopher Wilson\n * MIT Licensed\n */\n\n'use strict'\n\n/**\n * Module exports.\n * @public\n */\n\nmodule.exports = unpipe\n\n/**\n * Determine if there are Node.js pipe-like data listeners.\n * @private\n */\n\nfunction hasPipeDataListeners(stream) {\n  var listeners = stream.listeners('data')\n\n  for (var i = 0; i < listeners.length; i++) {\n    if (listeners[i].name === 'ondata') {\n      return true\n    }\n  }\n\n  return false\n}\n\n/**\n * Unpipe a stream from all destinations.\n *\n * @param {object} stream\n * @public\n */\n\nfunction unpipe(stream) {\n  if (!stream) {\n    throw new TypeError('argument stream is required')\n  }\n\n  if (typeof stream.unpipe === 'function') {\n    // new-style\n    stream.unpipe()\n    return\n  }\n\n  // Node.js 0.8 hack\n  if (!hasPipeDataListeners(stream)) {\n    return\n  }\n\n  var listener\n  var listeners = stream.listeners('close')\n\n  for (var i = 0; i < listeners.length; i++) {\n    listener = listeners[i]\n\n    if (listener.name !== 'cleanup' && listener.name !== 'onclose') {\n      continue\n    }\n\n    // invoke the listener\n    listener.call(stream)\n  }\n}\n\n};"],
"names":["shadow$provide","global","require","module","exports","unpipe","stream","TypeError","listeners","i","length","name","listener","call"]
}
