{
"version":3,
"file":"module$node_modules$iconv_lite$lib$extend_node.js",
"lineCount":10,
"mappings":"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",
"sources":["node_modules/iconv-lite/lib/extend-node.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$iconv_lite$lib$extend_node\"] = function(global,require,module,exports) {\n\"use strict\";\nvar Buffer = require(\"buffer\").Buffer;\n// Note: not polyfilled with safer-buffer on a purpose, as overrides Buffer\n\n// == Extend Node primitives to use iconv-lite =================================\n\nmodule.exports = function (iconv) {\n    var original = undefined; // Place to keep original methods.\n\n    // Node authors rewrote Buffer internals to make it compatible with\n    // Uint8Array and we cannot patch key functions since then.\n    // Note: this does use older Buffer API on a purpose\n    iconv.supportsNodeEncodingsExtension = !(Buffer.from || new Buffer(0) instanceof Uint8Array);\n\n    iconv.extendNodeEncodings = function extendNodeEncodings() {\n        if (original) return;\n        original = {};\n\n        if (!iconv.supportsNodeEncodingsExtension) {\n            console.error(\"ACTION NEEDED: require('iconv-lite').extendNodeEncodings() is not supported in your version of Node\");\n            console.error(\"See more info at https://github.com/ashtuchkin/iconv-lite/wiki/Node-v4-compatibility\");\n            return;\n        }\n\n        var nodeNativeEncodings = {\n            'hex': true, 'utf8': true, 'utf-8': true, 'ascii': true, 'binary': true, \n            'base64': true, 'ucs2': true, 'ucs-2': true, 'utf16le': true, 'utf-16le': true,\n        };\n\n        Buffer.isNativeEncoding = function(enc) {\n            return enc && nodeNativeEncodings[enc.toLowerCase()];\n        }\n\n        // -- SlowBuffer -----------------------------------------------------------\n        var SlowBuffer = require('buffer').SlowBuffer;\n\n        original.SlowBufferToString = SlowBuffer.prototype.toString;\n        SlowBuffer.prototype.toString = function(encoding, start, end) {\n            encoding = String(encoding || 'utf8').toLowerCase();\n\n            // Use native conversion when possible\n            if (Buffer.isNativeEncoding(encoding))\n                return original.SlowBufferToString.call(this, encoding, start, end);\n\n            // Otherwise, use our decoding method.\n            if (typeof start == 'undefined') start = 0;\n            if (typeof end == 'undefined') end = this.length;\n            return iconv.decode(this.slice(start, end), encoding);\n        }\n\n        original.SlowBufferWrite = SlowBuffer.prototype.write;\n        SlowBuffer.prototype.write = function(string, offset, length, encoding) {\n            // Support both (string, offset, length, encoding)\n            // and the legacy (string, encoding, offset, length)\n            if (isFinite(offset)) {\n                if (!isFinite(length)) {\n                    encoding = length;\n                    length = undefined;\n                }\n            } else {  // legacy\n                var swap = encoding;\n                encoding = offset;\n                offset = length;\n                length = swap;\n            }\n\n            offset = +offset || 0;\n            var remaining = this.length - offset;\n            if (!length) {\n                length = remaining;\n            } else {\n                length = +length;\n                if (length > remaining) {\n                    length = remaining;\n                }\n            }\n            encoding = String(encoding || 'utf8').toLowerCase();\n\n            // Use native conversion when possible\n            if (Buffer.isNativeEncoding(encoding))\n                return original.SlowBufferWrite.call(this, string, offset, length, encoding);\n\n            if (string.length > 0 && (length < 0 || offset < 0))\n                throw new RangeError('attempt to write beyond buffer bounds');\n\n            // Otherwise, use our encoding method.\n            var buf = iconv.encode(string, encoding);\n            if (buf.length < length) length = buf.length;\n            buf.copy(this, offset, 0, length);\n            return length;\n        }\n\n        // -- Buffer ---------------------------------------------------------------\n\n        original.BufferIsEncoding = Buffer.isEncoding;\n        Buffer.isEncoding = function(encoding) {\n            return Buffer.isNativeEncoding(encoding) || iconv.encodingExists(encoding);\n        }\n\n        original.BufferByteLength = Buffer.byteLength;\n        Buffer.byteLength = SlowBuffer.byteLength = function(str, encoding) {\n            encoding = String(encoding || 'utf8').toLowerCase();\n\n            // Use native conversion when possible\n            if (Buffer.isNativeEncoding(encoding))\n                return original.BufferByteLength.call(this, str, encoding);\n\n            // Slow, I know, but we don't have a better way yet.\n            return iconv.encode(str, encoding).length;\n        }\n\n        original.BufferToString = Buffer.prototype.toString;\n        Buffer.prototype.toString = function(encoding, start, end) {\n            encoding = String(encoding || 'utf8').toLowerCase();\n\n            // Use native conversion when possible\n            if (Buffer.isNativeEncoding(encoding))\n                return original.BufferToString.call(this, encoding, start, end);\n\n            // Otherwise, use our decoding method.\n            if (typeof start == 'undefined') start = 0;\n            if (typeof end == 'undefined') end = this.length;\n            return iconv.decode(this.slice(start, end), encoding);\n        }\n\n        original.BufferWrite = Buffer.prototype.write;\n        Buffer.prototype.write = function(string, offset, length, encoding) {\n            var _offset = offset, _length = length, _encoding = encoding;\n            // Support both (string, offset, length, encoding)\n            // and the legacy (string, encoding, offset, length)\n            if (isFinite(offset)) {\n                if (!isFinite(length)) {\n                    encoding = length;\n                    length = undefined;\n                }\n            } else {  // legacy\n                var swap = encoding;\n                encoding = offset;\n                offset = length;\n                length = swap;\n            }\n\n            encoding = String(encoding || 'utf8').toLowerCase();\n\n            // Use native conversion when possible\n            if (Buffer.isNativeEncoding(encoding))\n                return original.BufferWrite.call(this, string, _offset, _length, _encoding);\n\n            offset = +offset || 0;\n            var remaining = this.length - offset;\n            if (!length) {\n                length = remaining;\n            } else {\n                length = +length;\n                if (length > remaining) {\n                    length = remaining;\n                }\n            }\n\n            if (string.length > 0 && (length < 0 || offset < 0))\n                throw new RangeError('attempt to write beyond buffer bounds');\n\n            // Otherwise, use our encoding method.\n            var buf = iconv.encode(string, encoding);\n            if (buf.length < length) length = buf.length;\n            buf.copy(this, offset, 0, length);\n            return length;\n\n            // TODO: Set _charsWritten.\n        }\n\n\n        // -- Readable -------------------------------------------------------------\n        if (iconv.supportsStreams) {\n            var Readable = require('stream').Readable;\n\n            original.ReadableSetEncoding = Readable.prototype.setEncoding;\n            Readable.prototype.setEncoding = function setEncoding(enc, options) {\n                // Use our own decoder, it has the same interface.\n                // We cannot use original function as it doesn't handle BOM-s.\n                this._readableState.decoder = iconv.getDecoder(enc, options);\n                this._readableState.encoding = enc;\n            }\n\n            Readable.prototype.collect = iconv._collect;\n        }\n    }\n\n    // Remove iconv-lite Node primitive extensions.\n    iconv.undoExtendNodeEncodings = function undoExtendNodeEncodings() {\n        if (!iconv.supportsNodeEncodingsExtension)\n            return;\n        if (!original)\n            throw new Error(\"require('iconv-lite').undoExtendNodeEncodings(): Nothing to undo; extendNodeEncodings() is not called.\")\n\n        delete Buffer.isNativeEncoding;\n\n        var SlowBuffer = require('buffer').SlowBuffer;\n\n        SlowBuffer.prototype.toString = original.SlowBufferToString;\n        SlowBuffer.prototype.write = original.SlowBufferWrite;\n\n        Buffer.isEncoding = original.BufferIsEncoding;\n        Buffer.byteLength = original.BufferByteLength;\n        Buffer.prototype.toString = original.BufferToString;\n        Buffer.prototype.write = original.BufferWrite;\n\n        if (iconv.supportsStreams) {\n            var Readable = require('stream').Readable;\n\n            Readable.prototype.setEncoding = original.ReadableSetEncoding;\n            delete Readable.prototype.collect;\n        }\n\n        original = undefined;\n    }\n}\n\n};"],
"names":["shadow$provide","global","require","module","exports","Buffer","module.exports","iconv","original","undefined","supportsNodeEncodingsExtension","from","Uint8Array","extendNodeEncodings","iconv.extendNodeEncodings","nodeNativeEncodings","isNativeEncoding","Buffer.isNativeEncoding","enc","toLowerCase","SlowBuffer","SlowBufferToString","prototype","toString","SlowBuffer.prototype.toString","encoding","start","end","String","call","length","decode","slice","SlowBufferWrite","write","SlowBuffer.prototype.write","string","offset","isFinite","swap","remaining","RangeError","buf","encode","copy","BufferIsEncoding","isEncoding","Buffer.isEncoding","encodingExists","BufferByteLength","byteLength","SlowBuffer.byteLength","str","BufferToString","Buffer.prototype.toString","BufferWrite","Buffer.prototype.write","_offset","_length","_encoding","supportsStreams","Readable","ReadableSetEncoding","setEncoding","Readable.prototype.setEncoding","options","_readableState","decoder","getDecoder","collect","_collect","console","error","undoExtendNodeEncodings","iconv.undoExtendNodeEncodings","Error"]
}
