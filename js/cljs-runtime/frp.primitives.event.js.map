{"version":3,"sources":["frp/primitives/event.cljc"],"mappings":"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","names":["frp.primitives.event/get-occs","entity-id","net","G__60194","p1__60195#","frp.primitives.event/garbage-collect","cljs.core.filter.cljs$core$IFn$_invoke$arity$2","cljs.core.comp.cljs$core$IFn$_invoke$arity$2","cljs.core.conj.cljs$core$IFn$_invoke$arity$2","pred__60196","aid.core/call-pred","expr__60197","cljs.core/empty?","cljs.core/last","frp.tuple/fst","frp.time/epoch","aid.core.curry.cljs$core$IFn$_invoke$arity$2","frp.primitives.event/set-occs","occs","com.rpl.specter.impl/compiled-transform*","info__41236__auto__","frp.primitives.event/pathcache60199","info60200","com.rpl.specter.impl/magic-precompilation","com.rpl.specter.impl/->LocalSym","precompiled60201","com.rpl.specter.impl/cached-path-info-precompiled","dynamic?__41237__auto__","com.rpl.specter.impl/cached-path-info-dynamic?","G__60202","cljs.core.partial.cljs$core$IFn$_invoke$arity$3","com.rpl.specter/setval*","com.rpl.specter/END","frp.primitives.event/call-functions","aid.core/flip","cljs.core.partial.cljs$core$IFn$_invoke$arity$2","cljs.core/reduce","aid.core/funcall","frp.primitives.event/call-functions!","net-id","fs","frp.primitives.net/universe-state","G__60203","G__60204","G__60205","cljs.core/deref","cljs.core.comp.cljs$core$IFn$_invoke$arity$3","cljs.core/swap!","cljs.core.repeat.cljs$core$IFn$_invoke$arity$1","cljs.core.interleave.cljs$core$IFn$_invoke$arity$2","frp.primitives.event/modify-net!","occ","G__60212","fexpr__60211","fexpr__60211.cljs$core$IFn$_invoke$arity$variadic","more__60213__auto__","cljs.core.apply.cljs$core$IFn$_invoke$arity$2","loom.graph/subgraph","cljs.core/identity","loom.alg/bf-traverse","loom.alg.topsort.cljs$core$IFn$_invoke$arity$1","cljs.core.mapcat.cljs$core$IFn$_invoke$arity$variadic","cljs.core.concat.cljs$core$IFn$_invoke$arity$2","com.rpl.specter/MAP-VALS","G__60208","G__60209","G__60206","G__60207","frp.primitives.event/initial-reloading","js/frp","js/frp.primitives","js/frp.primitives.event","js/frp.primitives.event.reloading-state","frp.primitives.event/reloading-state","cljs.core.atom.cljs$core$IFn$_invoke$arity$1","frp.primitives.event/invoke**","a","G__60216","frp.time/now","frp.primitives.net/get-new-time","G__60214","G__60215","frp.tuple/tuple","frp.primitives.net/run-effects-twice!","frp.primitives.event/debugging","goog/DEBUG","frp.primitives.event/invoke*","G__60219","G__60220","fexpr__60218","fexpr__60218.cljs$core$IFn$_invoke$arity$variadic","more__60221__auto__","or__4131__auto__","cljs.core/complement","cljs.core/=","cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$2","com.rpl.specter/AFTER-ELEM","this__4385__auto__","k__4386__auto__","this__4387__auto__","k60223","else__4388__auto__","G__60228","cljs.core/Keyword","cljs.core.get.cljs$core$IFn$_invoke$arity$3","__extmap","this__4404__auto__","f__4405__auto__","init__4406__auto__","cljs.core.reduce.cljs$core$IFn$_invoke$arity$3","ret__4407__auto__","p__60229","vec__60230","k__4408__auto__","cljs.core.nth.cljs$core$IFn$_invoke$arity$3","v__4409__auto__","this__4399__auto__","writer__4400__auto__","opts__4401__auto__","pr-pair__4402__auto__","keyval__4403__auto__","cljs.core/pr-sequential-writer","cljs.core/PersistentVector","G__60222","cljs.core/RecordIter","cljs.core/-iterator","cljs.core/nil-iter","this__4383__auto__","__meta","this__4380__auto__","__hash","this__4389__auto__","cljs.core/count","this__4381__auto__","h__4243__auto__","fexpr__60233","coll__4382__auto__","cljs.core/hash-unordered-coll","this60224","other60225","cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2","this__4394__auto__","k__4395__auto__","cljs.core/contains?","cljs.core.dissoc.cljs$core$IFn$_invoke$arity$2","cljs.core/-with-meta","cljs.core.into.cljs$core$IFn$_invoke$arity$2","cljs.core/not-empty","this__4392__auto__","k__4393__auto__","pred__60234","cljs.core/keyword-identical?","expr__60235","G__60237","G__60238","G__60239","G__60240","cljs.core.assoc.cljs$core$IFn$_invoke$arity$3","this__4397__auto__","cljs.core/seq","cljs.core/MapEntry","cljs.core/PROTOCOL_SENTINEL","this__4384__auto__","this__4390__auto__","entry__4391__auto__","cljs.core/vector?","cljs.core._nth.cljs$core$IFn$_invoke$arity$2","cljs.core/-conj","self__","args60227","cljs.core/aclone","frp.primitives.event/Event","this__4428__auto__","cljs.core/List","writer__4429__auto__","cljs.core/-write","G__60226","extmap__4424__auto__","G__60242","cljs.core.dissoc.cljs$core$IFn$_invoke$arity$variadic","cljs.core/record?","frp.primitives.event/->Event","frp.primitives.event/map->Event","_","frp.primitives.event/get-context","aid.unit/unit","G__60241","cats.util/make-printable","frp.primitives.event/event?","cljs.core/instance?","frp.primitives.event/event**","cljs.core.map.cljs$core$IFn$_invoke$arity$2","fexpr__60247","cljs.core/cons","G__60245","G__60246","G__60243","G__60244","frp.primitives.event/event*","G__60248","G__60249","frp.primitives.net/get-id","frp.primitives.event/get-unit","frp.primitives.event/add-edge","parent-id","child-id","frp.primitives.event/pathcache60250","info60251","precompiled60252","G__60253","loom.graph/add-edges","frp.primitives.event/get-latests","frp.primitives.event/get-occs-or-latests","initial","fexpr__60254","frp.primitives.event/modify-<$>","f!","G__60255","G__60256","G__60257","*net-id*-orig-val__60258","frp.primitives.net/*net-id*","*net-id*-temp-val__60259","frp.primitives.net/->Net","cljs.core.mapv.cljs$core$IFn$_invoke$arity$2","cats.core/<$>","G__60260","frp.primitives.event/make-call-once","modify!","G__60261","G__60262","aid.core/if-else","frp.primitives.event/set-modification","com.rpl.specter.impl/compiled-setval*","frp.primitives.event/pathcache60263","info60264","precompiled60265","G__60266","frp.primitives.event/make-set-modification-modification","frp.primitives.event/snth","cljs.core/apply","com.rpl.specter/srange","cljs.core/repeat","frp.primitives.event/insert-modification","frp.primitives.event/pathcache60267","info60268","com.rpl.specter.impl/->FnInvocation","com.rpl.specter.impl/->VarUse","cljs.core/-","precompiled60269","G__60270","G__60271","G__60272","frp.primitives.event/insert-merge-sync","p1__60273#","G__60274","G__60275","G__60276","frp.primitives.event/delay-time-occs","t","cats.core/<*>","frp.primitives.event/delay-sync","p1__60277#","cljs.core/run!","js/Error","G__60279","fexpr__60278","cljs.core/set","G__60280","G__60281","G__60282","frp.primitives.event/modify-join","parent-id*","G__60285","G__60286","fexpr__60287","cljs.core.juxt.cljs$core$IFn$_invoke$arity$3","frp.tuple/snd","G__60283","G__60284","frp.primitives.event/merge-one","parent","merged","frp.primitives.event/pathcache60288","info60289","precompiled60290","G__60291","cljs.core/first","frp.primitives.event/merge-occs*","left","right","frp.primitives.event/pathcache60292","info60293","precompiled60294","G__60295","frp.primitives.event/pathcache60296","info60297","precompiled60298","G__60299","frp.helpers/<=","cljs.core/rest","frp.primitives.event/merge-occs","G__60300","frp.primitives.event/modify-<>","left-id","right-id","G__60301","G__60302","G__60303","G__60304","G__60305","frp.primitives.event/pure*","G__60306","G__60307","G__60308","p1__60309#","frp.primitives.event/pure","frp.primitives.event/mempty*","frp.primitives.event/mempty","js/frp.primitives.event.t_frp$primitives$event60310","frp.primitives.event/t_frp$primitives$event60310","_60312","meta60311","this__4374__auto__","writer__4375__auto__","opt__4376__auto__","frp.primitives.event/->t_frp$primitives$event60310","fa","fexpr__60324","fexpr__60324.cljs$core$IFn$_invoke$arity$variadic","more__60325__auto__","G__60327","G__60328","fexpr__60326","G__60319","G__60317","G__60318","context","fab","aid.core/ap","ma","mb","fexpr__60335","fexpr__60335.cljs$core$IFn$_invoke$arity$variadic","more__60336__auto__","G__60337","G__60338","G__60331","G__60329","G__60330","left-event","right-event","G__60315","G__60316","G__60313","G__60314","G__60339","frp.primitives.event/get-elements","step!","com.rpl.specter/transform*","cljs.core/unreduced","aid.core/nothing","cats.monad.maybe/just?","frp.primitives.event/get-transduction","init","reduction","cljs.core.concat.cljs$core$IFn$_invoke$arity$variadic","frp.primitives.event/get-accumulator","element","frp.primitives.event/pathcache60340","info60341","precompiled60342","G__60343","G__60345","G__60346","fexpr__60344","aid.core/lift-a","p1__60347#","frp.primitives.event/make-modify-transduce","G__60348","cats.monad.maybe/just","cljs.core/second","cljs.core/vector","G__60349","G__60350","G__60351","G__60352","var_args","G__60354","frp.primitives.event/transduce","xform","f","e","frp.primitives.event.transduce.cljs$core$IFn$_invoke$arity$4","fexpr__60364","fexpr__60364.cljs$core$IFn$_invoke$arity$variadic","more__60365__auto__","G__60368","G__60369","fexpr__60367","fexpr__60370","G__60357","G__60355","G__60356","args__4736__auto__","len__4730__auto__","i__4731__auto__","argseq__4737__auto__","cljs.core/IndexedSeq","frp.primitives.event/snapshot","seq60372","G__60373","cljs.core/next","self__4717__auto__","bs","G__60374","p1__60371#","G__60375","p1__60376#","frp.primitives.event/handle","G__60377","frp.primitives.event/append-cancellation","universe","frp.primitives.event/pathcache60378","info60379","precompiled60380","G__60381","frp.primitives.event/positive-infinity","js/Number.POSITIVE_INFINITY","p1__60382#","frp.primitives.event/run-universe-effects!","cljs.core/keys","frp.primitives.event/run-effects-once!","frp.primitives.net/set-active","frp.primitives.net/run-effects!*","frp.primitives.event/activate*","rate","G__60383","G__60384","G__60385","pred__60386","expr__60387","aid.core/nop","js/clearInterval","js/setInterval","frp.time/start","frp.primitives.event/effect","x","frp.primitives.event/reload*","alias-id","p1__60389#","cljs.core.comp.cljs$core$IFn$_invoke$arity$variadic","G__60390","frp.primitives.net/initial-net-id","com.rpl.specter/FIRST","frp.primitives.event/pathcache60391","info60392","precompiled60393","G__60394","clojure.set/map-invert","frp.primitives.event/pathcache60395","info60396","com.rpl.specter/ALL","precompiled60397","G__60398","frp.primitives.event/get-alias-id","cljs.core/hash-map","cljs.core/mapcat","cljs.core.juxt.cljs$core$IFn$_invoke$arity$2","cljs.core/keyword","cljs.core/subs","cljs.core/str","cljs.core/filter","cljs.core/map","cljs.core/ns-interns*","cljs.core/find-ns","cljs.core/symbol","frp.primitives.event/reload"],"sourcesContent":[";event and behavior namespaces are separated to limit the impact of :refer-clojure :exclude for transduce\n(ns ^:figwheel-always frp.primitives.event\n  (:refer-clojure :exclude [transduce])\n  (:require [cljs.analyzer.api :as ana-api]\n            [clojure.set :as set]\n            [aid.core :as aid]\n            [aid.unit :as unit]\n            [cats.core :as m]\n            [cats.monad.maybe :as maybe]\n            [cats.protocols :as cats-protocols]\n            [cats.util :as util]\n            #?@(:clj [[chime :as chime]\n                      [clj-time.core :as t]\n                      [clj-time.periodic :as periodic]])\n            [com.rpl.specter :as s]\n            [loom.alg :as alg]\n            [loom.graph :as graph]\n            [frp.helpers :as helpers]\n            [frp.primitives.net :as net]\n            [frp.protocols :as entity-protocols]\n            [frp.time :as time]\n            [frp.tuple :as tuple])\n  #?(:cljs (:require-macros [frp.primitives.event :refer [get-namespaces]]))\n  #?(:clj (:import [clojure.lang IDeref IFn])))\n\n(declare get-context)\n\n(defn get-occs\n  [entity-id net]\n  (-> net\n      :occs\n      entity-id))\n\n(declare event?)\n\n(def garbage-collect\n  #(filter (comp (conj (aid/casep %\n                         empty? #{}\n                         #{(-> %\n                               last\n                               tuple/fst)})\n                       time/epoch)\n                 tuple/fst)\n           %))\n\n(aid/defcurried set-occs\n  [occs entity-id net]\n  (s/transform [:occs entity-id]\n               (comp (partial s/setval* s/END occs)\n                     ;Doing garbage collection is visibly faster.\n                     garbage-collect)\n               net))\n\n(def call-functions\n  (aid/flip (partial reduce (aid/flip aid/funcall))))\n\n(aid/defcurried call-functions!\n  [net-id fs]\n  (->> @net/universe-state\n       net-id\n       (call-functions (->> (comp net-id\n                                  (partial swap!\n                                           net/universe-state)\n                                  (partial (aid/curry 3\n                                                      s/setval*)\n                                           net-id))\n                            repeat\n                            (interleave fs)))))\n\n(defn modify-net!\n  [occ net-id entity-id net]\n  ;TODO advance\n  (->> net\n       :dependency\n       ;Taking a subgraph seems faster.\n       ;(tufte/add-basic-println-handler! {})\n       ;\n       ;(profile {}\n       ;         (dotimes [_ 5]\n       ;           (let [e (frp/event)]\n       ;            (doall (repeatedly 100 #(m/<$> identity frp/event)))\n       ;            (frp/activate)\n       ;            (p :invoke (run! e (repeat 100 0))))))\n       ;\n       ;If a subgraph is taken, it's faster.\n       ;\n       ;{:entity-id :invoke, :n-calls 5, :min \"216ms\", :max \"349ms\", :mad \"39.04ms\", :mean \"251.4ms\", :time% 39, :time \"1.26s \"}\n       ;\n       ;Clock Time: (100%) 3.25s\n       ;Accounted Time: (39%) 1.26s\n       ;nil\n       ;\n       ;If a subgraph is not taken, it's slower.\n       ;\n       ;{:entity-id :invoke, :n-calls 5, :min \"347ms\", :max \"578ms\", :mad \"69.44ms\", :mean \"414.2ms\", :time% 54, :time \"2.07s \"}\n       ;\n       ;Clock Time: (100%) 3.85s\n       ;Accounted Time: (54%) 2.07s\n       ;nil\n       ((aid/build graph/subgraph\n                   identity\n                   (partial (aid/flip alg/bf-traverse) entity-id)))\n       alg/topsort\n       (mapcat (:modifications net))\n       (concat [(partial s/setval* [:modified s/MAP-VALS] false)\n                (partial s/setval* :time (tuple/fst occ))\n                (set-occs [occ] entity-id)\n                (partial s/setval* [:modified entity-id] true)])\n       (call-functions! net-id)))\n\n(def initial-reloading\n  {})\n\n(defonce reloading-state\n  (atom initial-reloading))\n\n(aid/defcurried invoke**\n  [net-id entity-id a]\n  (->> @net/universe-state\n       net-id\n       (modify-net! (-> (time/now)\n                        net/get-new-time\n                        (tuple/tuple a))\n                    net-id\n                    entity-id))\n  (net/run-effects-twice! net-id))\n\n(def debugging\n  #?(:clj  false\n     :cljs goog/DEBUG))\n\n(aid/defcurried invoke*\n  [net-id entity-id a]\n  (if (-> @net/universe-state\n          net-id\n          ((aid/build or\n                      (complement :active)\n                      (comp (partial = time/epoch)\n                            :time))))\n    (swap! net/universe-state\n           (partial s/setval*\n                    [net-id :invocations s/AFTER-ELEM]\n                    #(invoke** net-id entity-id a)))\n    ;TODO make debugging compatible with multiple nets\n    (do (if debugging\n          (swap! reloading-state\n                 (partial s/setval*\n                          [:entity-id-invocations s/AFTER-ELEM]\n                          [entity-id a])))\n        (invoke** net-id entity-id a))))\n\n(defrecord Event\n  [net-id entity-id]\n  cats-protocols/Contextual\n  (-get-context [_]\n    ;If context is inlined, the following error seems to occur.\n    ;java.lang.LinkageError: loader (instance of clojure/lang/DynamicClassLoader): attempted duplicate class definition for name: \"nodp/helpers/primitives/event/Event\"\n    (get-context net-id))\n  IFn\n  ;TODO implement applyTo\n  (#?(:clj  invoke\n      :cljs -invoke) [_]\n    (invoke* net-id entity-id unit/unit))\n  (#?(:clj  invoke\n      :cljs -invoke) [_ a]\n    (invoke* net-id entity-id a))\n  entity-protocols/Entity\n  (-get-keyword [_]\n    :event)\n  IDeref\n  (#?(:clj  deref\n      :cljs -deref) [_]\n    (->> @net/universe-state\n         net-id\n         (get-occs entity-id)))\n  cats-protocols/Printable\n  (-repr [_]\n    (str \"#[event \" net-id \" \" entity-id \"]\")))\n\n(util/make-printable Event)\n\n(def event?\n  (partial instance? Event))\n\n(defn event**\n  [net-id entity-id fs]\n  ;TODO add a node to dependency\n  (->> fs\n       (map ((aid/curry 3 (aid/flip aid/funcall)) entity-id))\n       (cons (set-occs [] entity-id))\n       (call-functions! net-id))\n  (Event. net-id entity-id))\n\n(aid/defcurried event*\n  [net-id fs]\n  (event** net-id\n           (->> @net/universe-state\n                net-id\n                :occs\n                net/get-id)\n           fs))\n\n(def get-unit\n  (partial tuple/tuple time/epoch))\n\n(aid/defcurried add-edge\n  [parent-id child-id net]\n  (s/transform :dependency\n               (partial (aid/flip graph/add-edges)\n                        [parent-id child-id])\n               net))\n\n(defn get-latests\n  [entity-id net]\n  (->> net\n       (get-occs entity-id)\n       (filter (comp (partial = (:time net))\n                     tuple/fst))))\n\n(defn get-occs-or-latests\n  [initial entity-id net]\n  ((if initial\n     get-occs\n     get-latests)\n    entity-id\n    net))\n\n(aid/defcurried modify-<$>\n  [f! net-id parent-id initial child-id net]\n  ;TODO refactor\n  (set-occs (net/with-net (net/->Net net-id)\n                          (->> net\n                               (get-occs-or-latests initial parent-id)\n                               (mapv (partial m/<$> f!))))\n            child-id\n            (net-id @net/universe-state)))\n\n(defn make-call-once\n  [entity-id modify!]\n  (aid/if-else (comp entity-id\n                     :modified)\n               modify!))\n\n(defn set-modification\n  [entity-id modify! net]\n  (s/setval [:modifications entity-id]\n            [(make-call-once entity-id modify!)\n             (partial s/setval* [:modified entity-id] true)]\n            net))\n\n(defn make-set-modification-modification\n  [modify!]\n  [(fn [entity-id net]\n     (set-modification entity-id (modify! false entity-id) net))\n   (modify! true)])\n\n(def snth\n  (comp (partial apply s/srange)\n        (partial repeat 2)))\n\n(defn insert-modification\n  [modify! entity-id net]\n  (s/setval [:modifications entity-id (-> net\n                                          :modifications\n                                          entity-id\n                                          count\n                                          (- 2)\n                                          snth)]\n            [(make-call-once entity-id modify!)]\n            net))\n\n(aid/defcurried insert-merge-sync\n  [parent-id child-id net]\n  (insert-modification #(set-occs (get-latests parent-id %) child-id %)\n                       child-id\n                       net))\n\n(defn delay-time-occs\n  [t occs]\n  (map (partial m/<*> (tuple/tuple t identity)) occs))\n\n(aid/defcurried delay-sync\n  [parent-id child-id net]\n  (->> net\n       (get-occs parent-id)\n       (run! #(->> %\n                   tuple/fst\n                   ((set [time/epoch (:time net)]))\n                   assert)))\n  (set-occs (->> net\n                 (get-occs parent-id)\n                 (delay-time-occs (:time net)))\n            child-id\n            net))\n\n(aid/defcurried modify-join\n  [net-id parent-id initial child-id net]\n  (->> net\n       (get-occs-or-latests initial parent-id)\n       (map (comp (aid/curriedfn [parent-id* _]\n                                 (call-functions! net-id\n                                                  ((juxt add-edge\n                                                         insert-merge-sync\n                                                         delay-sync)\n                                                    parent-id*\n                                                    child-id)))\n                  :entity-id\n                  tuple/snd))\n       (call-functions! net-id)))\n\n(defn merge-one\n  [parent merged]\n  (s/setval s/AFTER-ELEM (first parent) merged))\n\n(aid/defcurried merge-occs*\n  [merged left right]\n  (cond (empty? left) (s/setval s/END right merged)\n        (empty? right) (s/setval s/END left merged)\n        (->> [left right]\n             (map (comp tuple/fst\n                        first))\n             (apply helpers/<=))\n        (recur (merge-one left merged) (rest left) right)\n        :else\n        (recur (merge-one right merged) left (rest right))))\n\n(def merge-occs\n  (merge-occs* []))\n\n(aid/defcurried modify-<>\n  [left-id right-id initial child-id net]\n  (set-occs (merge-occs (get-occs-or-latests initial left-id net)\n                        (get-occs-or-latests initial right-id net))\n            child-id\n            net))\n\n(defn pure*\n  [net-id a]\n  (->> a\n       get-unit\n       vector\n       set-occs\n       vector\n       (event* net-id)))\n\n(def pure\n  #(pure* net/*net-id* %))\n\n(def mempty*\n  (partial (aid/flip event*) []))\n\n(def mempty\n  #(mempty* net/*net-id*))\n\n(defn get-context\n  [net-id]\n  (reify\n    entity-protocols/Entity\n    (-get-net-id [_]\n      net-id)\n    cats-protocols/Context\n    cats-protocols/Functor\n    (-fmap [_ f! fa]\n      (->> fa\n           ((aid/build (modify-<$> f!)\n                       :net-id\n                       :entity-id))\n           make-set-modification-modification\n           (cons (add-edge (:entity-id fa)))\n           (event* (:net-id fa))))\n    cats-protocols/Applicative\n    (-pure [context a]\n      (pure* (entity-protocols/-get-net-id context) a))\n    (-fapply [_ fab fa]\n      (aid/ap fab fa))\n    cats-protocols/Monad\n    (-mreturn [context a]\n      (cats-protocols/-pure context a))\n    (-mbind [_ ma f!]\n      (let [mb (m/<$> f! ma)]\n        (->> mb\n             ((aid/build modify-join\n                         :net-id\n                         :entity-id))\n             make-set-modification-modification\n             (cons (add-edge (:entity-id mb)))\n             (event* (:net-id mb)))))\n    cats-protocols/Semigroup\n    (-mappend [_ left-event right-event]\n      (->> [left-event right-event]\n           (map (comp add-edge\n                      :entity-id))\n           (concat\n             (make-set-modification-modification\n               (modify-<> (:entity-id left-event)\n                          (:entity-id right-event))))\n           (event* (:net-id left-event))))\n    ;TODO delete Monoid\n    cats-protocols/Monoid\n    (-mempty [context]\n      (mempty* (entity-protocols/-get-net-id context)))))\n\n(defn get-elements\n  [step! entity-id initial net]\n  (->> net\n       (get-occs-or-latests initial entity-id)\n       (map (partial s/transform* :snd (comp unreduced\n                                             (partial step! aid/nothing))))\n       (filter (comp maybe/just?\n                     tuple/snd))\n       (map (partial m/<$> deref))))\n\n(defn get-transduction\n  [init occs reduction]\n  (-> (get-unit init)\n      vector\n      (concat occs reduction)\n      last))\n\n(aid/defcurried get-accumulator\n  [f! init entity-id net reduction element]\n  (s/setval s/AFTER-ELEM\n            ((aid/lift-a f!)\n              (get-transduction init\n                                (get-occs entity-id net)\n                                reduction)\n              element)\n            reduction))\n\n(def make-modify-transduce\n  ;TODO refactor\n  #(let [step! (% (comp maybe/just\n                        second\n                        vector))]\n     (aid/curriedfn [f! init net-id parent-id initial child-id net]\n                    (set-occs (reduce (get-accumulator f! init child-id net)\n                                      []\n                                      (get-elements step!\n                                                    parent-id\n                                                    initial\n                                                    net))\n                              child-id\n                              (net-id @net/universe-state)))))\n\n(defn transduce\n  ([xform f e]\n   (transduce xform f (f) e))\n  ([xform f init e]\n    ;TODO refactor\n    ;TODO consider cases where f has side effects\n   (->> e\n        ((aid/build ((make-modify-transduce xform) f init)\n                    :net-id\n                    :entity-id))\n        make-set-modification-modification\n        (cons (add-edge (:entity-id e)))\n        (event* (:net-id e)))))\n\n(defn snapshot\n  [e & bs]\n  (m/<$> #(->> bs\n               (mapv deref)\n               (cons %))\n         e))\n\n#?(:clj (defn get-periods\n          ;TODO extract a purely functional function\n          [rate]\n          (->> rate\n               t/millis\n               (periodic/periodic-seq (t/now))\n               rest)))\n\n(def handle\n  #(when (-> @net/universe-state\n             %\n             :active)\n     (->> (time/now)\n          net/get-new-time\n          (partial s/setval* [% :time])\n          (swap! net/universe-state))\n     (net/run-effects-twice! %)))\n\n(aid/defcurried append-cancellation\n  [net-id f! universe]\n  (s/setval [net-id :cancellations s/AFTER-ELEM] f! universe))\n\n(def positive-infinity\n  #?(:clj  Double/POSITIVE_INFINITY\n     :cljs js/Number.POSITIVE_INFINITY))\n\n(def run-universe-effects!\n  #(->> @net/universe-state\n        keys\n        (run! %)))\n\n(defn run-effects-once!\n  [net-id]\n  (net/set-active net-id false)\n  (net/run-effects!* net-id)\n  (net/set-active net-id true))\n\n(defn activate*\n  [rate]\n  (swap!\n    net/universe-state\n    (fn [universe]\n      (->>\n        universe\n        keys\n        (reduce\n          (fn [reduction element]\n            (append-cancellation element\n                                 (aid/case-eval rate\n                                   positive-infinity aid/nop\n                                   #?(:clj\n                                      (chime/chime-at (get-periods rate)\n                                                      (fn [_]\n                                                        (handle element)))\n                                      :cljs\n                                      (partial js/clearInterval\n                                               (js/setInterval (partial handle\n                                                                        element)\n                                                               rate))))\n                                 reduction))\n          universe))))\n  (swap! net/universe-state (partial s/setval* [s/MAP-VALS :active] true))\n  (run-universe-effects! run-effects-once!)\n  (time/start)\n  (swap! net/universe-state\n         (partial s/setval* [s/MAP-VALS :time] (net/get-new-time (time/now))))\n  (run-universe-effects! net/run-effects-twice!))\n\n(aid/defcurried effect\n  [f x]\n  (f x)\n  x)\n\n(defn reload*\n  [alias-id]\n  (if debugging\n    (swap!\n      reloading-state\n      (comp (effect (comp (partial run!\n                                   (comp (partial apply\n                                                  (invoke** net/initial-net-id))\n                                         (partial s/transform*\n                                                  s/FIRST\n                                                  alias-id)))\n                          :alias-invocations))\n            (partial s/setval* :entity-id-invocations [])\n            (partial s/setval* :entity-id alias-id)\n            #(s/setval [:alias-invocations s/END]\n                       (->> %\n                            :entity-id-invocations\n                            (filter (comp (-> %\n                                              :entity-id\n                                              set/map-invert)\n                                          first))\n                            (s/transform [s/ALL s/FIRST]\n                                         (-> %\n                                             :entity-id\n                                             set/map-invert)))\n                       %)))))\n\n#?(:cljs (def get-alias-id\n           (comp (partial apply hash-map)\n                 (partial mapcat (juxt (comp keyword\n                                             (partial (aid/flip subs) 2)\n                                             str)\n                                       (comp :entity-id\n                                             deref)))\n                 (partial filter (comp event?\n                                       deref))\n                 (partial map second)\n                 (partial mapcat ns-interns*)\n                 (partial filter find-ns)\n                 (partial map symbol))))\n\n(def reload\n  #?(:clj  aid/nop\n     :cljs (comp reload*\n                 get-alias-id)))\n\n(defmacro get-namespaces\n  []\n  (->> (try (ana-api/all-ns)\n            #?(:clj (catch NullPointerException _ [])))\n       (map str)\n       vec))\n\n(defmacro activate\n  ([]\n   `(activate positive-infinity))\n  ([rate]\n   `(let [activation# (activate* ~rate)]\n      (reload (get-namespaces))\n      activation#)))\n"]}