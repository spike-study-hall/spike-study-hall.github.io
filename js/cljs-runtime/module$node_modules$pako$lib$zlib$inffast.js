shadow$provide.module$node_modules$pako$lib$zlib$inffast=function(global,require,module,exports){module.exports=function(strm,start){var state=strm.state;var _in=strm.next_in;var input=strm.input;var last=_in+(strm.avail_in-5);var _out=strm.next_out;var output=strm.output;start=_out-(start-strm.avail_out);var end=_out+(strm.avail_out-257);var dmax=state.dmax;var wsize=state.wsize;var whave=state.whave;var wnext=state.wnext;var s_window=state.window;var hold=state.hold;var bits=state.bits;var lcode=
state.lencode;var dcode=state.distcode;var lmask=(1<<state.lenbits)-1;var dmask=(1<<state.distbits)-1;a:do{15>bits&&(hold+=input[_in++]<<bits,bits+=8,hold+=input[_in++]<<bits,bits+=8);var here=lcode[hold&lmask];b:for(;;){var op=here>>>24;hold>>>=op;bits-=op;op=here>>>16&255;if(0===op)output[_out++]=here&65535;else if(op&16){var len=here&65535;if(op&=15)bits<op&&(hold+=input[_in++]<<bits,bits+=8),len+=hold&(1<<op)-1,hold>>>=op,bits-=op;15>bits&&(hold+=input[_in++]<<bits,bits+=8,hold+=input[_in++]<<
bits,bits+=8);here=dcode[hold&dmask];c:for(;;){op=here>>>24;hold>>>=op;bits-=op;op=here>>>16&255;if(op&16){here&=65535;op&=15;bits<op&&(hold+=input[_in++]<<bits,bits+=8,bits<op&&(hold+=input[_in++]<<bits,bits+=8));here+=hold&(1<<op)-1;if(here>dmax){strm.msg="invalid distance too far back";state.mode=30;break a}hold>>>=op;bits-=op;op=_out-start;if(here>op){op=here-op;if(op>whave&&state.sane){strm.msg="invalid distance too far back";state.mode=30;break a}var from=0;var from_source=s_window;if(0===wnext){if(from+=
wsize-op,op<len){len-=op;do output[_out++]=s_window[from++];while(--op);from=_out-here;from_source=output}}else if(wnext<op){if(from+=wsize+wnext-op,op-=wnext,op<len){len-=op;do output[_out++]=s_window[from++];while(--op);from=0;if(wnext<len){op=wnext;len-=op;do output[_out++]=s_window[from++];while(--op);from=_out-here;from_source=output}}}else if(from+=wnext-op,op<len){len-=op;do output[_out++]=s_window[from++];while(--op);from=_out-here;from_source=output}for(;2<len;)output[_out++]=from_source[from++],
output[_out++]=from_source[from++],output[_out++]=from_source[from++],len-=3;len&&(output[_out++]=from_source[from++],1<len&&(output[_out++]=from_source[from++]))}else{from=_out-here;do output[_out++]=output[from++],output[_out++]=output[from++],output[_out++]=output[from++],len-=3;while(2<len);len&&(output[_out++]=output[from++],1<len&&(output[_out++]=output[from++]))}}else if(0===(op&64)){here=dcode[(here&65535)+(hold&(1<<op)-1)];continue c}else{strm.msg="invalid distance code";state.mode=30;break a}break}}else if(0===
(op&64)){here=lcode[(here&65535)+(hold&(1<<op)-1)];continue b}else{op&32?state.mode=12:(strm.msg="invalid literal/length code",state.mode=30);break a}break}}while(_in<last&&_out<end);len=bits>>3;_in-=len;bits-=len<<3;strm.next_in=_in;strm.next_out=_out;strm.avail_in=_in<last?5+(last-_in):5-(_in-last);strm.avail_out=_out<end?257+(end-_out):257-(_out-end);state.hold=hold&(1<<bits)-1;state.bits=bits}}
//# sourceMappingURL=module$node_modules$pako$lib$zlib$inffast.js.map
