{
"version":3,
"file":"module$node_modules$cookie_signature$index.js",
"lineCount":2,
"mappings":"AAAAA,cAAA,2CAAA,CAA+D,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CAiDvGC,QAASA,KAAI,CAACC,GAAD,CAAK,CAChB,MAAOC,OAAAC,WAAA,CAAkB,MAAlB,CAAAC,OAAA,CAAiCH,GAAjC,CAAAI,OAAA,CAA6C,KAA7C,CADS,CA5ClB,IAAIH,OAASL,OAAA,CAAQ,6CAAR,CAWbE,QAAAO,KAAA,CAAeC,QAAQ,CAACC,GAAD,CAAMC,MAAN,CAAa,CAClC,GAAI,QAAJ,EAAgB,MAAOD,IAAvB,CAA4B,KAAM,KAAIE,SAAJ,CAAc,4CAAd,CAAN,CAC5B,GAAI,QAAJ,EAAgB,MAAOD,OAAvB,CAA+B,KAAM,KAAIC,SAAJ,CAAc,iCAAd,CAAN,CAC/B,MAAOF,IAAP,CAAa,GAAb,CAAmBN,MAAAS,WAAA,CACL,QADK,CACKF,MADL,CAAAL,OAAA,CAETI,GAFS,CAAAH,OAAA,CAGT,QAHS,CAAAO,QAAA,CAIR,KAJQ;AAIA,EAJA,CAHe,CAoBpCb,QAAAc,OAAA,CAAiBC,QAAQ,CAACN,GAAD,CAAMC,MAAN,CAAa,CACpC,GAAI,QAAJ,EAAgB,MAAOD,IAAvB,CAA4B,KAAM,KAAIE,SAAJ,CAAc,wCAAd,CAAN,CAC5B,GAAI,QAAJ,EAAgB,MAAOD,OAAvB,CAA+B,KAAM,KAAIC,SAAJ,CAAc,iCAAd,CAAN,CAFK,IAGhCT,IAAMO,GAAAO,MAAA,CAAU,CAAV,CAAaP,GAAAQ,YAAA,CAAgB,GAAhB,CAAb,CACNC,OAAAA,CAAMlB,OAAAO,KAAA,CAAaL,GAAb,CAAkBQ,MAAlB,CAEV,OAAOT,KAAA,CAAKiB,MAAL,CAAA,EAAajB,IAAA,CAAKQ,GAAL,CAAb,CAAyBP,GAAzB,CAA+B,CAAA,CANF,CApCiE;",
"sources":["node_modules/cookie-signature/index.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$cookie_signature$index\"] = function(global,require,module,exports) {\n/**\n * Module dependencies.\n */\n\nvar crypto = require('crypto');\n\n/**\n * Sign the given `val` with `secret`.\n *\n * @param {String} val\n * @param {String} secret\n * @return {String}\n * @api private\n */\n\nexports.sign = function(val, secret){\n  if ('string' != typeof val) throw new TypeError(\"Cookie value must be provided as a string.\");\n  if ('string' != typeof secret) throw new TypeError(\"Secret string must be provided.\");\n  return val + '.' + crypto\n    .createHmac('sha256', secret)\n    .update(val)\n    .digest('base64')\n    .replace(/\\=+$/, '');\n};\n\n/**\n * Unsign and decode the given `val` with `secret`,\n * returning `false` if the signature is invalid.\n *\n * @param {String} val\n * @param {String} secret\n * @return {String|Boolean}\n * @api private\n */\n\nexports.unsign = function(val, secret){\n  if ('string' != typeof val) throw new TypeError(\"Signed cookie string must be provided.\");\n  if ('string' != typeof secret) throw new TypeError(\"Secret string must be provided.\");\n  var str = val.slice(0, val.lastIndexOf('.'))\n    , mac = exports.sign(str, secret);\n  \n  return sha1(mac) == sha1(val) ? str : false;\n};\n\n/**\n * Private\n */\n\nfunction sha1(str){\n  return crypto.createHash('sha1').update(str).digest('hex');\n}\n\n};"],
"names":["shadow$provide","global","require","module","exports","sha1","str","crypto","createHash","update","digest","sign","exports.sign","val","secret","TypeError","createHmac","replace","unsign","exports.unsign","slice","lastIndexOf","mac"]
}
