{
"version":3,
"file":"module$node_modules$peer$dist$src$services$checkBrokenConnections$index.js",
"lineCount":4,
"mappings":"AAAAA,cAAA,wEAAA,CAA4F,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CAEpIC,MAAAC,eAAA,CAAsBF,OAAtB,CAA+B,YAA/B,CAA6C,CAAEG,MAAO,CAAA,CAAT,CAA7C,CAEMC,OAAAA,CACFC,QAAW,CAAC,0BAAD,CAAqE,CAAlE,IAAAC,MAAF,0BAAE,MAAA,CAAOC,OAAT,0BAAS,OAAP,CAAeC,cAAA,IAAA,EAAA,GAAjB,0BAAiB,cAAA,CAFFC,GAEE,CAAjB,0BAAiB,cAAwCC,2BAAAA,CAAzD,0BAAyD,QACjE,KAAAC,UAAA,CAAiB,IACjB;IAAAL,MAAA,CAAaA,KACb,KAAAC,OAAA,CAAcA,MACd,KAAAG,QAAA,CAAeA,0BACf,KAAAF,cAAA,CAAqBA,aALuD,CAOhF,OAAA,UAAA,MAAAI,CAAAA,QAAK,EAAG,CAAA,IAAA,aAAA,IACA,KAAAD,UAAJ,EACIE,YAAA,CAAa,IAAAF,UAAb,CAEJ,KAAAA,UAAA,CAAiBG,UAAA,CAAW,QAAA,EAAM,CAC9B,YAAAC,iBAAA,EACA,aAAAJ,UAAA,CAAiB,IACjB,aAAAC,MAAA,EAH8B,CAAjB,CAId,IAAAJ,cAJc,CAJb,CAUR,OAAA,UAAA,KAAAQ,CAAAA,QAAI,EAAG,CACC,IAAAL,UAAJ,GACIE,YAAA,CAAa,IAAAF,UAAb,CACA,CAAA,IAAAA,UAAA,CAAiB,IAFrB,CADG,CAMP,OAAA,UAAA,iBAAAI,CAAAA,QAAgB,EAAG,CAAA,IACXE,EADW;AACPC,EADO,CAETC,WAAa,IAAAb,MAAAc,cAAA,EAFJ,CAGTC,IAAMC,CAAA,IAAIC,IAAJD,SAAA,EAHG,CAIQE,aAAiB,IAAAjB,OAAhC,cACR,WAAA,CAAA,OAAA,aAAA,CAAuBY,UAAvB,CAAA,KAAA,IAAA,qBAAA,UAAA,KAAA,EAAA,CAAA,CAAA,oBAAA,KAAA,CAAA,oBAAA,CAAA,UAAA,KAAA,EAAA,CAAmC,CAAxBM,oBAAAA,CAAX,oBAAA,MACI,KAAMC,OAAS,IAAApB,MAAAqB,cAAA,CAAyBF,oBAAzB,CAEf,IAAI,EADsBJ,GACtB,CAD4BK,MAAAE,YAAA,EAC5B,CAAoBJ,YAApB,CAAJ,CAEA,GAAI,CAC8B,IAA9B,IAACP,EAAD,CAAMS,MAAAG,UAAA,EAAN,GAA6C,IAAK,EAAlD,GAAsCZ,EAAtC,CAAsD,IAAK,EAA3D,CAA+DA,EAAAa,MAAA,EAD/D,CAAJ,OAGQ,CACJ,IAAAxB,MAAAyB,kBAAA,CAA6BN,oBAA7B,CAGA;AAFA,IAAAnB,MAAA0B,iBAAA,CAA4BP,oBAA5B,CAEA,CADAC,MAAAO,UAAA,CAAiB,IAAjB,CACA,CAAwB,IAAxB,IAACf,EAAD,CAAM,IAAAR,QAAN,GAAuC,IAAK,EAA5C,GAAgCQ,EAAhC,CAAgD,IAAK,EAArD,CAAyDA,EAAAgB,KAAA,CAAQ,IAAR,CAAcR,MAAd,CAJrD,CARuB,CALpB,CAsBvB1B,QAAAI,uBAAA,CAAiCA,MAlDmG;",
"sources":["node_modules/peer/dist/src/services/checkBrokenConnections/index.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$peer$dist$src$services$checkBrokenConnections$index\"] = function(global,require,module,exports) {\n\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst DEFAULT_CHECK_INTERVAL = 300;\nclass CheckBrokenConnections {\n    constructor({ realm, config, checkInterval = DEFAULT_CHECK_INTERVAL, onClose }) {\n        this.timeoutId = null;\n        this.realm = realm;\n        this.config = config;\n        this.onClose = onClose;\n        this.checkInterval = checkInterval;\n    }\n    start() {\n        if (this.timeoutId) {\n            clearTimeout(this.timeoutId);\n        }\n        this.timeoutId = setTimeout(() => {\n            this.checkConnections();\n            this.timeoutId = null;\n            this.start();\n        }, this.checkInterval);\n    }\n    stop() {\n        if (this.timeoutId) {\n            clearTimeout(this.timeoutId);\n            this.timeoutId = null;\n        }\n    }\n    checkConnections() {\n        var _a, _b;\n        const clientsIds = this.realm.getClientsIds();\n        const now = new Date().getTime();\n        const { alive_timeout: aliveTimeout } = this.config;\n        for (const clientId of clientsIds) {\n            const client = this.realm.getClientById(clientId);\n            const timeSinceLastPing = now - client.getLastPing();\n            if (timeSinceLastPing < aliveTimeout)\n                continue;\n            try {\n                (_a = client.getSocket()) === null || _a === void 0 ? void 0 : _a.close();\n            }\n            finally {\n                this.realm.clearMessageQueue(clientId);\n                this.realm.removeClientById(clientId);\n                client.setSocket(null);\n                (_b = this.onClose) === null || _b === void 0 ? void 0 : _b.call(this, client);\n            }\n        }\n    }\n}\nexports.CheckBrokenConnections = CheckBrokenConnections;\n\n};"],
"names":["shadow$provide","global","require","module","exports","Object","defineProperty","value","CheckBrokenConnections","constructor","realm","config","checkInterval","DEFAULT_CHECK_INTERVAL","onClose","timeoutId","start","clearTimeout","setTimeout","checkConnections","stop","_a","_b","clientsIds","getClientsIds","now","getTime","Date","aliveTimeout","clientId","client","getClientById","getLastPing","getSocket","close","clearMessageQueue","removeClientById","setSocket","call"]
}
