{
"version":3,
"file":"module$node_modules$media_typer$index.js",
"lineCount":6,
"mappings":"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",
"sources":["node_modules/media-typer/index.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$media_typer$index\"] = function(global,require,module,exports) {\n/*!\n * media-typer\n * Copyright(c) 2014 Douglas Christopher Wilson\n * MIT Licensed\n */\n\n/**\n * RegExp to match *( \";\" parameter ) in RFC 2616 sec 3.7\n *\n * parameter     = token \"=\" ( token | quoted-string )\n * token         = 1*<any CHAR except CTLs or separators>\n * separators    = \"(\" | \")\" | \"<\" | \">\" | \"@\"\n *               | \",\" | \";\" | \":\" | \"\\\" | <\">\n *               | \"/\" | \"[\" | \"]\" | \"?\" | \"=\"\n *               | \"{\" | \"}\" | SP | HT\n * quoted-string = ( <\"> *(qdtext | quoted-pair ) <\"> )\n * qdtext        = <any TEXT except <\">>\n * quoted-pair   = \"\\\" CHAR\n * CHAR          = <any US-ASCII character (octets 0 - 127)>\n * TEXT          = <any OCTET except CTLs, but including LWS>\n * LWS           = [CRLF] 1*( SP | HT )\n * CRLF          = CR LF\n * CR            = <US-ASCII CR, carriage return (13)>\n * LF            = <US-ASCII LF, linefeed (10)>\n * SP            = <US-ASCII SP, space (32)>\n * SHT           = <US-ASCII HT, horizontal-tab (9)>\n * CTL           = <any US-ASCII control character (octets 0 - 31) and DEL (127)>\n * OCTET         = <any 8-bit sequence of data>\n */\nvar paramRegExp = /; *([!#$%&'\\*\\+\\-\\.0-9A-Z\\^_`a-z\\|~]+) *= *(\"(?:[ !\\u0023-\\u005b\\u005d-\\u007e\\u0080-\\u00ff]|\\\\[\\u0020-\\u007e])*\"|[!#$%&'\\*\\+\\-\\.0-9A-Z\\^_`a-z\\|~]+) */g;\nvar textRegExp = /^[\\u0020-\\u007e\\u0080-\\u00ff]+$/\nvar tokenRegExp = /^[!#$%&'\\*\\+\\-\\.0-9A-Z\\^_`a-z\\|~]+$/\n\n/**\n * RegExp to match quoted-pair in RFC 2616\n *\n * quoted-pair = \"\\\" CHAR\n * CHAR        = <any US-ASCII character (octets 0 - 127)>\n */\nvar qescRegExp = /\\\\([\\u0000-\\u007f])/g;\n\n/**\n * RegExp to match chars that must be quoted-pair in RFC 2616\n */\nvar quoteRegExp = /([\\\\\"])/g;\n\n/**\n * RegExp to match type in RFC 6838\n *\n * type-name = restricted-name\n * subtype-name = restricted-name\n * restricted-name = restricted-name-first *126restricted-name-chars\n * restricted-name-first  = ALPHA / DIGIT\n * restricted-name-chars  = ALPHA / DIGIT / \"!\" / \"#\" /\n *                          \"$\" / \"&\" / \"-\" / \"^\" / \"_\"\n * restricted-name-chars =/ \".\" ; Characters before first dot always\n *                              ; specify a facet name\n * restricted-name-chars =/ \"+\" ; Characters after last plus always\n *                              ; specify a structured syntax suffix\n * ALPHA =  %x41-5A / %x61-7A   ; A-Z / a-z\n * DIGIT =  %x30-39             ; 0-9\n */\nvar subtypeNameRegExp = /^[A-Za-z0-9][A-Za-z0-9!#$&^_.-]{0,126}$/\nvar typeNameRegExp = /^[A-Za-z0-9][A-Za-z0-9!#$&^_-]{0,126}$/\nvar typeRegExp = /^ *([A-Za-z0-9][A-Za-z0-9!#$&^_-]{0,126})\\/([A-Za-z0-9][A-Za-z0-9!#$&^_.+-]{0,126}) *$/;\n\n/**\n * Module exports.\n */\n\nexports.format = format\nexports.parse = parse\n\n/**\n * Format object to media type.\n *\n * @param {object} obj\n * @return {string}\n * @api public\n */\n\nfunction format(obj) {\n  if (!obj || typeof obj !== 'object') {\n    throw new TypeError('argument obj is required')\n  }\n\n  var parameters = obj.parameters\n  var subtype = obj.subtype\n  var suffix = obj.suffix\n  var type = obj.type\n\n  if (!type || !typeNameRegExp.test(type)) {\n    throw new TypeError('invalid type')\n  }\n\n  if (!subtype || !subtypeNameRegExp.test(subtype)) {\n    throw new TypeError('invalid subtype')\n  }\n\n  // format as type/subtype\n  var string = type + '/' + subtype\n\n  // append +suffix\n  if (suffix) {\n    if (!typeNameRegExp.test(suffix)) {\n      throw new TypeError('invalid suffix')\n    }\n\n    string += '+' + suffix\n  }\n\n  // append parameters\n  if (parameters && typeof parameters === 'object') {\n    var param\n    var params = Object.keys(parameters).sort()\n\n    for (var i = 0; i < params.length; i++) {\n      param = params[i]\n\n      if (!tokenRegExp.test(param)) {\n        throw new TypeError('invalid parameter name')\n      }\n\n      string += '; ' + param + '=' + qstring(parameters[param])\n    }\n  }\n\n  return string\n}\n\n/**\n * Parse media type to object.\n *\n * @param {string|object} string\n * @return {Object}\n * @api public\n */\n\nfunction parse(string) {\n  if (!string) {\n    throw new TypeError('argument string is required')\n  }\n\n  // support req/res-like objects as argument\n  if (typeof string === 'object') {\n    string = getcontenttype(string)\n  }\n\n  if (typeof string !== 'string') {\n    throw new TypeError('argument string is required to be a string')\n  }\n\n  var index = string.indexOf(';')\n  var type = index !== -1\n    ? string.substr(0, index)\n    : string\n\n  var key\n  var match\n  var obj = splitType(type)\n  var params = {}\n  var value\n\n  paramRegExp.lastIndex = index\n\n  while (match = paramRegExp.exec(string)) {\n    if (match.index !== index) {\n      throw new TypeError('invalid parameter format')\n    }\n\n    index += match[0].length\n    key = match[1].toLowerCase()\n    value = match[2]\n\n    if (value[0] === '\"') {\n      // remove quotes and escapes\n      value = value\n        .substr(1, value.length - 2)\n        .replace(qescRegExp, '$1')\n    }\n\n    params[key] = value\n  }\n\n  if (index !== -1 && index !== string.length) {\n    throw new TypeError('invalid parameter format')\n  }\n\n  obj.parameters = params\n\n  return obj\n}\n\n/**\n * Get content-type from req/res objects.\n *\n * @param {object}\n * @return {Object}\n * @api private\n */\n\nfunction getcontenttype(obj) {\n  if (typeof obj.getHeader === 'function') {\n    // res-like\n    return obj.getHeader('content-type')\n  }\n\n  if (typeof obj.headers === 'object') {\n    // req-like\n    return obj.headers && obj.headers['content-type']\n  }\n}\n\n/**\n * Quote a string if necessary.\n *\n * @param {string} val\n * @return {string}\n * @api private\n */\n\nfunction qstring(val) {\n  var str = String(val)\n\n  // no need to quote tokens\n  if (tokenRegExp.test(str)) {\n    return str\n  }\n\n  if (str.length > 0 && !textRegExp.test(str)) {\n    throw new TypeError('invalid parameter value')\n  }\n\n  return '\"' + str.replace(quoteRegExp, '\\\\$1') + '\"'\n}\n\n/**\n * Simply \"type/subtype+siffx\" into parts.\n *\n * @param {string} string\n * @return {Object}\n * @api private\n */\n\nfunction splitType(string) {\n  var match = typeRegExp.exec(string.toLowerCase())\n\n  if (!match) {\n    throw new TypeError('invalid media type')\n  }\n\n  var type = match[1]\n  var subtype = match[2]\n  var suffix\n\n  // suffix after last +\n  var index = subtype.lastIndexOf('+')\n  if (index !== -1) {\n    suffix = subtype.substr(index + 1)\n    subtype = subtype.substr(0, index)\n  }\n\n  var obj = {\n    type: type,\n    subtype: subtype,\n    suffix: suffix\n  }\n\n  return obj\n}\n\n};"],
"names":["shadow$provide","global","require","module","exports","paramRegExp","textRegExp","tokenRegExp","qescRegExp","quoteRegExp","subtypeNameRegExp","typeNameRegExp","typeRegExp","format","obj","TypeError","parameters","subtype","suffix","type","test","string","params","i","Object","keys","sort","length","param","str","String","val","replace","parse","getHeader","headers","index","indexOf","substr","match","exec","toLowerCase","lastIndexOf","lastIndex","key","value"]
}
