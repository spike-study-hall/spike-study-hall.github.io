{
"version":3,
"file":"module$node_modules$body_parser$lib$types$raw.js",
"lineCount":3,
"mappings":"AAAAA,cAAA,8CAAA,CAAkE,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CAiG1GC,QAASA,YAAY,CAACC,IAAD,CAAO,CAC1B,MAAOC,SAAmB,CAACC,GAAD,CAAM,CAC9B,MAAO,CAAA,CAAQC,MAAA,CAAOD,GAAP,CAAYF,IAAZ,CADe,CADN,CApF5B,IAAII,MAAQR,OAAA,CAAQ,iCAAR,CAAZ,CACIS,MAAQT,OAAA,CAAQ,uCAAR,CAAA,CAAiB,iBAAjB,CADZ,CAEIU,KAAOV,OAAA,CAAQ,0CAAR,CAFX,CAGIO,OAASP,OAAA,CAAQ,mCAAR,CAMbC,OAAAC,QAAA,CAUAS,QAAa,CAACC,OAAD,CAAU,CAmBrBC,QAASA,MAAM,CAACC,GAAD,CAAM,CACnB,MAAOA,IADY,CAlBjBC,OAAAA,CAAOH,OAAPG,EAAkB,EAEtB,KAAIC;AAA2B,CAAA,CAA3BA,GAAUD,OAAAC,QAAd,CACIC,MAA8B,QAAtB,GAAA,MAAOF,QAAAE,MAAP,CACRT,KAAAK,MAAA,CAAYE,OAAAE,MAAZ,EAA0B,OAA1B,CADQ,CAERF,OAAAE,MAHJ,CAIIb,KAAOW,OAAAX,KAAPA,EAAoB,0BAJxB,CAKIc,OAASH,OAAAG,OAATA,EAAwB,CAAA,CAE5B,IAAe,CAAA,CAAf,GAAIA,MAAJ,EAA0C,UAA1C,GAAwB,MAAOA,OAA/B,CACE,KAAM,KAAIC,SAAJ,CAAc,gCAAd,CAAN,CAIF,IAAIC,YAA8B,UAAhB,GAAA,MAAOhB,KAAP,CACdD,WAAA,CAAYC,IAAZ,CADc,CAEdA,IAMJ,OAAOiB,SAAmB,CAACf,GAAD,CAAMgB,GAAN,CAAWC,IAAX,CAAiB,CACrCjB,GAAAkB,MAAJ,EACEf,KAAA,CAAM,qBAAN,CACA,CAAAc,IAAA,EAFF,GAMAjB,GAAAmB,KAGA,CAHWnB,GAAAmB,KAGX,EAHuB,EAGvB,CAAKlB,MAAAmB,QAAA,CAAepB,GAAf,CAAL,EAMAG,KAAA,CAAM,iBAAN,CAAyBH,GAAAqB,QAAA,CAAY,cAAZ,CAAzB,CAGA;AAAKP,WAAA,CAAYd,GAAZ,CAAL,CAOAI,IAAA,CAAKJ,GAAL,CAAUgB,GAAV,CAAeC,IAAf,CAAqBV,KAArB,CAA4BJ,KAA5B,CAAmC,CACjCmB,SAAU,IADuB,CAEjCZ,QAASA,OAFwB,CAGjCC,MAAOA,KAH0B,CAIjCC,OAAQA,MAJyB,CAAnC,CAPA,EACET,KAAA,CAAM,cAAN,CACA,CAAAc,IAAA,EAFF,CATA,GACEd,KAAA,CAAM,iBAAN,CACA,CAAAc,IAAA,EAFF,CATA,CADyC,CAvBtB,CAhCmF;",
"sources":["node_modules/body-parser/lib/types/raw.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$body_parser$lib$types$raw\"] = function(global,require,module,exports) {\n/*!\n * body-parser\n * Copyright(c) 2014-2015 Douglas Christopher Wilson\n * MIT Licensed\n */\n\n'use strict'\n\n/**\n * Module dependencies.\n */\n\nvar bytes = require('bytes')\nvar debug = require('debug')('body-parser:raw')\nvar read = require('../read')\nvar typeis = require('type-is')\n\n/**\n * Module exports.\n */\n\nmodule.exports = raw\n\n/**\n * Create a middleware to parse raw bodies.\n *\n * @param {object} [options]\n * @return {function}\n * @api public\n */\n\nfunction raw (options) {\n  var opts = options || {}\n\n  var inflate = opts.inflate !== false\n  var limit = typeof opts.limit !== 'number'\n    ? bytes.parse(opts.limit || '100kb')\n    : opts.limit\n  var type = opts.type || 'application/octet-stream'\n  var verify = opts.verify || false\n\n  if (verify !== false && typeof verify !== 'function') {\n    throw new TypeError('option verify must be function')\n  }\n\n  // create the appropriate type checking function\n  var shouldParse = typeof type !== 'function'\n    ? typeChecker(type)\n    : type\n\n  function parse (buf) {\n    return buf\n  }\n\n  return function rawParser (req, res, next) {\n    if (req._body) {\n      debug('body already parsed')\n      next()\n      return\n    }\n\n    req.body = req.body || {}\n\n    // skip requests without bodies\n    if (!typeis.hasBody(req)) {\n      debug('skip empty body')\n      next()\n      return\n    }\n\n    debug('content-type %j', req.headers['content-type'])\n\n    // determine if request should be parsed\n    if (!shouldParse(req)) {\n      debug('skip parsing')\n      next()\n      return\n    }\n\n    // read\n    read(req, res, next, parse, debug, {\n      encoding: null,\n      inflate: inflate,\n      limit: limit,\n      verify: verify\n    })\n  }\n}\n\n/**\n * Get the simple type checker.\n *\n * @param {string} type\n * @return {function}\n */\n\nfunction typeChecker (type) {\n  return function checkType (req) {\n    return Boolean(typeis(req, type))\n  }\n}\n\n};"],
"names":["shadow$provide","global","require","module","exports","typeChecker","type","checkType","req","typeis","bytes","debug","read","raw","options","parse","buf","opts","inflate","limit","verify","TypeError","shouldParse","rawParser","res","next","_body","body","hasBody","headers","encoding"]
}
