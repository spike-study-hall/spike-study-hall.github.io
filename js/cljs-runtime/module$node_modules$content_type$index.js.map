{
"version":3,
"file":"module$node_modules$content_type$index.js",
"lineCount":5,
"mappings":"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",
"sources":["node_modules/content-type/index.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$content_type$index\"] = function(global,require,module,exports) {\n/*!\n * content-type\n * Copyright(c) 2015 Douglas Christopher Wilson\n * MIT Licensed\n */\n\n'use strict'\n\n/**\n * RegExp to match *( \";\" parameter ) in RFC 7231 sec 3.1.1.1\n *\n * parameter     = token \"=\" ( token / quoted-string )\n * token         = 1*tchar\n * tchar         = \"!\" / \"#\" / \"$\" / \"%\" / \"&\" / \"'\" / \"*\"\n *               / \"+\" / \"-\" / \".\" / \"^\" / \"_\" / \"`\" / \"|\" / \"~\"\n *               / DIGIT / ALPHA\n *               ; any VCHAR, except delimiters\n * quoted-string = DQUOTE *( qdtext / quoted-pair ) DQUOTE\n * qdtext        = HTAB / SP / %x21 / %x23-5B / %x5D-7E / obs-text\n * obs-text      = %x80-FF\n * quoted-pair   = \"\\\" ( HTAB / SP / VCHAR / obs-text )\n */\nvar PARAM_REGEXP = /; *([!#$%&'*+.^_`|~0-9A-Za-z-]+) *= *(\"(?:[\\u000b\\u0020\\u0021\\u0023-\\u005b\\u005d-\\u007e\\u0080-\\u00ff]|\\\\[\\u000b\\u0020-\\u00ff])*\"|[!#$%&'*+.^_`|~0-9A-Za-z-]+) */g\nvar TEXT_REGEXP = /^[\\u000b\\u0020-\\u007e\\u0080-\\u00ff]+$/\nvar TOKEN_REGEXP = /^[!#$%&'*+.^_`|~0-9A-Za-z-]+$/\n\n/**\n * RegExp to match quoted-pair in RFC 7230 sec 3.2.6\n *\n * quoted-pair = \"\\\" ( HTAB / SP / VCHAR / obs-text )\n * obs-text    = %x80-FF\n */\nvar QESC_REGEXP = /\\\\([\\u000b\\u0020-\\u00ff])/g\n\n/**\n * RegExp to match chars that must be quoted-pair in RFC 7230 sec 3.2.6\n */\nvar QUOTE_REGEXP = /([\\\\\"])/g\n\n/**\n * RegExp to match type in RFC 7231 sec 3.1.1.1\n *\n * media-type = type \"/\" subtype\n * type       = token\n * subtype    = token\n */\nvar TYPE_REGEXP = /^[!#$%&'*+.^_`|~0-9A-Za-z-]+\\/[!#$%&'*+.^_`|~0-9A-Za-z-]+$/\n\n/**\n * Module exports.\n * @public\n */\n\nexports.format = format\nexports.parse = parse\n\n/**\n * Format object to media type.\n *\n * @param {object} obj\n * @return {string}\n * @public\n */\n\nfunction format (obj) {\n  if (!obj || typeof obj !== 'object') {\n    throw new TypeError('argument obj is required')\n  }\n\n  var parameters = obj.parameters\n  var type = obj.type\n\n  if (!type || !TYPE_REGEXP.test(type)) {\n    throw new TypeError('invalid type')\n  }\n\n  var string = type\n\n  // append parameters\n  if (parameters && typeof parameters === 'object') {\n    var param\n    var params = Object.keys(parameters).sort()\n\n    for (var i = 0; i < params.length; i++) {\n      param = params[i]\n\n      if (!TOKEN_REGEXP.test(param)) {\n        throw new TypeError('invalid parameter name')\n      }\n\n      string += '; ' + param + '=' + qstring(parameters[param])\n    }\n  }\n\n  return string\n}\n\n/**\n * Parse media type to object.\n *\n * @param {string|object} string\n * @return {Object}\n * @public\n */\n\nfunction parse (string) {\n  if (!string) {\n    throw new TypeError('argument string is required')\n  }\n\n  // support req/res-like objects as argument\n  var header = typeof string === 'object'\n    ? getcontenttype(string)\n    : string\n\n  if (typeof header !== 'string') {\n    throw new TypeError('argument string is required to be a string')\n  }\n\n  var index = header.indexOf(';')\n  var type = index !== -1\n    ? header.substr(0, index).trim()\n    : header.trim()\n\n  if (!TYPE_REGEXP.test(type)) {\n    throw new TypeError('invalid media type')\n  }\n\n  var obj = new ContentType(type.toLowerCase())\n\n  // parse parameters\n  if (index !== -1) {\n    var key\n    var match\n    var value\n\n    PARAM_REGEXP.lastIndex = index\n\n    while ((match = PARAM_REGEXP.exec(header))) {\n      if (match.index !== index) {\n        throw new TypeError('invalid parameter format')\n      }\n\n      index += match[0].length\n      key = match[1].toLowerCase()\n      value = match[2]\n\n      if (value[0] === '\"') {\n        // remove quotes and escapes\n        value = value\n          .substr(1, value.length - 2)\n          .replace(QESC_REGEXP, '$1')\n      }\n\n      obj.parameters[key] = value\n    }\n\n    if (index !== header.length) {\n      throw new TypeError('invalid parameter format')\n    }\n  }\n\n  return obj\n}\n\n/**\n * Get content-type from req/res objects.\n *\n * @param {object}\n * @return {Object}\n * @private\n */\n\nfunction getcontenttype (obj) {\n  var header\n\n  if (typeof obj.getHeader === 'function') {\n    // res-like\n    header = obj.getHeader('content-type')\n  } else if (typeof obj.headers === 'object') {\n    // req-like\n    header = obj.headers && obj.headers['content-type']\n  }\n\n  if (typeof header !== 'string') {\n    throw new TypeError('content-type header is missing from object')\n  }\n\n  return header\n}\n\n/**\n * Quote a string if necessary.\n *\n * @param {string} val\n * @return {string}\n * @private\n */\n\nfunction qstring (val) {\n  var str = String(val)\n\n  // no need to quote tokens\n  if (TOKEN_REGEXP.test(str)) {\n    return str\n  }\n\n  if (str.length > 0 && !TEXT_REGEXP.test(str)) {\n    throw new TypeError('invalid parameter value')\n  }\n\n  return '\"' + str.replace(QUOTE_REGEXP, '\\\\$1') + '\"'\n}\n\n/**\n * Class to represent a content type.\n * @private\n */\nfunction ContentType (type) {\n  this.parameters = Object.create(null)\n  this.type = type\n}\n\n};"],
"names":["shadow$provide","global","require","module","exports","ContentType","type","parameters","Object","create","PARAM_REGEXP","TEXT_REGEXP","TOKEN_REGEXP","QESC_REGEXP","QUOTE_REGEXP","TYPE_REGEXP","format","obj","TypeError","test","string","params","keys","sort","i","length","param","str","String","val","replace","parse","header","getHeader","headers","index","indexOf","substr","trim","toLowerCase","match","lastIndex","exec","key","value"]
}
