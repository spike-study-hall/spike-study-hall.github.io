{"version":3,"sources":["linked/core.cljc"],"mappings":";;;;AAKA,AAAA,AAAA,AAAAA,AAAME;AAAN,AAAA,AAAAD,AAAA,AAAA;AAAA,AAAA,AAAAA;AAAA;AAAA,AAAAC;;;;AAAA,AAAAC,AAAA;AAAA,AAAA,AAAAC,AAAA,AAAA;AAAA,AAAA,AAAAC,AAAA;;AAAA,AAAA,AAAA,AAAAA,AAAAD;AAAA,AAAA,AAAAD,AAAA,AAAA,AAAAE;;AAAA,AAAA,AAAAA,AAAA;;;;AAAA;;;;AAAA,AAAAC,AAAA,AAAAC,AAAA,AAAAJ,AAAA,AAAA,AAAA;AAAA,AAAA,AAAAD,AAAAI;;;;;AAAA,AAAA,AAAA,AAAMJ;AAAN,AACMS;;;AADN,AAAA,AAAA,AAAA,AAAMT,AAEAU;AAFN,AAEe,AAACC,AAAMC,AAAMH,AAAmBC;;;AAF/C;AAAA,AAAA,AAAA,AAAAJ,AAAMN;AAAN,AAAA,AAAAO,AAAA;AAAA,AAAA,AAAAA,AAAA,AAAAC,AAAAF;;;AAAA,AAAA,AAAA,AAAMN;;AAAN,AAIA,AAAA,AAAA,AAAAF,AAAMgB;AAAN,AAAA,AAAAD,AAAA,AAAA;AAAA,AAAA,AAAAA;AAAA;AAAA,AAAAC;;;;AAAA,AAAAb,AAAA;AAAA,AAAA,AAAAC,AAAA,AAAA;AAAA,AAAA,AAAAC,AAAA;;AAAA,AAAA,AAAA,AAAAA,AAAAD;AAAA,AAAA,AAAAD,AAAA,AAAA,AAAAE;;AAAA,AAAA,AAAAA,AAAA;;;;AAAA;;;;AAAA,AAAAC,AAAA,AAAAC,AAAA,AAAAJ,AAAA,AAAA,AAAA;AAAA,AAAA,AAAAa,AAAAV;;;;;AAAA,AAAA,AAAA,AAAMU;AAAN,AACME;;;AADN,AAAA,AAAA,AAAA,AAAMF,AAEAG;AAFN,AAEY,AAACN,AAAMO,AAAKF,AAAmBC;;;AAF3C;AAAA,AAAA,AAAA,AAAAF,AAAMD;AAAN,AAAA,AAAAP,AAAA;AAAA,AAAA,AAAAA,AAAA,AAAAC,AAAAO;;;AAAA,AAAA,AAAA,AAAMD;;AAAN","names":["var_args","G__58881","linked.core/map","args-arr__4751__auto__","len__4730__auto__","i__4731__auto__","argseq__4752__auto__","cljs.core/IndexedSeq","seq58880","self__4718__auto__","cljs.core/seq","linked.map/empty-linked-map","keyvals","cljs.core.apply.cljs$core$IFn$_invoke$arity$3","cljs.core/assoc","G__58884","linked.core/set","seq58883","linked.set/empty-linked-set","keys","cljs.core/conj"],"sourcesContent":["(ns linked.core\n  (:refer-clojure :exclude [map set])\n  (:require [linked.map :as m]\n            [linked.set :as s]))\n\n(defn map\n  ([] m/empty-linked-map)\n  ([& keyvals] (apply assoc m/empty-linked-map keyvals)))\n\n(defn set\n  ([] s/empty-linked-set)\n  ([& keys] (apply conj s/empty-linked-set keys)))\n"]}