{
"version":3,
"file":"module$node_modules$iconv_lite$encodings$utf7.js",
"lineCount":10,
"mappings":"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",
"sources":["node_modules/iconv-lite/encodings/utf7.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$iconv_lite$encodings$utf7\"] = function(global,require,module,exports) {\n\"use strict\";\nvar Buffer = require(\"safer-buffer\").Buffer;\n\n// UTF-7 codec, according to https://tools.ietf.org/html/rfc2152\n// See also below a UTF-7-IMAP codec, according to http://tools.ietf.org/html/rfc3501#section-5.1.3\n\nexports.utf7 = Utf7Codec;\nexports.unicode11utf7 = 'utf7'; // Alias UNICODE-1-1-UTF-7\nfunction Utf7Codec(codecOptions, iconv) {\n    this.iconv = iconv;\n};\n\nUtf7Codec.prototype.encoder = Utf7Encoder;\nUtf7Codec.prototype.decoder = Utf7Decoder;\nUtf7Codec.prototype.bomAware = true;\n\n\n// -- Encoding\n\nvar nonDirectChars = /[^A-Za-z0-9'\\(\\),-\\.\\/:\\? \\n\\r\\t]+/g;\n\nfunction Utf7Encoder(options, codec) {\n    this.iconv = codec.iconv;\n}\n\nUtf7Encoder.prototype.write = function(str) {\n    // Naive implementation.\n    // Non-direct chars are encoded as \"+<base64>-\"; single \"+\" char is encoded as \"+-\".\n    return Buffer.from(str.replace(nonDirectChars, function(chunk) {\n        return \"+\" + (chunk === '+' ? '' : \n            this.iconv.encode(chunk, 'utf16-be').toString('base64').replace(/=+$/, '')) \n            + \"-\";\n    }.bind(this)));\n}\n\nUtf7Encoder.prototype.end = function() {\n}\n\n\n// -- Decoding\n\nfunction Utf7Decoder(options, codec) {\n    this.iconv = codec.iconv;\n    this.inBase64 = false;\n    this.base64Accum = '';\n}\n\nvar base64Regex = /[A-Za-z0-9\\/+]/;\nvar base64Chars = [];\nfor (var i = 0; i < 256; i++)\n    base64Chars[i] = base64Regex.test(String.fromCharCode(i));\n\nvar plusChar = '+'.charCodeAt(0), \n    minusChar = '-'.charCodeAt(0),\n    andChar = '&'.charCodeAt(0);\n\nUtf7Decoder.prototype.write = function(buf) {\n    var res = \"\", lastI = 0,\n        inBase64 = this.inBase64,\n        base64Accum = this.base64Accum;\n\n    // The decoder is more involved as we must handle chunks in stream.\n\n    for (var i = 0; i < buf.length; i++) {\n        if (!inBase64) { // We're in direct mode.\n            // Write direct chars until '+'\n            if (buf[i] == plusChar) {\n                res += this.iconv.decode(buf.slice(lastI, i), \"ascii\"); // Write direct chars.\n                lastI = i+1;\n                inBase64 = true;\n            }\n        } else { // We decode base64.\n            if (!base64Chars[buf[i]]) { // Base64 ended.\n                if (i == lastI && buf[i] == minusChar) {// \"+-\" -> \"+\"\n                    res += \"+\";\n                } else {\n                    var b64str = base64Accum + buf.slice(lastI, i).toString();\n                    res += this.iconv.decode(Buffer.from(b64str, 'base64'), \"utf16-be\");\n                }\n\n                if (buf[i] != minusChar) // Minus is absorbed after base64.\n                    i--;\n\n                lastI = i+1;\n                inBase64 = false;\n                base64Accum = '';\n            }\n        }\n    }\n\n    if (!inBase64) {\n        res += this.iconv.decode(buf.slice(lastI), \"ascii\"); // Write direct chars.\n    } else {\n        var b64str = base64Accum + buf.slice(lastI).toString();\n\n        var canBeDecoded = b64str.length - (b64str.length % 8); // Minimal chunk: 2 quads -> 2x3 bytes -> 3 chars.\n        base64Accum = b64str.slice(canBeDecoded); // The rest will be decoded in future.\n        b64str = b64str.slice(0, canBeDecoded);\n\n        res += this.iconv.decode(Buffer.from(b64str, 'base64'), \"utf16-be\");\n    }\n\n    this.inBase64 = inBase64;\n    this.base64Accum = base64Accum;\n\n    return res;\n}\n\nUtf7Decoder.prototype.end = function() {\n    var res = \"\";\n    if (this.inBase64 && this.base64Accum.length > 0)\n        res = this.iconv.decode(Buffer.from(this.base64Accum, 'base64'), \"utf16-be\");\n\n    this.inBase64 = false;\n    this.base64Accum = '';\n    return res;\n}\n\n\n// UTF-7-IMAP codec.\n// RFC3501 Sec. 5.1.3 Modified UTF-7 (http://tools.ietf.org/html/rfc3501#section-5.1.3)\n// Differences:\n//  * Base64 part is started by \"&\" instead of \"+\"\n//  * Direct characters are 0x20-0x7E, except \"&\" (0x26)\n//  * In Base64, \",\" is used instead of \"/\"\n//  * Base64 must not be used to represent direct characters.\n//  * No implicit shift back from Base64 (should always end with '-')\n//  * String must end in non-shifted position.\n//  * \"-&\" while in base64 is not allowed.\n\n\nexports.utf7imap = Utf7IMAPCodec;\nfunction Utf7IMAPCodec(codecOptions, iconv) {\n    this.iconv = iconv;\n};\n\nUtf7IMAPCodec.prototype.encoder = Utf7IMAPEncoder;\nUtf7IMAPCodec.prototype.decoder = Utf7IMAPDecoder;\nUtf7IMAPCodec.prototype.bomAware = true;\n\n\n// -- Encoding\n\nfunction Utf7IMAPEncoder(options, codec) {\n    this.iconv = codec.iconv;\n    this.inBase64 = false;\n    this.base64Accum = Buffer.alloc(6);\n    this.base64AccumIdx = 0;\n}\n\nUtf7IMAPEncoder.prototype.write = function(str) {\n    var inBase64 = this.inBase64,\n        base64Accum = this.base64Accum,\n        base64AccumIdx = this.base64AccumIdx,\n        buf = Buffer.alloc(str.length*5 + 10), bufIdx = 0;\n\n    for (var i = 0; i < str.length; i++) {\n        var uChar = str.charCodeAt(i);\n        if (0x20 <= uChar && uChar <= 0x7E) { // Direct character or '&'.\n            if (inBase64) {\n                if (base64AccumIdx > 0) {\n                    bufIdx += buf.write(base64Accum.slice(0, base64AccumIdx).toString('base64').replace(/\\//g, ',').replace(/=+$/, ''), bufIdx);\n                    base64AccumIdx = 0;\n                }\n\n                buf[bufIdx++] = minusChar; // Write '-', then go to direct mode.\n                inBase64 = false;\n            }\n\n            if (!inBase64) {\n                buf[bufIdx++] = uChar; // Write direct character\n\n                if (uChar === andChar)  // Ampersand -> '&-'\n                    buf[bufIdx++] = minusChar;\n            }\n\n        } else { // Non-direct character\n            if (!inBase64) {\n                buf[bufIdx++] = andChar; // Write '&', then go to base64 mode.\n                inBase64 = true;\n            }\n            if (inBase64) {\n                base64Accum[base64AccumIdx++] = uChar >> 8;\n                base64Accum[base64AccumIdx++] = uChar & 0xFF;\n\n                if (base64AccumIdx == base64Accum.length) {\n                    bufIdx += buf.write(base64Accum.toString('base64').replace(/\\//g, ','), bufIdx);\n                    base64AccumIdx = 0;\n                }\n            }\n        }\n    }\n\n    this.inBase64 = inBase64;\n    this.base64AccumIdx = base64AccumIdx;\n\n    return buf.slice(0, bufIdx);\n}\n\nUtf7IMAPEncoder.prototype.end = function() {\n    var buf = Buffer.alloc(10), bufIdx = 0;\n    if (this.inBase64) {\n        if (this.base64AccumIdx > 0) {\n            bufIdx += buf.write(this.base64Accum.slice(0, this.base64AccumIdx).toString('base64').replace(/\\//g, ',').replace(/=+$/, ''), bufIdx);\n            this.base64AccumIdx = 0;\n        }\n\n        buf[bufIdx++] = minusChar; // Write '-', then go to direct mode.\n        this.inBase64 = false;\n    }\n\n    return buf.slice(0, bufIdx);\n}\n\n\n// -- Decoding\n\nfunction Utf7IMAPDecoder(options, codec) {\n    this.iconv = codec.iconv;\n    this.inBase64 = false;\n    this.base64Accum = '';\n}\n\nvar base64IMAPChars = base64Chars.slice();\nbase64IMAPChars[','.charCodeAt(0)] = true;\n\nUtf7IMAPDecoder.prototype.write = function(buf) {\n    var res = \"\", lastI = 0,\n        inBase64 = this.inBase64,\n        base64Accum = this.base64Accum;\n\n    // The decoder is more involved as we must handle chunks in stream.\n    // It is forgiving, closer to standard UTF-7 (for example, '-' is optional at the end).\n\n    for (var i = 0; i < buf.length; i++) {\n        if (!inBase64) { // We're in direct mode.\n            // Write direct chars until '&'\n            if (buf[i] == andChar) {\n                res += this.iconv.decode(buf.slice(lastI, i), \"ascii\"); // Write direct chars.\n                lastI = i+1;\n                inBase64 = true;\n            }\n        } else { // We decode base64.\n            if (!base64IMAPChars[buf[i]]) { // Base64 ended.\n                if (i == lastI && buf[i] == minusChar) { // \"&-\" -> \"&\"\n                    res += \"&\";\n                } else {\n                    var b64str = base64Accum + buf.slice(lastI, i).toString().replace(/,/g, '/');\n                    res += this.iconv.decode(Buffer.from(b64str, 'base64'), \"utf16-be\");\n                }\n\n                if (buf[i] != minusChar) // Minus may be absorbed after base64.\n                    i--;\n\n                lastI = i+1;\n                inBase64 = false;\n                base64Accum = '';\n            }\n        }\n    }\n\n    if (!inBase64) {\n        res += this.iconv.decode(buf.slice(lastI), \"ascii\"); // Write direct chars.\n    } else {\n        var b64str = base64Accum + buf.slice(lastI).toString().replace(/,/g, '/');\n\n        var canBeDecoded = b64str.length - (b64str.length % 8); // Minimal chunk: 2 quads -> 2x3 bytes -> 3 chars.\n        base64Accum = b64str.slice(canBeDecoded); // The rest will be decoded in future.\n        b64str = b64str.slice(0, canBeDecoded);\n\n        res += this.iconv.decode(Buffer.from(b64str, 'base64'), \"utf16-be\");\n    }\n\n    this.inBase64 = inBase64;\n    this.base64Accum = base64Accum;\n\n    return res;\n}\n\nUtf7IMAPDecoder.prototype.end = function() {\n    var res = \"\";\n    if (this.inBase64 && this.base64Accum.length > 0)\n        res = this.iconv.decode(Buffer.from(this.base64Accum, 'base64'), \"utf16-be\");\n\n    this.inBase64 = false;\n    this.base64Accum = '';\n    return res;\n}\n\n\n\n};"],
"names":["shadow$provide","global","require","module","exports","Utf7Codec","codecOptions","iconv","Utf7Encoder","options","codec","Utf7Decoder","inBase64","base64Accum","Utf7IMAPCodec","Utf7IMAPEncoder","Buffer","alloc","base64AccumIdx","Utf7IMAPDecoder","utf7","unicode11utf7","prototype","encoder","decoder","bomAware","nonDirectChars","write","Utf7Encoder.prototype.write","str","from","replace","chunk","encode","toString","bind","end","Utf7Encoder.prototype.end","base64Regex","base64Chars","i","test","String","fromCharCode","Utf7Decoder.prototype.write","buf","res","lastI","length","minusChar","b64str","slice","decode","plusChar","canBeDecoded","Utf7Decoder.prototype.end","utf7imap","Utf7IMAPEncoder.prototype.write","bufIdx","uChar","charCodeAt","andChar","Utf7IMAPEncoder.prototype.end","base64IMAPChars","Utf7IMAPDecoder.prototype.write","Utf7IMAPDecoder.prototype.end"]
}
