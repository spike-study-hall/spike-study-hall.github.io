{
"version":3,
"file":"module$node_modules$negotiator$lib$mediaType.js",
"lineCount":6,
"mappings":"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",
"sources":["node_modules/negotiator/lib/mediaType.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$negotiator$lib$mediaType\"] = function(global,require,module,exports) {\n/**\n * negotiator\n * Copyright(c) 2012 Isaac Z. Schlueter\n * Copyright(c) 2014 Federico Romero\n * Copyright(c) 2014-2015 Douglas Christopher Wilson\n * MIT Licensed\n */\n\n'use strict';\n\n/**\n * Module exports.\n * @public\n */\n\nmodule.exports = preferredMediaTypes;\nmodule.exports.preferredMediaTypes = preferredMediaTypes;\n\n/**\n * Module variables.\n * @private\n */\n\nvar simpleMediaTypeRegExp = /^\\s*([^\\s\\/;]+)\\/([^;\\s]+)\\s*(?:;(.*))?$/;\n\n/**\n * Parse the Accept header.\n * @private\n */\n\nfunction parseAccept(accept) {\n  var accepts = splitMediaTypes(accept);\n\n  for (var i = 0, j = 0; i < accepts.length; i++) {\n    var mediaType = parseMediaType(accepts[i].trim(), i);\n\n    if (mediaType) {\n      accepts[j++] = mediaType;\n    }\n  }\n\n  // trim accepts\n  accepts.length = j;\n\n  return accepts;\n}\n\n/**\n * Parse a media type from the Accept header.\n * @private\n */\n\nfunction parseMediaType(str, i) {\n  var match = simpleMediaTypeRegExp.exec(str);\n  if (!match) return null;\n\n  var params = Object.create(null);\n  var q = 1;\n  var subtype = match[2];\n  var type = match[1];\n\n  if (match[3]) {\n    var kvps = splitParameters(match[3]).map(splitKeyValuePair);\n\n    for (var j = 0; j < kvps.length; j++) {\n      var pair = kvps[j];\n      var key = pair[0].toLowerCase();\n      var val = pair[1];\n\n      // get the value, unwrapping quotes\n      var value = val && val[0] === '\"' && val[val.length - 1] === '\"'\n        ? val.substr(1, val.length - 2)\n        : val;\n\n      if (key === 'q') {\n        q = parseFloat(value);\n        break;\n      }\n\n      // store parameter\n      params[key] = value;\n    }\n  }\n\n  return {\n    type: type,\n    subtype: subtype,\n    params: params,\n    q: q,\n    i: i\n  };\n}\n\n/**\n * Get the priority of a media type.\n * @private\n */\n\nfunction getMediaTypePriority(type, accepted, index) {\n  var priority = {o: -1, q: 0, s: 0};\n\n  for (var i = 0; i < accepted.length; i++) {\n    var spec = specify(type, accepted[i], index);\n\n    if (spec && (priority.s - spec.s || priority.q - spec.q || priority.o - spec.o) < 0) {\n      priority = spec;\n    }\n  }\n\n  return priority;\n}\n\n/**\n * Get the specificity of the media type.\n * @private\n */\n\nfunction specify(type, spec, index) {\n  var p = parseMediaType(type);\n  var s = 0;\n\n  if (!p) {\n    return null;\n  }\n\n  if(spec.type.toLowerCase() == p.type.toLowerCase()) {\n    s |= 4\n  } else if(spec.type != '*') {\n    return null;\n  }\n\n  if(spec.subtype.toLowerCase() == p.subtype.toLowerCase()) {\n    s |= 2\n  } else if(spec.subtype != '*') {\n    return null;\n  }\n\n  var keys = Object.keys(spec.params);\n  if (keys.length > 0) {\n    if (keys.every(function (k) {\n      return spec.params[k] == '*' || (spec.params[k] || '').toLowerCase() == (p.params[k] || '').toLowerCase();\n    })) {\n      s |= 1\n    } else {\n      return null\n    }\n  }\n\n  return {\n    i: index,\n    o: spec.i,\n    q: spec.q,\n    s: s,\n  }\n}\n\n/**\n * Get the preferred media types from an Accept header.\n * @public\n */\n\nfunction preferredMediaTypes(accept, provided) {\n  // RFC 2616 sec 14.2: no header = */*\n  var accepts = parseAccept(accept === undefined ? '*/*' : accept || '');\n\n  if (!provided) {\n    // sorted list of all types\n    return accepts\n      .filter(isQuality)\n      .sort(compareSpecs)\n      .map(getFullType);\n  }\n\n  var priorities = provided.map(function getPriority(type, index) {\n    return getMediaTypePriority(type, accepts, index);\n  });\n\n  // sorted list of accepted types\n  return priorities.filter(isQuality).sort(compareSpecs).map(function getType(priority) {\n    return provided[priorities.indexOf(priority)];\n  });\n}\n\n/**\n * Compare two specs.\n * @private\n */\n\nfunction compareSpecs(a, b) {\n  return (b.q - a.q) || (b.s - a.s) || (a.o - b.o) || (a.i - b.i) || 0;\n}\n\n/**\n * Get full type string.\n * @private\n */\n\nfunction getFullType(spec) {\n  return spec.type + '/' + spec.subtype;\n}\n\n/**\n * Check if a spec has any quality.\n * @private\n */\n\nfunction isQuality(spec) {\n  return spec.q > 0;\n}\n\n/**\n * Count the number of quotes in a string.\n * @private\n */\n\nfunction quoteCount(string) {\n  var count = 0;\n  var index = 0;\n\n  while ((index = string.indexOf('\"', index)) !== -1) {\n    count++;\n    index++;\n  }\n\n  return count;\n}\n\n/**\n * Split a key value pair.\n * @private\n */\n\nfunction splitKeyValuePair(str) {\n  var index = str.indexOf('=');\n  var key;\n  var val;\n\n  if (index === -1) {\n    key = str;\n  } else {\n    key = str.substr(0, index);\n    val = str.substr(index + 1);\n  }\n\n  return [key, val];\n}\n\n/**\n * Split an Accept header into media types.\n * @private\n */\n\nfunction splitMediaTypes(accept) {\n  var accepts = accept.split(',');\n\n  for (var i = 1, j = 0; i < accepts.length; i++) {\n    if (quoteCount(accepts[j]) % 2 == 0) {\n      accepts[++j] = accepts[i];\n    } else {\n      accepts[j] += ',' + accepts[i];\n    }\n  }\n\n  // trim accepts\n  accepts.length = j + 1;\n\n  return accepts;\n}\n\n/**\n * Split a string of parameters.\n * @private\n */\n\nfunction splitParameters(str) {\n  var parameters = str.split(';');\n\n  for (var i = 1, j = 0; i < parameters.length; i++) {\n    if (quoteCount(parameters[j]) % 2 == 0) {\n      parameters[++j] = parameters[i];\n    } else {\n      parameters[j] += ';' + parameters[i];\n    }\n  }\n\n  // trim parameters\n  parameters.length = j + 1;\n\n  for (var i = 0; i < parameters.length; i++) {\n    parameters[i] = parameters[i].trim();\n  }\n\n  return parameters;\n}\n\n};"],
"names":["shadow$provide","global","require","module","exports","parseAccept","accept","accepts","split","i","j","length","quoteCount","mediaType","parseMediaType","trim","str","match","simpleMediaTypeRegExp","exec","params","Object","create","q","subtype","type","parameters","kvps","map","splitKeyValuePair","pair","key","toLowerCase","value","val","substr","parseFloat","specify","spec","index","p","s","keys","every","k","o","preferredMediaTypes","provided","undefined","filter","isQuality","sort","compareSpecs","getFullType","priorities","getPriority","priority","getType","indexOf","a","b","string","count"]
}
