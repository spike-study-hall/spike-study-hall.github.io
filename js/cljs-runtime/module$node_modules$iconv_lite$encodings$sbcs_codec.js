shadow$provide.module$node_modules$iconv_lite$encodings$sbcs_codec=function(global,require,module,exports){function SBCSCodec(codecOptions,iconv){if(!codecOptions)throw Error("SBCS codec is called without the data.");if(!codecOptions.chars||128!==codecOptions.chars.length&&256!==codecOptions.chars.length)throw Error("Encoding '"+codecOptions.type+"' has incorrect 'chars' (must be of len 128 or 256)");if(128===codecOptions.chars.length){for(var asciiString="",i=0;128>i;i++)asciiString+=String.fromCharCode(i);
codecOptions.chars=asciiString+codecOptions.chars}this.decodeBuf=Buffer.from(codecOptions.chars,"ucs2");iconv=Buffer.alloc(65536,iconv.defaultCharSingleByte.charCodeAt(0));for(i=0;i<codecOptions.chars.length;i++)iconv[codecOptions.chars.charCodeAt(i)]=i;this.encodeBuf=iconv}function SBCSEncoder(options,codec){this.encodeBuf=codec.encodeBuf}function SBCSDecoder(options,codec){this.decodeBuf=codec.decodeBuf}var Buffer=require("module$node_modules$safer_buffer$safer").Buffer;exports._sbcs=SBCSCodec;
SBCSCodec.prototype.encoder=SBCSEncoder;SBCSCodec.prototype.decoder=SBCSDecoder;SBCSEncoder.prototype.write=function(str){for(var buf=Buffer.alloc(str.length),i=0;i<str.length;i++)buf[i]=this.encodeBuf[str.charCodeAt(i)];return buf};SBCSEncoder.prototype.end=function(){};SBCSDecoder.prototype.write=function(buf){for(var decodeBuf=this.decodeBuf,newBuf=Buffer.alloc(2*buf.length),idx1,idx2,i=0;i<buf.length;i++)idx1=2*buf[i],idx2=2*i,newBuf[idx2]=decodeBuf[idx1],newBuf[idx2+1]=decodeBuf[idx1+1];return newBuf.toString("ucs2")};
SBCSDecoder.prototype.end=function(){}}
//# sourceMappingURL=module$node_modules$iconv_lite$encodings$sbcs_codec.js.map
