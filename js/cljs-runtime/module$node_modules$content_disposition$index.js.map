{
"version":3,
"file":"module$node_modules$content_disposition$index.js",
"lineCount":9,
"mappings":"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",
"sources":["node_modules/content-disposition/index.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$content_disposition$index\"] = function(global,require,module,exports) {\n/*!\n * content-disposition\n * Copyright(c) 2014-2017 Douglas Christopher Wilson\n * MIT Licensed\n */\n\n'use strict'\n\n/**\n * Module exports.\n * @public\n */\n\nmodule.exports = contentDisposition\nmodule.exports.parse = parse\n\n/**\n * Module dependencies.\n * @private\n */\n\nvar basename = require('path').basename\nvar Buffer = require('safe-buffer').Buffer\n\n/**\n * RegExp to match non attr-char, *after* encodeURIComponent (i.e. not including \"%\")\n * @private\n */\n\nvar ENCODE_URL_ATTR_CHAR_REGEXP = /[\\x00-\\x20\"'()*,/:;<=>?@[\\\\\\]{}\\x7f]/g // eslint-disable-line no-control-regex\n\n/**\n * RegExp to match percent encoding escape.\n * @private\n */\n\nvar HEX_ESCAPE_REGEXP = /%[0-9A-Fa-f]{2}/\nvar HEX_ESCAPE_REPLACE_REGEXP = /%([0-9A-Fa-f]{2})/g\n\n/**\n * RegExp to match non-latin1 characters.\n * @private\n */\n\nvar NON_LATIN1_REGEXP = /[^\\x20-\\x7e\\xa0-\\xff]/g\n\n/**\n * RegExp to match quoted-pair in RFC 2616\n *\n * quoted-pair = \"\\\" CHAR\n * CHAR        = <any US-ASCII character (octets 0 - 127)>\n * @private\n */\n\nvar QESC_REGEXP = /\\\\([\\u0000-\\u007f])/g // eslint-disable-line no-control-regex\n\n/**\n * RegExp to match chars that must be quoted-pair in RFC 2616\n * @private\n */\n\nvar QUOTE_REGEXP = /([\\\\\"])/g\n\n/**\n * RegExp for various RFC 2616 grammar\n *\n * parameter     = token \"=\" ( token | quoted-string )\n * token         = 1*<any CHAR except CTLs or separators>\n * separators    = \"(\" | \")\" | \"<\" | \">\" | \"@\"\n *               | \",\" | \";\" | \":\" | \"\\\" | <\">\n *               | \"/\" | \"[\" | \"]\" | \"?\" | \"=\"\n *               | \"{\" | \"}\" | SP | HT\n * quoted-string = ( <\"> *(qdtext | quoted-pair ) <\"> )\n * qdtext        = <any TEXT except <\">>\n * quoted-pair   = \"\\\" CHAR\n * CHAR          = <any US-ASCII character (octets 0 - 127)>\n * TEXT          = <any OCTET except CTLs, but including LWS>\n * LWS           = [CRLF] 1*( SP | HT )\n * CRLF          = CR LF\n * CR            = <US-ASCII CR, carriage return (13)>\n * LF            = <US-ASCII LF, linefeed (10)>\n * SP            = <US-ASCII SP, space (32)>\n * HT            = <US-ASCII HT, horizontal-tab (9)>\n * CTL           = <any US-ASCII control character (octets 0 - 31) and DEL (127)>\n * OCTET         = <any 8-bit sequence of data>\n * @private\n */\n\nvar PARAM_REGEXP = /;[\\x09\\x20]*([!#$%&'*+.0-9A-Z^_`a-z|~-]+)[\\x09\\x20]*=[\\x09\\x20]*(\"(?:[\\x20!\\x23-\\x5b\\x5d-\\x7e\\x80-\\xff]|\\\\[\\x20-\\x7e])*\"|[!#$%&'*+.0-9A-Z^_`a-z|~-]+)[\\x09\\x20]*/g // eslint-disable-line no-control-regex\nvar TEXT_REGEXP = /^[\\x20-\\x7e\\x80-\\xff]+$/\nvar TOKEN_REGEXP = /^[!#$%&'*+.0-9A-Z^_`a-z|~-]+$/\n\n/**\n * RegExp for various RFC 5987 grammar\n *\n * ext-value     = charset  \"'\" [ language ] \"'\" value-chars\n * charset       = \"UTF-8\" / \"ISO-8859-1\" / mime-charset\n * mime-charset  = 1*mime-charsetc\n * mime-charsetc = ALPHA / DIGIT\n *               / \"!\" / \"#\" / \"$\" / \"%\" / \"&\"\n *               / \"+\" / \"-\" / \"^\" / \"_\" / \"`\"\n *               / \"{\" / \"}\" / \"~\"\n * language      = ( 2*3ALPHA [ extlang ] )\n *               / 4ALPHA\n *               / 5*8ALPHA\n * extlang       = *3( \"-\" 3ALPHA )\n * value-chars   = *( pct-encoded / attr-char )\n * pct-encoded   = \"%\" HEXDIG HEXDIG\n * attr-char     = ALPHA / DIGIT\n *               / \"!\" / \"#\" / \"$\" / \"&\" / \"+\" / \"-\" / \".\"\n *               / \"^\" / \"_\" / \"`\" / \"|\" / \"~\"\n * @private\n */\n\nvar EXT_VALUE_REGEXP = /^([A-Za-z0-9!#$%&+\\-^_`{}~]+)'(?:[A-Za-z]{2,3}(?:-[A-Za-z]{3}){0,3}|[A-Za-z]{4,8}|)'((?:%[0-9A-Fa-f]{2}|[A-Za-z0-9!#$&+.^_`|~-])+)$/\n\n/**\n * RegExp for various RFC 6266 grammar\n *\n * disposition-type = \"inline\" | \"attachment\" | disp-ext-type\n * disp-ext-type    = token\n * disposition-parm = filename-parm | disp-ext-parm\n * filename-parm    = \"filename\" \"=\" value\n *                  | \"filename*\" \"=\" ext-value\n * disp-ext-parm    = token \"=\" value\n *                  | ext-token \"=\" ext-value\n * ext-token        = <the characters in token, followed by \"*\">\n * @private\n */\n\nvar DISPOSITION_TYPE_REGEXP = /^([!#$%&'*+.0-9A-Z^_`a-z|~-]+)[\\x09\\x20]*(?:$|;)/ // eslint-disable-line no-control-regex\n\n/**\n * Create an attachment Content-Disposition header.\n *\n * @param {string} [filename]\n * @param {object} [options]\n * @param {string} [options.type=attachment]\n * @param {string|boolean} [options.fallback=true]\n * @return {string}\n * @public\n */\n\nfunction contentDisposition (filename, options) {\n  var opts = options || {}\n\n  // get type\n  var type = opts.type || 'attachment'\n\n  // get parameters\n  var params = createparams(filename, opts.fallback)\n\n  // format into string\n  return format(new ContentDisposition(type, params))\n}\n\n/**\n * Create parameters object from filename and fallback.\n *\n * @param {string} [filename]\n * @param {string|boolean} [fallback=true]\n * @return {object}\n * @private\n */\n\nfunction createparams (filename, fallback) {\n  if (filename === undefined) {\n    return\n  }\n\n  var params = {}\n\n  if (typeof filename !== 'string') {\n    throw new TypeError('filename must be a string')\n  }\n\n  // fallback defaults to true\n  if (fallback === undefined) {\n    fallback = true\n  }\n\n  if (typeof fallback !== 'string' && typeof fallback !== 'boolean') {\n    throw new TypeError('fallback must be a string or boolean')\n  }\n\n  if (typeof fallback === 'string' && NON_LATIN1_REGEXP.test(fallback)) {\n    throw new TypeError('fallback must be ISO-8859-1 string')\n  }\n\n  // restrict to file base name\n  var name = basename(filename)\n\n  // determine if name is suitable for quoted string\n  var isQuotedString = TEXT_REGEXP.test(name)\n\n  // generate fallback name\n  var fallbackName = typeof fallback !== 'string'\n    ? fallback && getlatin1(name)\n    : basename(fallback)\n  var hasFallback = typeof fallbackName === 'string' && fallbackName !== name\n\n  // set extended filename parameter\n  if (hasFallback || !isQuotedString || HEX_ESCAPE_REGEXP.test(name)) {\n    params['filename*'] = name\n  }\n\n  // set filename parameter\n  if (isQuotedString || hasFallback) {\n    params.filename = hasFallback\n      ? fallbackName\n      : name\n  }\n\n  return params\n}\n\n/**\n * Format object to Content-Disposition header.\n *\n * @param {object} obj\n * @param {string} obj.type\n * @param {object} [obj.parameters]\n * @return {string}\n * @private\n */\n\nfunction format (obj) {\n  var parameters = obj.parameters\n  var type = obj.type\n\n  if (!type || typeof type !== 'string' || !TOKEN_REGEXP.test(type)) {\n    throw new TypeError('invalid type')\n  }\n\n  // start with normalized type\n  var string = String(type).toLowerCase()\n\n  // append parameters\n  if (parameters && typeof parameters === 'object') {\n    var param\n    var params = Object.keys(parameters).sort()\n\n    for (var i = 0; i < params.length; i++) {\n      param = params[i]\n\n      var val = param.substr(-1) === '*'\n        ? ustring(parameters[param])\n        : qstring(parameters[param])\n\n      string += '; ' + param + '=' + val\n    }\n  }\n\n  return string\n}\n\n/**\n * Decode a RFC 6987 field value (gracefully).\n *\n * @param {string} str\n * @return {string}\n * @private\n */\n\nfunction decodefield (str) {\n  var match = EXT_VALUE_REGEXP.exec(str)\n\n  if (!match) {\n    throw new TypeError('invalid extended field value')\n  }\n\n  var charset = match[1].toLowerCase()\n  var encoded = match[2]\n  var value\n\n  // to binary string\n  var binary = encoded.replace(HEX_ESCAPE_REPLACE_REGEXP, pdecode)\n\n  switch (charset) {\n    case 'iso-8859-1':\n      value = getlatin1(binary)\n      break\n    case 'utf-8':\n      value = Buffer.from(binary, 'binary').toString('utf8')\n      break\n    default:\n      throw new TypeError('unsupported charset in extended field')\n  }\n\n  return value\n}\n\n/**\n * Get ISO-8859-1 version of string.\n *\n * @param {string} val\n * @return {string}\n * @private\n */\n\nfunction getlatin1 (val) {\n  // simple Unicode -> ISO-8859-1 transformation\n  return String(val).replace(NON_LATIN1_REGEXP, '?')\n}\n\n/**\n * Parse Content-Disposition header string.\n *\n * @param {string} string\n * @return {object}\n * @public\n */\n\nfunction parse (string) {\n  if (!string || typeof string !== 'string') {\n    throw new TypeError('argument string is required')\n  }\n\n  var match = DISPOSITION_TYPE_REGEXP.exec(string)\n\n  if (!match) {\n    throw new TypeError('invalid type format')\n  }\n\n  // normalize type\n  var index = match[0].length\n  var type = match[1].toLowerCase()\n\n  var key\n  var names = []\n  var params = {}\n  var value\n\n  // calculate index to start at\n  index = PARAM_REGEXP.lastIndex = match[0].substr(-1) === ';'\n    ? index - 1\n    : index\n\n  // match parameters\n  while ((match = PARAM_REGEXP.exec(string))) {\n    if (match.index !== index) {\n      throw new TypeError('invalid parameter format')\n    }\n\n    index += match[0].length\n    key = match[1].toLowerCase()\n    value = match[2]\n\n    if (names.indexOf(key) !== -1) {\n      throw new TypeError('invalid duplicate parameter')\n    }\n\n    names.push(key)\n\n    if (key.indexOf('*') + 1 === key.length) {\n      // decode extended value\n      key = key.slice(0, -1)\n      value = decodefield(value)\n\n      // overwrite existing value\n      params[key] = value\n      continue\n    }\n\n    if (typeof params[key] === 'string') {\n      continue\n    }\n\n    if (value[0] === '\"') {\n      // remove quotes and escapes\n      value = value\n        .substr(1, value.length - 2)\n        .replace(QESC_REGEXP, '$1')\n    }\n\n    params[key] = value\n  }\n\n  if (index !== -1 && index !== string.length) {\n    throw new TypeError('invalid parameter format')\n  }\n\n  return new ContentDisposition(type, params)\n}\n\n/**\n * Percent decode a single character.\n *\n * @param {string} str\n * @param {string} hex\n * @return {string}\n * @private\n */\n\nfunction pdecode (str, hex) {\n  return String.fromCharCode(parseInt(hex, 16))\n}\n\n/**\n * Percent encode a single character.\n *\n * @param {string} char\n * @return {string}\n * @private\n */\n\nfunction pencode (char) {\n  return '%' + String(char)\n    .charCodeAt(0)\n    .toString(16)\n    .toUpperCase()\n}\n\n/**\n * Quote a string for HTTP.\n *\n * @param {string} val\n * @return {string}\n * @private\n */\n\nfunction qstring (val) {\n  var str = String(val)\n\n  return '\"' + str.replace(QUOTE_REGEXP, '\\\\$1') + '\"'\n}\n\n/**\n * Encode a Unicode string for HTTP (RFC 5987).\n *\n * @param {string} val\n * @return {string}\n * @private\n */\n\nfunction ustring (val) {\n  var str = String(val)\n\n  // percent encode as UTF-8\n  var encoded = encodeURIComponent(str)\n    .replace(ENCODE_URL_ATTR_CHAR_REGEXP, pencode)\n\n  return 'UTF-8\\'\\'' + encoded\n}\n\n/**\n * Class for parsed Content-Disposition header for v8 optimization\n *\n * @public\n * @param {string} type\n * @param {object} parameters\n * @constructor\n */\n\nfunction ContentDisposition (type, parameters) {\n  this.type = type\n  this.parameters = parameters\n}\n\n};"],
"names":["shadow$provide","global","require","module","exports","pdecode","str","hex","String","fromCharCode","parseInt","pencode","char","charCodeAt","toString","toUpperCase","ContentDisposition","type","parameters","contentDisposition","filename","options","opts","fallback","undefined","params","TypeError","NON_LATIN1_REGEXP","test","name","basename","isQuotedString","TEXT_REGEXP","fallbackName","replace","hasFallback","HEX_ESCAPE_REGEXP","obj","TOKEN_REGEXP","string","toLowerCase","i","Object","keys","sort","length","param","val","substr","encodeURIComponent","encoded","ENCODE_URL_ATTR_CHAR_REGEXP","QUOTE_REGEXP","parse","match","DISPOSITION_TYPE_REGEXP","exec","index","names","PARAM_REGEXP","lastIndex","key","value","indexOf","push","slice","EXT_VALUE_REGEXP","charset","binary","HEX_ESCAPE_REPLACE_REGEXP","Buffer","from","QESC_REGEXP"]
}
