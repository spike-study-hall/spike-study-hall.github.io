{
"version":3,
"file":"module$node_modules$path_to_regexp$index.js",
"lineCount":4,
"mappings":"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",
"sources":["node_modules/path-to-regexp/index.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$path_to_regexp$index\"] = function(global,require,module,exports) {\n/**\n * Expose `pathtoRegexp`.\n */\n\nmodule.exports = pathtoRegexp;\n\n/**\n * Match matching groups in a regular expression.\n */\nvar MATCHING_GROUP_REGEXP = /\\((?!\\?)/g;\n\n/**\n * Normalize the given path string,\n * returning a regular expression.\n *\n * An empty array should be passed,\n * which will contain the placeholder\n * key names. For example \"/user/:id\" will\n * then contain [\"id\"].\n *\n * @param  {String|RegExp|Array} path\n * @param  {Array} keys\n * @param  {Object} options\n * @return {RegExp}\n * @api private\n */\n\nfunction pathtoRegexp(path, keys, options) {\n  options = options || {};\n  keys = keys || [];\n  var strict = options.strict;\n  var end = options.end !== false;\n  var flags = options.sensitive ? '' : 'i';\n  var extraOffset = 0;\n  var keysOffset = keys.length;\n  var i = 0;\n  var name = 0;\n  var m;\n\n  if (path instanceof RegExp) {\n    while (m = MATCHING_GROUP_REGEXP.exec(path.source)) {\n      keys.push({\n        name: name++,\n        optional: false,\n        offset: m.index\n      });\n    }\n\n    return path;\n  }\n\n  if (Array.isArray(path)) {\n    // Map array parts into regexps and return their source. We also pass\n    // the same keys and options instance into every generation to get\n    // consistent matching groups before we join the sources together.\n    path = path.map(function (value) {\n      return pathtoRegexp(value, keys, options).source;\n    });\n\n    return new RegExp('(?:' + path.join('|') + ')', flags);\n  }\n\n  path = ('^' + path + (strict ? '' : path[path.length - 1] === '/' ? '?' : '/?'))\n    .replace(/\\/\\(/g, '/(?:')\n    .replace(/([\\/\\.])/g, '\\\\$1')\n    .replace(/(\\\\\\/)?(\\\\\\.)?:(\\w+)(\\(.*?\\))?(\\*)?(\\?)?/g, function (match, slash, format, key, capture, star, optional, offset) {\n      slash = slash || '';\n      format = format || '';\n      capture = capture || '([^\\\\/' + format + ']+?)';\n      optional = optional || '';\n\n      keys.push({\n        name: key,\n        optional: !!optional,\n        offset: offset + extraOffset\n      });\n\n      var result = ''\n        + (optional ? '' : slash)\n        + '(?:'\n        + format + (optional ? slash : '') + capture\n        + (star ? '((?:[\\\\/' + format + '].+?)?)' : '')\n        + ')'\n        + optional;\n\n      extraOffset += result.length - match.length;\n\n      return result;\n    })\n    .replace(/\\*/g, function (star, index) {\n      var len = keys.length\n\n      while (len-- > keysOffset && keys[len].offset > index) {\n        keys[len].offset += 3; // Replacement length minus asterisk length.\n      }\n\n      return '(.*)';\n    });\n\n  // This is a workaround for handling unnamed matching groups.\n  while (m = MATCHING_GROUP_REGEXP.exec(path)) {\n    var escapeCount = 0;\n    var index = m.index;\n\n    while (path.charAt(--index) === '\\\\') {\n      escapeCount++;\n    }\n\n    // It's possible to escape the bracket.\n    if (escapeCount % 2 === 1) {\n      continue;\n    }\n\n    if (keysOffset + i === keys.length || keys[keysOffset + i].offset > m.index) {\n      keys.splice(keysOffset + i, 0, {\n        name: name++, // Unnamed matching groups must be consistently linear.\n        optional: false,\n        offset: m.index\n      });\n    }\n\n    i++;\n  }\n\n  // If the path is non-ending, match until the end or a slash.\n  path += (end ? '$' : (path[path.length - 1] === '/' ? '' : '(?=\\\\/|$)'));\n\n  return new RegExp(path, flags);\n};\n\n};"],
"names":["shadow$provide","global","require","module","exports","pathtoRegexp","path","keys","options","strict","end","flags","sensitive","extraOffset","keysOffset","length","i","name","RegExp","m","MATCHING_GROUP_REGEXP","exec","source","push","optional","offset","index","Array","isArray","map","value","join","replace","match","slash","format","key","capture","star","result","len","escapeCount","charAt","splice"]
}
