shadow$provide.module$node_modules$body_parser$lib$types$json=function(global,require,module,exports){function normalizeJsonSyntaxError(error,obj){for(var keys=Object.getOwnPropertyNames(error),i=0;i<keys.length;i++){var key=keys[i];"stack"!==key&&"message"!==key&&delete error[key]}error.stack=obj.stack.replace(error.message,obj.message);error.message=obj.message;return error}function typeChecker(type){return function(req){return!!typeis(req,type)}}var bytes=require("module$node_modules$bytes$index"),
contentType=require("module$node_modules$content_type$index"),createError=require("module$node_modules$http_errors$index"),debug=require("module$node_modules$debug$src$browser")("body-parser:json"),read=require("module$node_modules$body_parser$lib$read"),typeis=require("module$node_modules$type_is$index");module.exports=function(options){function parse(body){if(0===body.length)return{};if(strict){var first=FIRST_CHAR_REGEXP.exec(body)[1];if("{"!==first&&"["!==first){debug("strict violation");var index=
body.indexOf(first);body=body.substring(0,index)+"#";try{throw JSON.parse(body),new SyntaxError("strict violation");}catch(e){first=normalizeJsonSyntaxError(e,{message:e.message.replace("#",first),stack:e.stack})}throw first;}}try{return debug("parse json"),JSON.parse(body,reviver)}catch(e){throw normalizeJsonSyntaxError(e,{message:e.message,stack:e.stack});}}options=options||{};var limit="number"!==typeof options.limit?bytes.parse(options.limit||"100kb"):options.limit,inflate=!1!==options.inflate,
reviver=options.reviver,strict=!1!==options.strict,type=options.type||"application/json",verify=options.verify||!1;if(!1!==verify&&"function"!==typeof verify)throw new TypeError("option verify must be function");var shouldParse="function"!==typeof type?typeChecker(type):type;return function(req,res,next){if(req._body)debug("body already parsed"),next();else if(req.body=req.body||{},typeis.hasBody(req))if(debug("content-type %j",req.headers["content-type"]),shouldParse(req)){try{var JSCompiler_inline_result=
(contentType.parse(req).parameters.charset||"").toLowerCase()}catch(e){JSCompiler_inline_result=void 0}JSCompiler_inline_result=JSCompiler_inline_result||"utf-8";"utf-"!==JSCompiler_inline_result.substr(0,4)?(debug("invalid charset"),next(createError(415,'unsupported charset "'+JSCompiler_inline_result.toUpperCase()+'"',{charset:JSCompiler_inline_result,type:"charset.unsupported"}))):read(req,res,next,parse,debug,{encoding:JSCompiler_inline_result,inflate:inflate,limit:limit,verify:verify})}else debug("skip parsing"),
next();else debug("skip empty body"),next()}};var FIRST_CHAR_REGEXP=/^[\x20\x09\x0a\x0d]*(.)/}
//# sourceMappingURL=module$node_modules$body_parser$lib$types$json.js.map
