{
"version":3,
"file":"module$node_modules$mime$mime.js",
"lineCount":3,
"mappings":"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",
"sources":["node_modules/mime/mime.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$mime$mime\"] = function(global,require,module,exports) {\nvar process = require('process');\nvar path = require('path');\nvar fs = require('fs');\n\nfunction Mime() {\n  // Map of extension -> mime type\n  this.types = Object.create(null);\n\n  // Map of mime type -> extension\n  this.extensions = Object.create(null);\n}\n\n/**\n * Define mimetype -> extension mappings.  Each key is a mime-type that maps\n * to an array of extensions associated with the type.  The first extension is\n * used as the default extension for the type.\n *\n * e.g. mime.define({'audio/ogg', ['oga', 'ogg', 'spx']});\n *\n * @param map (Object) type definitions\n */\nMime.prototype.define = function (map) {\n  for (var type in map) {\n    var exts = map[type];\n    for (var i = 0; i < exts.length; i++) {\n      if (process.env.DEBUG_MIME && this.types[exts[i]]) {\n        console.warn((this._loading || \"define()\").replace(/.*\\//, ''), 'changes \"' + exts[i] + '\" extension type from ' +\n          this.types[exts[i]] + ' to ' + type);\n      }\n\n      this.types[exts[i]] = type;\n    }\n\n    // Default extension is the first one we encounter\n    if (!this.extensions[type]) {\n      this.extensions[type] = exts[0];\n    }\n  }\n};\n\n/**\n * Load an Apache2-style \".types\" file\n *\n * This may be called multiple times (it's expected).  Where files declare\n * overlapping types/extensions, the last file wins.\n *\n * @param file (String) path of file to load.\n */\nMime.prototype.load = function(file) {\n  this._loading = file;\n  // Read file and split into lines\n  var map = {},\n      content = fs.readFileSync(file, 'ascii'),\n      lines = content.split(/[\\r\\n]+/);\n\n  lines.forEach(function(line) {\n    // Clean up whitespace/comments, and split into fields\n    var fields = line.replace(/\\s*#.*|^\\s*|\\s*$/g, '').split(/\\s+/);\n    map[fields.shift()] = fields;\n  });\n\n  this.define(map);\n\n  this._loading = null;\n};\n\n/**\n * Lookup a mime type based on extension\n */\nMime.prototype.lookup = function(path, fallback) {\n  var ext = path.replace(/^.*[\\.\\/\\\\]/, '').toLowerCase();\n\n  return this.types[ext] || fallback || this.default_type;\n};\n\n/**\n * Return file extension associated with a mime type\n */\nMime.prototype.extension = function(mimeType) {\n  var type = mimeType.match(/^\\s*([^;\\s]*)(?:;|\\s|$)/)[1].toLowerCase();\n  return this.extensions[type];\n};\n\n// Default instance\nvar mime = new Mime();\n\n// Define built-in types\nmime.define(require('./types.json'));\n\n// Default type\nmime.default_type = mime.lookup('bin');\n\n//\n// Additional API specific to the default instance\n//\n\nmime.Mime = Mime;\n\n/**\n * Lookup a charset based on mime type.\n */\nmime.charsets = {\n  lookup: function(mimeType, fallback) {\n    // Assume text types are utf8\n    return (/^text\\/|^application\\/(javascript|json)/).test(mimeType) ? 'UTF-8' : fallback;\n  }\n};\n\nmodule.exports = mime;\n\n};"],
"names":["shadow$provide","global","require","module","exports","Mime","types","Object","create","extensions","process","fs","prototype","define","Mime.prototype.define","map","type","exts","i","length","env","DEBUG_MIME","console","warn","replace","_loading","load","Mime.prototype.load","file","readFileSync","content","split","lines","forEach","line","fields","shift","lookup","Mime.prototype.lookup","path","fallback","ext","toLowerCase","default_type","extension","Mime.prototype.extension","mimeType","match","mime","charsets","test"]
}
