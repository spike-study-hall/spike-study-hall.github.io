{
"version":3,
"file":"module$node_modules$elliptic$lib$elliptic$eddsa$signature.js",
"lineCount":3,
"mappings":"AAAAA,cAAA,0DAAA,CAA8E,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CAiBtHC,QAASA,UAAS,CAACC,KAAD,CAAQC,GAAR,CAAa,CAC7B,IAAAD,MAAA,CAAaA,KAEM,SAAnB,GAAI,MAAOC,IAAX,GACEA,GADF,CACQC,UAAA,CAAWD,GAAX,CADR,CAGIE,MAAAC,QAAA,CAAcH,GAAd,CAAJ,GACEA,GADF,CACQ,CACJI,EAAGJ,GAAAK,MAAA,CAAU,CAAV,CAAaN,KAAAO,eAAb,CADC,CAEJC,EAAGP,GAAAK,MAAA,CAAUN,KAAAO,eAAV,CAFC,CADR,CAOAE,OAAA,CAAOR,GAAAI,EAAP,EAAgBJ,GAAAO,EAAhB,CAAuB,0BAAvB,CAEIR,MAAAU,QAAA,CAAcT,GAAAI,EAAd,CAAJ,GACE,IAAAM,GADF,CACYV,GAAAI,EADZ,CAEIJ,IAAAO,EAAJ,WAAqBI,GAArB,GACE,IAAAC,GADF,CACYZ,GAAAO,EADZ,CAGA,KAAAM,UAAA,CAAiBX,KAAAC,QAAA,CAAcH,GAAAI,EAAd,CAAA,CAAuBJ,GAAAI,EAAvB,CAA+BJ,GAAAc,SAChD,KAAAC,UAAA,CAAiBb,KAAAC,QAAA,CAAcH,GAAAO,EAAd,CAAA;AAAuBP,GAAAO,EAAvB,CAA+BP,GAAAgB,SArBnB,CAd/B,IAAIL,GAAKhB,OAAA,CAAQ,sCAAR,CAAT,CACIsB,MAAQtB,OAAA,CAAQ,iDAAR,CADZ,CAEIa,OAASS,KAAAT,OACTU,OAAAA,CAAiBD,KAAAC,eACrB,KAAIjB,WAAagB,KAAAhB,WAkCjBiB,OAAA,CAAepB,SAAf,CAA0B,GAA1B,CAA+BS,QAAU,EAAG,CAC1C,MAAO,KAAAR,MAAAoB,UAAA,CAAqB,IAAAH,SAAA,EAArB,CADmC,CAA5C,CAIAE,OAAA,CAAepB,SAAf,CAA0B,GAA1B,CAA+BM,QAAU,EAAG,CAC1C,MAAO,KAAAL,MAAAqB,YAAA,CAAuB,IAAAN,SAAA,EAAvB,CADmC,CAA5C,CAIAI,OAAA,CAAepB,SAAf,CAA0B,UAA1B,CAAsCgB,QAAiB,EAAG,CACxD,MAAO,KAAAf,MAAAsB,YAAA,CAAuB,IAAAjB,EAAA,EAAvB,CADiD,CAA1D,CAIAc,OAAA,CAAepB,SAAf,CAA0B,UAA1B,CAAsCkB,QAAiB,EAAG,CACxD,MAAO,KAAAjB,MAAAuB,UAAA,CAAqB,IAAAf,EAAA,EAArB,CADiD,CAA1D,CAIAT;SAAAyB,UAAAC,QAAA,CAA8BC,QAAgB,EAAG,CAC/C,MAAO,KAAAX,SAAA,EAAAY,OAAA,CAAuB,IAAAV,SAAA,EAAvB,CADwC,CAIjDlB,UAAAyB,UAAAI,MAAA,CAA4BC,QAAc,EAAG,CAC3C,MAAOX,MAAAY,OAAA,CAAa,IAAAL,QAAA,EAAb,CAA6B,KAA7B,CAAAM,YAAA,EADoC,CAI7ClC,OAAAC,QAAA,CAAiBC,SAjEqG;",
"sources":["node_modules/elliptic/lib/elliptic/eddsa/signature.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$elliptic$lib$elliptic$eddsa$signature\"] = function(global,require,module,exports) {\n'use strict';\n\nvar BN = require('bn.js');\nvar utils = require('../utils');\nvar assert = utils.assert;\nvar cachedProperty = utils.cachedProperty;\nvar parseBytes = utils.parseBytes;\n\n/**\n* @param {EDDSA} eddsa - eddsa instance\n* @param {Array<Bytes>|Object} sig -\n* @param {Array<Bytes>|Point} [sig.R] - R point as Point or bytes\n* @param {Array<Bytes>|bn} [sig.S] - S scalar as bn or bytes\n* @param {Array<Bytes>} [sig.Rencoded] - R point encoded\n* @param {Array<Bytes>} [sig.Sencoded] - S scalar encoded\n*/\nfunction Signature(eddsa, sig) {\n  this.eddsa = eddsa;\n\n  if (typeof sig !== 'object')\n    sig = parseBytes(sig);\n\n  if (Array.isArray(sig)) {\n    sig = {\n      R: sig.slice(0, eddsa.encodingLength),\n      S: sig.slice(eddsa.encodingLength)\n    };\n  }\n\n  assert(sig.R && sig.S, 'Signature without R or S');\n\n  if (eddsa.isPoint(sig.R))\n    this._R = sig.R;\n  if (sig.S instanceof BN)\n    this._S = sig.S;\n\n  this._Rencoded = Array.isArray(sig.R) ? sig.R : sig.Rencoded;\n  this._Sencoded = Array.isArray(sig.S) ? sig.S : sig.Sencoded;\n}\n\ncachedProperty(Signature, 'S', function S() {\n  return this.eddsa.decodeInt(this.Sencoded());\n});\n\ncachedProperty(Signature, 'R', function R() {\n  return this.eddsa.decodePoint(this.Rencoded());\n});\n\ncachedProperty(Signature, 'Rencoded', function Rencoded() {\n  return this.eddsa.encodePoint(this.R());\n});\n\ncachedProperty(Signature, 'Sencoded', function Sencoded() {\n  return this.eddsa.encodeInt(this.S());\n});\n\nSignature.prototype.toBytes = function toBytes() {\n  return this.Rencoded().concat(this.Sencoded());\n};\n\nSignature.prototype.toHex = function toHex() {\n  return utils.encode(this.toBytes(), 'hex').toUpperCase();\n};\n\nmodule.exports = Signature;\n\n};"],
"names":["shadow$provide","global","require","module","exports","Signature","eddsa","sig","parseBytes","Array","isArray","R","slice","encodingLength","S","assert","isPoint","_R","BN","_S","_Rencoded","Rencoded","_Sencoded","Sencoded","utils","cachedProperty","decodeInt","decodePoint","encodePoint","encodeInt","prototype","toBytes","Signature.prototype.toBytes","concat","toHex","Signature.prototype.toHex","encode","toUpperCase"]
}
