shadow$provide.module$node_modules$ee_first$index=function(global,require,module,exports){function listener(event,done){return function(arg1){for(var args=Array(arguments.length),err="error"===event?arg1:null,i=0;i<args.length;i++)args[i]=arguments[i];done(err,this,event,args)}}module.exports=function(stuff,done){function callback(){cleanup();done.apply(null,arguments)}function cleanup(){for(var x,i=0;i<cleanups.length;i++)x=cleanups[i],x.ee.removeListener(x.event,x.fn)}function thunk(fn){done=fn}
if(!Array.isArray(stuff))throw new TypeError("arg must be an array of [ee, events...] arrays");for(var cleanups=[],i$jscomp$0=0;i$jscomp$0<stuff.length;i$jscomp$0++){var arr=stuff[i$jscomp$0];if(!Array.isArray(arr)||2>arr.length)throw new TypeError("each array member must be [ee, events...]");for(var ee=arr[0],j=1;j<arr.length;j++){var event=arr[j],fn$jscomp$0=listener(event,callback);ee.on(event,fn$jscomp$0);cleanups.push({ee:ee,event:event,fn:fn$jscomp$0})}}thunk.cancel=cleanup;return thunk}}
//# sourceMappingURL=module$node_modules$ee_first$index.js.map
