{
"version":3,
"file":"module$node_modules$ws$lib$WebSocketServer.js",
"lineCount":12,
"mappings":"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",
"sources":["node_modules/ws/lib/WebSocketServer.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$ws$lib$WebSocketServer\"] = function(global,require,module,exports) {\n/*!\n * ws: a node.js websocket client\n * Copyright(c) 2011 Einar Otto Stangvik <einaros@gmail.com>\n * MIT Licensed\n */\n\n'use strict';\n\nconst safeBuffer = require('safe-buffer');\nconst EventEmitter = require('events');\nconst crypto = require('crypto');\nconst Ultron = require('ultron');\nconst http = require('http');\nconst url = require('url');\n\nconst PerMessageDeflate = require('./PerMessageDeflate');\nconst Extensions = require('./Extensions');\nconst constants = require('./Constants');\nconst WebSocket = require('./WebSocket');\n\nconst Buffer = safeBuffer.Buffer;\n\n/**\n * Class representing a WebSocket server.\n *\n * @extends EventEmitter\n */\nclass WebSocketServer extends EventEmitter {\n  /**\n   * Create a `WebSocketServer` instance.\n   *\n   * @param {Object} options Configuration options\n   * @param {String} options.host The hostname where to bind the server\n   * @param {Number} options.port The port where to bind the server\n   * @param {http.Server} options.server A pre-created HTTP/S server to use\n   * @param {Function} options.verifyClient An hook to reject connections\n   * @param {Function} options.handleProtocols An hook to handle protocols\n   * @param {String} options.path Accept only connections matching this path\n   * @param {Boolean} options.noServer Enable no server mode\n   * @param {Boolean} options.clientTracking Specifies whether or not to track clients\n   * @param {(Boolean|Object)} options.perMessageDeflate Enable/disable permessage-deflate\n   * @param {Number} options.maxPayload The maximum allowed message size\n   * @param {Function} callback A listener for the `listening` event\n   */\n  constructor (options, callback) {\n    super();\n\n    options = Object.assign({\n      maxPayload: 100 * 1024 * 1024,\n      perMessageDeflate: false,\n      handleProtocols: null,\n      clientTracking: true,\n      verifyClient: null,\n      noServer: false,\n      backlog: null, // use default (511 as implemented in net.js)\n      server: null,\n      host: null,\n      path: null,\n      port: null\n    }, options);\n\n    if (options.port == null && !options.server && !options.noServer) {\n      throw new TypeError('missing or invalid options');\n    }\n\n    if (options.port != null) {\n      this._server = http.createServer((req, res) => {\n        const body = http.STATUS_CODES[426];\n\n        res.writeHead(426, {\n          'Content-Length': body.length,\n          'Content-Type': 'text/plain'\n        });\n        res.end(body);\n      });\n      this._server.listen(options.port, options.host, options.backlog, callback);\n    } else if (options.server) {\n      this._server = options.server;\n    }\n\n    if (this._server) {\n      this._ultron = new Ultron(this._server);\n      this._ultron.on('listening', () => this.emit('listening'));\n      this._ultron.on('error', (err) => this.emit('error', err));\n      this._ultron.on('upgrade', (req, socket, head) => {\n        this.handleUpgrade(req, socket, head, (client) => {\n          this.emit('connection', client, req);\n        });\n      });\n    }\n\n    if (options.perMessageDeflate === true) options.perMessageDeflate = {};\n    if (options.clientTracking) this.clients = new Set();\n    this.options = options;\n  }\n\n  /**\n   * Close the server.\n   *\n   * @param {Function} cb Callback\n   * @public\n   */\n  close (cb) {\n    //\n    // Terminate all associated clients.\n    //\n    if (this.clients) {\n      for (const client of this.clients) client.terminate();\n    }\n\n    const server = this._server;\n\n    if (server) {\n      this._ultron.destroy();\n      this._ultron = this._server = null;\n\n      //\n      // Close the http server if it was internally created.\n      //\n      if (this.options.port != null) return server.close(cb);\n    }\n\n    if (cb) cb();\n  }\n\n  /**\n   * See if a given request should be handled by this server instance.\n   *\n   * @param {http.IncomingMessage} req Request object to inspect\n   * @return {Boolean} `true` if the request is valid, else `false`\n   * @public\n   */\n  shouldHandle (req) {\n    if (this.options.path && url.parse(req.url).pathname !== this.options.path) {\n      return false;\n    }\n\n    return true;\n  }\n\n  /**\n   * Handle a HTTP Upgrade request.\n   *\n   * @param {http.IncomingMessage} req The request object\n   * @param {net.Socket} socket The network socket between the server and client\n   * @param {Buffer} head The first packet of the upgraded stream\n   * @param {Function} cb Callback\n   * @public\n   */\n  handleUpgrade (req, socket, head, cb) {\n    socket.on('error', socketError);\n\n    const version = +req.headers['sec-websocket-version'];\n    const extensions = {};\n\n    if (\n      req.method !== 'GET' || req.headers.upgrade.toLowerCase() !== 'websocket' ||\n      !req.headers['sec-websocket-key'] || (version !== 8 && version !== 13) ||\n      !this.shouldHandle(req)\n    ) {\n      return abortConnection(socket, 400);\n    }\n\n    if (this.options.perMessageDeflate) {\n      const perMessageDeflate = new PerMessageDeflate(\n        this.options.perMessageDeflate,\n        true,\n        this.options.maxPayload\n      );\n\n      try {\n        const offers = Extensions.parse(\n          req.headers['sec-websocket-extensions']\n        );\n\n        if (offers[PerMessageDeflate.extensionName]) {\n          perMessageDeflate.accept(offers[PerMessageDeflate.extensionName]);\n          extensions[PerMessageDeflate.extensionName] = perMessageDeflate;\n        }\n      } catch (err) {\n        return abortConnection(socket, 400);\n      }\n    }\n\n    var protocol = (req.headers['sec-websocket-protocol'] || '').split(/, */);\n\n    //\n    // Optionally call external protocol selection handler.\n    //\n    if (this.options.handleProtocols) {\n      protocol = this.options.handleProtocols(protocol, req);\n      if (protocol === false) return abortConnection(socket, 401);\n    } else {\n      protocol = protocol[0];\n    }\n\n    //\n    // Optionally call external client verification handler.\n    //\n    if (this.options.verifyClient) {\n      const info = {\n        origin: req.headers[`${version === 8 ? 'sec-websocket-origin' : 'origin'}`],\n        secure: !!(req.connection.authorized || req.connection.encrypted),\n        req\n      };\n\n      if (this.options.verifyClient.length === 2) {\n        this.options.verifyClient(info, (verified, code, message) => {\n          if (!verified) return abortConnection(socket, code || 401, message);\n\n          this.completeUpgrade(\n            protocol,\n            extensions,\n            version,\n            req,\n            socket,\n            head,\n            cb\n          );\n        });\n        return;\n      }\n\n      if (!this.options.verifyClient(info)) return abortConnection(socket, 401);\n    }\n\n    this.completeUpgrade(protocol, extensions, version, req, socket, head, cb);\n  }\n\n  /**\n   * Upgrade the connection to WebSocket.\n   *\n   * @param {String} protocol The chosen subprotocol\n   * @param {Object} extensions The accepted extensions\n   * @param {Number} version The WebSocket protocol version\n   * @param {http.IncomingMessage} req The request object\n   * @param {net.Socket} socket The network socket between the server and client\n   * @param {Buffer} head The first packet of the upgraded stream\n   * @param {Function} cb Callback\n   * @private\n   */\n  completeUpgrade (protocol, extensions, version, req, socket, head, cb) {\n    //\n    // Destroy the socket if the client has already sent a FIN packet.\n    //\n    if (!socket.readable || !socket.writable) return socket.destroy();\n\n    const key = crypto.createHash('sha1')\n      .update(req.headers['sec-websocket-key'] + constants.GUID, 'binary')\n      .digest('base64');\n\n    const headers = [\n      'HTTP/1.1 101 Switching Protocols',\n      'Upgrade: websocket',\n      'Connection: Upgrade',\n      `Sec-WebSocket-Accept: ${key}`\n    ];\n\n    if (protocol) headers.push(`Sec-WebSocket-Protocol: ${protocol}`);\n    if (extensions[PerMessageDeflate.extensionName]) {\n      const params = extensions[PerMessageDeflate.extensionName].params;\n      const value = Extensions.format({\n        [PerMessageDeflate.extensionName]: [params]\n      });\n      headers.push(`Sec-WebSocket-Extensions: ${value}`);\n    }\n\n    //\n    // Allow external modification/inspection of handshake headers.\n    //\n    this.emit('headers', headers, req);\n\n    socket.write(headers.concat('\\r\\n').join('\\r\\n'));\n\n    const client = new WebSocket([socket, head], null, {\n      maxPayload: this.options.maxPayload,\n      protocolVersion: version,\n      extensions,\n      protocol\n    });\n\n    if (this.clients) {\n      this.clients.add(client);\n      client.on('close', () => this.clients.delete(client));\n    }\n\n    socket.removeListener('error', socketError);\n    cb(client);\n  }\n}\n\nmodule.exports = WebSocketServer;\n\n/**\n * Handle premature socket errors.\n *\n * @private\n */\nfunction socketError () {\n  this.destroy();\n}\n\n/**\n * Close the connection when preconditions are not fulfilled.\n *\n * @param {net.Socket} socket The socket of the upgrade request\n * @param {Number} code The HTTP response status code\n * @param {String} [message] The HTTP response body\n * @private\n */\nfunction abortConnection (socket, code, message) {\n  if (socket.writable) {\n    message = message || http.STATUS_CODES[code];\n    socket.write(\n      `HTTP/1.1 ${code} ${http.STATUS_CODES[code]}\\r\\n` +\n      'Connection: close\\r\\n' +\n      'Content-type: text/html\\r\\n' +\n      `Content-Length: ${Buffer.byteLength(message)}\\r\\n` +\n      '\\r\\n' +\n      message\n    );\n  }\n\n  socket.removeListener('error', socketError);\n  socket.destroy();\n}\n\n};"],
"names":["shadow$provide","global","require","module","exports","socketError","destroy","abortConnection","socket","code","message","writable","http","STATUS_CODES","write","Buffer","byteLength","removeListener","safeBuffer","EventEmitter","crypto","Ultron","url","PerMessageDeflate","Extensions","constants","WebSocket","WebSocketServer","constructor","options","callback","Object","assign","maxPayload","perMessageDeflate","handleProtocols","clientTracking","verifyClient","noServer","backlog","server","host","path","port","TypeError","_server","createServer","req","res","body","writeHead","length","end","listen","_ultron","on","emit","err","head","handleUpgrade","client","clients","Set","close","cb","terminate","shouldHandle","parse","pathname","version","headers","extensions","method","upgrade","toLowerCase","offers","extensionName","accept","protocol","split","info","origin","secure","authorized","connection","encrypted","verified","completeUpgrade","readable","createHash","update","GUID","digest","key","push","value","format","params","concat","join","protocolVersion","add","delete"]
}
