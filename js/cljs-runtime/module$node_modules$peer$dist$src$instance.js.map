{
"version":3,
"file":"module$node_modules$peer$dist$src$instance.js",
"lineCount":5,
"mappings":"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",
"sources":["node_modules/peer/dist/src/instance.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$peer$dist$src$instance\"] = function(global,require,module,exports) {\n\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst path_1 = __importDefault(require(\"path\"));\nconst realm_1 = require(\"./models/realm\");\nconst checkBrokenConnections_1 = require(\"./services/checkBrokenConnections\");\nconst messagesExpire_1 = require(\"./services/messagesExpire\");\nconst webSocketServer_1 = require(\"./services/webSocketServer\");\nconst messageHandler_1 = require(\"./messageHandler\");\nconst api_1 = require(\"./api\");\nexports.createInstance = ({ app, server, options }) => {\n    const config = options;\n    const realm = new realm_1.Realm();\n    const messageHandler = new messageHandler_1.MessageHandler(realm);\n    const api = api_1.Api({ config, realm, messageHandler });\n    const messagesExpire = new messagesExpire_1.MessagesExpire({ realm, config, messageHandler });\n    const checkBrokenConnections = new checkBrokenConnections_1.CheckBrokenConnections({\n        realm,\n        config,\n        onClose: client => {\n            app.emit(\"disconnect\", client);\n        }\n    });\n    app.use(options.path, api);\n    //use mountpath for WS server\n    const customConfig = Object.assign(Object.assign({}, config), { path: path_1.default.posix.join(app.path(), options.path, '/') });\n    const wss = new webSocketServer_1.WebSocketServer({\n        server,\n        realm,\n        config: customConfig\n    });\n    wss.on(\"connection\", (client) => {\n        const messageQueue = realm.getMessageQueueById(client.getId());\n        if (messageQueue) {\n            let message;\n            while (message = messageQueue.readMessage()) {\n                messageHandler.handle(client, message);\n            }\n            realm.clearMessageQueue(client.getId());\n        }\n        app.emit(\"connection\", client);\n    });\n    wss.on(\"message\", (client, message) => {\n        app.emit(\"message\", client, message);\n        messageHandler.handle(client, message);\n    });\n    wss.on(\"close\", (client) => {\n        app.emit(\"disconnect\", client);\n    });\n    wss.on(\"error\", (error) => {\n        app.emit(\"error\", error);\n    });\n    messagesExpire.startMessagesExpiration();\n    checkBrokenConnections.start();\n};\n\n};"],
"names":["shadow$provide","global","require","module","exports","__importDefault","mod","__esModule","Object","defineProperty","value","path_1","realm_1","checkBrokenConnections_1","messagesExpire_1","webSocketServer_1","messageHandler_1","api_1","createInstance","exports.createInstance","app","server","options","realm","Realm","messageHandler","MessageHandler","api","Api","config","messagesExpire","MessagesExpire","checkBrokenConnections","CheckBrokenConnections","onClose","client","emit","use","path","customConfig","assign","default","posix","join","wss","WebSocketServer","on","messageQueue","getMessageQueueById","getId","message","readMessage","handle","clearMessageQueue","error","startMessagesExpiration","start"]
}
