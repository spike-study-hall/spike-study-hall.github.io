{
"version":3,
"file":"module$node_modules$randomfill$browser.js",
"lineCount":5,
"mappings":"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",
"sources":["node_modules/randomfill/browser.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$randomfill$browser\"] = function(global,require,module,exports) {\nvar process = require('process');\n'use strict'\n\nfunction oldBrowser () {\n  throw new Error('secure random number generation not supported by this browser\\nuse chrome, FireFox or Internet Explorer 11')\n}\nvar safeBuffer = require('safe-buffer')\nvar randombytes = require('randombytes')\nvar Buffer = safeBuffer.Buffer\nvar kBufferMaxLength = safeBuffer.kMaxLength\nvar crypto = global.crypto || global.msCrypto\nvar kMaxUint32 = Math.pow(2, 32) - 1\nfunction assertOffset (offset, length) {\n  if (typeof offset !== 'number' || offset !== offset) { // eslint-disable-line no-self-compare\n    throw new TypeError('offset must be a number')\n  }\n\n  if (offset > kMaxUint32 || offset < 0) {\n    throw new TypeError('offset must be a uint32')\n  }\n\n  if (offset > kBufferMaxLength || offset > length) {\n    throw new RangeError('offset out of range')\n  }\n}\n\nfunction assertSize (size, offset, length) {\n  if (typeof size !== 'number' || size !== size) { // eslint-disable-line no-self-compare\n    throw new TypeError('size must be a number')\n  }\n\n  if (size > kMaxUint32 || size < 0) {\n    throw new TypeError('size must be a uint32')\n  }\n\n  if (size + offset > length || size > kBufferMaxLength) {\n    throw new RangeError('buffer too small')\n  }\n}\nif ((crypto && crypto.getRandomValues) || !process.browser) {\n  exports.randomFill = randomFill\n  exports.randomFillSync = randomFillSync\n} else {\n  exports.randomFill = oldBrowser\n  exports.randomFillSync = oldBrowser\n}\nfunction randomFill (buf, offset, size, cb) {\n  if (!Buffer.isBuffer(buf) && !(buf instanceof global.Uint8Array)) {\n    throw new TypeError('\"buf\" argument must be a Buffer or Uint8Array')\n  }\n\n  if (typeof offset === 'function') {\n    cb = offset\n    offset = 0\n    size = buf.length\n  } else if (typeof size === 'function') {\n    cb = size\n    size = buf.length - offset\n  } else if (typeof cb !== 'function') {\n    throw new TypeError('\"cb\" argument must be a function')\n  }\n  assertOffset(offset, buf.length)\n  assertSize(size, offset, buf.length)\n  return actualFill(buf, offset, size, cb)\n}\n\nfunction actualFill (buf, offset, size, cb) {\n  if (process.browser) {\n    var ourBuf = buf.buffer\n    var uint = new Uint8Array(ourBuf, offset, size)\n    crypto.getRandomValues(uint)\n    if (cb) {\n      process.nextTick(function () {\n        cb(null, buf)\n      })\n      return\n    }\n    return buf\n  }\n  if (cb) {\n    randombytes(size, function (err, bytes) {\n      if (err) {\n        return cb(err)\n      }\n      bytes.copy(buf, offset)\n      cb(null, buf)\n    })\n    return\n  }\n  var bytes = randombytes(size)\n  bytes.copy(buf, offset)\n  return buf\n}\nfunction randomFillSync (buf, offset, size) {\n  if (typeof offset === 'undefined') {\n    offset = 0\n  }\n  if (!Buffer.isBuffer(buf) && !(buf instanceof global.Uint8Array)) {\n    throw new TypeError('\"buf\" argument must be a Buffer or Uint8Array')\n  }\n\n  assertOffset(offset, buf.length)\n\n  if (size === undefined) size = buf.length - offset\n\n  assertSize(size, offset, buf.length)\n\n  return actualFill(buf, offset, size)\n}\n\n};"],
"names":["shadow$provide","global","require","module","exports","oldBrowser","Error","assertOffset","offset","length","TypeError","kMaxUint32","kBufferMaxLength","RangeError","assertSize","size","randomFill","buf","cb","Buffer","isBuffer","Uint8Array","actualFill","process","browser","uint","buffer","crypto","getRandomValues","nextTick","randombytes","err","bytes","copy","randomFillSync","undefined","safeBuffer","kMaxLength","msCrypto","Math","pow"]
}
