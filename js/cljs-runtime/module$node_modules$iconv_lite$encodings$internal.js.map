{
"version":3,
"file":"module$node_modules$iconv_lite$encodings$internal.js",
"lineCount":7,
"mappings":"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",
"sources":["node_modules/iconv-lite/encodings/internal.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$iconv_lite$encodings$internal\"] = function(global,require,module,exports) {\n\"use strict\";\nvar Buffer = require(\"safer-buffer\").Buffer;\n\n// Export Node.js internal encodings.\n\nmodule.exports = {\n    // Encodings\n    utf8:   { type: \"_internal\", bomAware: true},\n    cesu8:  { type: \"_internal\", bomAware: true},\n    unicode11utf8: \"utf8\",\n\n    ucs2:   { type: \"_internal\", bomAware: true},\n    utf16le: \"ucs2\",\n\n    binary: { type: \"_internal\" },\n    base64: { type: \"_internal\" },\n    hex:    { type: \"_internal\" },\n\n    // Codec.\n    _internal: InternalCodec,\n};\n\n//------------------------------------------------------------------------------\n\nfunction InternalCodec(codecOptions, iconv) {\n    this.enc = codecOptions.encodingName;\n    this.bomAware = codecOptions.bomAware;\n\n    if (this.enc === \"base64\")\n        this.encoder = InternalEncoderBase64;\n    else if (this.enc === \"cesu8\") {\n        this.enc = \"utf8\"; // Use utf8 for decoding.\n        this.encoder = InternalEncoderCesu8;\n\n        // Add decoder for versions of Node not supporting CESU-8\n        if (Buffer.from('eda0bdedb2a9', 'hex').toString() !== '\ud83d\udca9') {\n            this.decoder = InternalDecoderCesu8;\n            this.defaultCharUnicode = iconv.defaultCharUnicode;\n        }\n    }\n}\n\nInternalCodec.prototype.encoder = InternalEncoder;\nInternalCodec.prototype.decoder = InternalDecoder;\n\n//------------------------------------------------------------------------------\n\n// We use node.js internal decoder. Its signature is the same as ours.\nvar StringDecoder = require('string_decoder').StringDecoder;\n\nif (!StringDecoder.prototype.end) // Node v0.8 doesn't have this method.\n    StringDecoder.prototype.end = function() {};\n\n\nfunction InternalDecoder(options, codec) {\n    StringDecoder.call(this, codec.enc);\n}\n\nInternalDecoder.prototype = StringDecoder.prototype;\n\n\n//------------------------------------------------------------------------------\n// Encoder is mostly trivial\n\nfunction InternalEncoder(options, codec) {\n    this.enc = codec.enc;\n}\n\nInternalEncoder.prototype.write = function(str) {\n    return Buffer.from(str, this.enc);\n}\n\nInternalEncoder.prototype.end = function() {\n}\n\n\n//------------------------------------------------------------------------------\n// Except base64 encoder, which must keep its state.\n\nfunction InternalEncoderBase64(options, codec) {\n    this.prevStr = '';\n}\n\nInternalEncoderBase64.prototype.write = function(str) {\n    str = this.prevStr + str;\n    var completeQuads = str.length - (str.length % 4);\n    this.prevStr = str.slice(completeQuads);\n    str = str.slice(0, completeQuads);\n\n    return Buffer.from(str, \"base64\");\n}\n\nInternalEncoderBase64.prototype.end = function() {\n    return Buffer.from(this.prevStr, \"base64\");\n}\n\n\n//------------------------------------------------------------------------------\n// CESU-8 encoder is also special.\n\nfunction InternalEncoderCesu8(options, codec) {\n}\n\nInternalEncoderCesu8.prototype.write = function(str) {\n    var buf = Buffer.alloc(str.length * 3), bufIdx = 0;\n    for (var i = 0; i < str.length; i++) {\n        var charCode = str.charCodeAt(i);\n        // Naive implementation, but it works because CESU-8 is especially easy\n        // to convert from UTF-16 (which all JS strings are encoded in).\n        if (charCode < 0x80)\n            buf[bufIdx++] = charCode;\n        else if (charCode < 0x800) {\n            buf[bufIdx++] = 0xC0 + (charCode >>> 6);\n            buf[bufIdx++] = 0x80 + (charCode & 0x3f);\n        }\n        else { // charCode will always be < 0x10000 in javascript.\n            buf[bufIdx++] = 0xE0 + (charCode >>> 12);\n            buf[bufIdx++] = 0x80 + ((charCode >>> 6) & 0x3f);\n            buf[bufIdx++] = 0x80 + (charCode & 0x3f);\n        }\n    }\n    return buf.slice(0, bufIdx);\n}\n\nInternalEncoderCesu8.prototype.end = function() {\n}\n\n//------------------------------------------------------------------------------\n// CESU-8 decoder is not implemented in Node v4.0+\n\nfunction InternalDecoderCesu8(options, codec) {\n    this.acc = 0;\n    this.contBytes = 0;\n    this.accBytes = 0;\n    this.defaultCharUnicode = codec.defaultCharUnicode;\n}\n\nInternalDecoderCesu8.prototype.write = function(buf) {\n    var acc = this.acc, contBytes = this.contBytes, accBytes = this.accBytes, \n        res = '';\n    for (var i = 0; i < buf.length; i++) {\n        var curByte = buf[i];\n        if ((curByte & 0xC0) !== 0x80) { // Leading byte\n            if (contBytes > 0) { // Previous code is invalid\n                res += this.defaultCharUnicode;\n                contBytes = 0;\n            }\n\n            if (curByte < 0x80) { // Single-byte code\n                res += String.fromCharCode(curByte);\n            } else if (curByte < 0xE0) { // Two-byte code\n                acc = curByte & 0x1F;\n                contBytes = 1; accBytes = 1;\n            } else if (curByte < 0xF0) { // Three-byte code\n                acc = curByte & 0x0F;\n                contBytes = 2; accBytes = 1;\n            } else { // Four or more are not supported for CESU-8.\n                res += this.defaultCharUnicode;\n            }\n        } else { // Continuation byte\n            if (contBytes > 0) { // We're waiting for it.\n                acc = (acc << 6) | (curByte & 0x3f);\n                contBytes--; accBytes++;\n                if (contBytes === 0) {\n                    // Check for overlong encoding, but support Modified UTF-8 (encoding NULL as C0 80)\n                    if (accBytes === 2 && acc < 0x80 && acc > 0)\n                        res += this.defaultCharUnicode;\n                    else if (accBytes === 3 && acc < 0x800)\n                        res += this.defaultCharUnicode;\n                    else\n                        // Actually add character.\n                        res += String.fromCharCode(acc);\n                }\n            } else { // Unexpected continuation byte\n                res += this.defaultCharUnicode;\n            }\n        }\n    }\n    this.acc = acc; this.contBytes = contBytes; this.accBytes = accBytes;\n    return res;\n}\n\nInternalDecoderCesu8.prototype.end = function() {\n    var res = 0;\n    if (this.contBytes > 0)\n        res += this.defaultCharUnicode;\n    return res;\n}\n\n};"],
"names":["shadow$provide","global","require","module","exports","InternalCodec","codecOptions","iconv","enc","encodingName","bomAware","encoder","InternalEncoderBase64","InternalEncoderCesu8","Buffer","from","toString","decoder","InternalDecoderCesu8","defaultCharUnicode","InternalDecoder","options","codec","StringDecoder","call","InternalEncoder","prevStr","accBytes","contBytes","acc","utf8","type","cesu8","unicode11utf8","ucs2","utf16le","binary","base64","hex","_internal","prototype","end","StringDecoder.prototype.end","write","InternalEncoder.prototype.write","str","InternalEncoder.prototype.end","InternalEncoderBase64.prototype.write","completeQuads","length","slice","InternalEncoderBase64.prototype.end","InternalEncoderCesu8.prototype.write","buf","alloc","bufIdx","i","charCode","charCodeAt","InternalEncoderCesu8.prototype.end","InternalDecoderCesu8.prototype.write","res","curByte","String","fromCharCode","InternalDecoderCesu8.prototype.end"]
}
