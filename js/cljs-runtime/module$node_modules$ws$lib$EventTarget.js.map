{
"version":3,
"file":"module$node_modules$ws$lib$EventTarget.js",
"lineCount":4,
"mappings":"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",
"sources":["node_modules/ws/lib/EventTarget.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$ws$lib$EventTarget\"] = function(global,require,module,exports) {\n'use strict';\n\n/**\n * Class representing an event.\n *\n * @private\n */\nclass Event {\n  /**\n   * Create a new `Event`.\n   *\n   * @param {String} type The name of the event\n   * @param {Object} target A reference to the target to which the event was dispatched\n   */\n  constructor (type, target) {\n    this.target = target;\n    this.type = type;\n  }\n}\n\n/**\n * Class representing a message event.\n *\n * @extends Event\n * @private\n */\nclass MessageEvent extends Event {\n  /**\n   * Create a new `MessageEvent`.\n   *\n   * @param {(String|Buffer|ArrayBuffer|Buffer[])} data The received data\n   * @param {WebSocket} target A reference to the target to which the event was dispatched\n   */\n  constructor (data, target) {\n    super('message', target);\n\n    this.data = data;\n  }\n}\n\n/**\n * Class representing a close event.\n *\n * @extends Event\n * @private\n */\nclass CloseEvent extends Event {\n  /**\n   * Create a new `CloseEvent`.\n   *\n   * @param {Number} code The status code explaining why the connection is being closed\n   * @param {String} reason A human-readable string explaining why the connection is closing\n   * @param {WebSocket} target A reference to the target to which the event was dispatched\n   */\n  constructor (code, reason, target) {\n    super('close', target);\n\n    this.wasClean = target._closeFrameReceived && target._closeFrameSent;\n    this.reason = reason;\n    this.code = code;\n  }\n}\n\n/**\n * Class representing an open event.\n *\n * @extends Event\n * @private\n */\nclass OpenEvent extends Event {\n  /**\n   * Create a new `OpenEvent`.\n   *\n   * @param {WebSocket} target A reference to the target to which the event was dispatched\n   */\n  constructor (target) {\n    super('open', target);\n  }\n}\n\n/**\n * This provides methods for emulating the `EventTarget` interface. It's not\n * meant to be used directly.\n *\n * @mixin\n */\nconst EventTarget = {\n  /**\n   * Register an event listener.\n   *\n   * @param {String} method A string representing the event type to listen for\n   * @param {Function} listener The listener to add\n   * @public\n   */\n  addEventListener (method, listener) {\n    if (typeof listener !== 'function') return;\n\n    function onMessage (data) {\n      listener.call(this, new MessageEvent(data, this));\n    }\n\n    function onClose (code, message) {\n      listener.call(this, new CloseEvent(code, message, this));\n    }\n\n    function onError (event) {\n      event.type = 'error';\n      event.target = this;\n      listener.call(this, event);\n    }\n\n    function onOpen () {\n      listener.call(this, new OpenEvent(this));\n    }\n\n    if (method === 'message') {\n      onMessage._listener = listener;\n      this.on(method, onMessage);\n    } else if (method === 'close') {\n      onClose._listener = listener;\n      this.on(method, onClose);\n    } else if (method === 'error') {\n      onError._listener = listener;\n      this.on(method, onError);\n    } else if (method === 'open') {\n      onOpen._listener = listener;\n      this.on(method, onOpen);\n    } else {\n      this.on(method, listener);\n    }\n  },\n\n  /**\n   * Remove an event listener.\n   *\n   * @param {String} method A string representing the event type to remove\n   * @param {Function} listener The listener to remove\n   * @public\n   */\n  removeEventListener (method, listener) {\n    const listeners = this.listeners(method);\n\n    for (var i = 0; i < listeners.length; i++) {\n      if (listeners[i] === listener || listeners[i]._listener === listener) {\n        this.removeListener(method, listeners[i]);\n      }\n    }\n  }\n};\n\nmodule.exports = EventTarget;\n\n};"],
"names":["shadow$provide","global","require","module","exports","Event","constructor","type","target","MessageEvent","data","CloseEvent","code","reason","wasClean","_closeFrameReceived","_closeFrameSent","OpenEvent","EventTarget","addEventListener","method","listener","onMessage","call","onClose","message","onError","event","onOpen","_listener","on","removeEventListener","listeners","i","length","removeListener"]
}
