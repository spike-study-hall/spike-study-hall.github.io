{"version":3,"sources":["cats/monad/maybe.cljc"],"mappings":"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","names":["this__4385__auto__","k__4386__auto__","this__4387__auto__","k50240","else__4388__auto__","G__50247","cljs.core/Keyword","just","cljs.core.get.cljs$core$IFn$_invoke$arity$3","__extmap","this__4404__auto__","f__4405__auto__","init__4406__auto__","cljs.core.reduce.cljs$core$IFn$_invoke$arity$3","ret__4407__auto__","p__50255","vec__50256","k__4408__auto__","cljs.core.nth.cljs$core$IFn$_invoke$arity$3","v__4409__auto__","this__4399__auto__","writer__4400__auto__","opts__4401__auto__","pr-pair__4402__auto__","keyval__4403__auto__","cljs.core/pr-sequential-writer","cljs.core.concat.cljs$core$IFn$_invoke$arity$2","cljs.core/PersistentVector","G__50239","cljs.core/RecordIter","cljs.core/-iterator","cljs.core/nil-iter","cljs.core/PROTOCOL_SENTINEL","this__4383__auto__","__meta","this__4380__auto__","__hash","this__4389__auto__","cljs.core/count","this__4381__auto__","h__4243__auto__","fexpr__50271","coll__4382__auto__","cljs.core/hash-unordered-coll","this50241","other50242","cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2","this__4394__auto__","k__4395__auto__","cljs.core/contains?","cljs.core.dissoc.cljs$core$IFn$_invoke$arity$2","cljs.core/-with-meta","cljs.core.into.cljs$core$IFn$_invoke$arity$2","cljs.core/not-empty","this__4392__auto__","k__4393__auto__","pred__50272","cljs.core/keyword-identical?","expr__50273","G__50275","G__50276","cljs.core.assoc.cljs$core$IFn$_invoke$arity$3","this__4397__auto__","cljs.core/seq","cljs.core/MapEntry","this__4384__auto__","this__4390__auto__","entry__4391__auto__","cljs.core/vector?","cljs.core._nth.cljs$core$IFn$_invoke$arity$2","cljs.core/-conj","cats.monad.maybe/Just","this__4428__auto__","cljs.core/List","writer__4429__auto__","cljs.core/-write","G__50243","extmap__4424__auto__","G__50290","cljs.core/record?","cats.monad.maybe/->Just","cats.monad.maybe/map->Just","_","cats.monad.maybe/context","cljs.core.pr_str.cljs$core$IFn$_invoke$arity$variadic","k50292","G__50300","p__50305","vec__50306","G__50291","fexpr__50310","this50293","other50294","pred__50312","expr__50313","cats.monad.maybe/Nothing","G__50295","G__50337","cljs.core.dissoc.cljs$core$IFn$_invoke$arity$1","cats.monad.maybe/->Nothing","cats.monad.maybe/map->Nothing","cljs.core.alter_meta_BANG_.cljs$core$IFn$_invoke$arity$variadic","cljs.core/assoc","cats.util/make-printable","cats.monad.maybe/maybe?","v","or__4131__auto__","and__4120__auto__","cljs.core/native-satisfies?","cats.protocols/Contextual","cats.protocols/-get-context","js/Error","cats.monad.maybe/just","cats.monad.maybe/nothing","cats.monad.maybe/just?","cats.monad.maybe/nothing?","var_args","G__50372","cats.monad.maybe/from-maybe","mv","cats.protocols/-extract","default","js/cats","js/cats.monad","js/cats.monad.maybe","js/cats.monad.maybe.t_cats$monad$maybe50388","cats.monad.maybe/t_cats$monad$maybe50388","_50390","meta50389","this__4374__auto__","writer__4375__auto__","opt__4376__auto__","cats.monad.maybe/->t_cats$monad$maybe50388","ctx","mv'","cats.protocols/-mappend","f","G__50429","m","af","av","cats.protocols/-repr","G__50428","z","G__50418","G__50419","G__50422","G__50423","a","G__50406","cats.protocols/-fmap","cats.protocols/-pure","cats.context.infer.cljs$core$IFn$_invoke$arity$0","cljs.core/type","cats.monad.maybe/seq->maybe","coll","cljs.core/empty?","cljs.core/first","cats.monad.maybe/maybe->seq","cljs.core/LazySeq","cats.monad.maybe/+extract-just-xform+","cljs.core.comp.cljs$core$IFn$_invoke$arity$2","cljs.core.filter.cljs$core$IFn$_invoke$arity$1","cljs.core.map.cljs$core$IFn$_invoke$arity$1","cats.monad.maybe/cat-maybes","cljs.core.sequence.cljs$core$IFn$_invoke$arity$2","cats.monad.maybe/map-maybe","mf","cljs.core.map.cljs$core$IFn$_invoke$arity$2"],"sourcesContent":[";; Copyright (c) 2014-2016 Andrey Antukh <niwi@niwi.nz>\n;; Copyright (c) 2014-2016 Alejandro G\u00f3mez <alejandro@dialelo.com>\n;; All rights reserved.\n;;\n;; Redistribution and use in source and binary forms, with or without\n;; modification, are permitted provided that the following conditions\n;; are met:\n;;\n;; 1. Redistributions of source code must retain the above copyright\n;;    notice, this list of conditions and the following disclaimer.\n;; 2. Redistributions in binary form must reproduce the above copyright\n;;    notice, this list of conditions and the following disclaimer in the\n;;    documentation and/or other materials provided with the distribution.\n;;\n;; THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR\n;; IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n;; OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n;; IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,\n;; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n;; NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n;; DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\n;; THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n;; (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF\n;; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n\n(ns cats.monad.maybe\n  \"The Maybe monad implementation and helpers functions\n  for working with maybe related types.\n\n      (require '[cats.monad.maybe :as maybe])\n\n      (maybe/just 1)\n      ;; => #<Just [1]>\n  \"\n  #?(:cljs\n    (:require-macros [cats.monad.maybe :refer (maybe)]))\n  (:require [cats.protocols :as p]\n            [cats.context :as ctx]\n            [cats.util :as util]))\n\n;; --- Type constructors and functions\n\n(declare context)\n\n(defrecord Just [just]\n  p/Contextual\n  (-get-context [_] context)\n\n  p/Extract\n  (-extract [_] just)\n\n  p/Printable\n  (-repr [_]\n    (str \"#<Just \" (pr-str just) \">\"))\n\n  #?@(:cljs [cljs.core/IDeref\n             (-deref [_] just)]\n      :clj  [clojure.lang.IDeref\n             (deref [_] just)]))\n\n(defrecord Nothing []\n  p/Contextual\n  (-get-context [_] context)\n\n  p/Extract\n  (-extract [_] nil)\n\n  p/Printable\n  (-repr [_]\n    \"#<Nothing>\")\n\n  #?@(:cljs [cljs.core/IDeref\n             (-deref [_] nil)]\n      :clj  [clojure.lang.IDeref\n             (deref [_] nil)]))\n\n(alter-meta! #'->Nothing assoc :private true)\n(alter-meta! #'->Just assoc :private true)\n\n(util/make-printable Just)\n(util/make-printable Nothing)\n\n(defn maybe?\n  \"Return true in case of `v` is instance\n  of Maybe monad.\"\n  [v]\n  (or (instance? Just v)\n      (instance? Nothing v)\n      (and (satisfies? p/Contextual v)\n           (identical? (p/-get-context v) context))))\n\n(defn just\n  \"A Just type constructor.\"\n  [v]\n  {:pre [(some? v)]}\n  (Just. v))\n\n(defn nothing\n  \"A Nothing type constructor.\"\n  []\n  (assoc (Nothing.) :nothing nil))\n\n(defn just?\n  \"Returns true if `v` is an instance\n  of `Just` type.\"\n  [v]\n  (instance? Just v))\n\n(defn nothing?\n  \"Returns true if `v` is an instance\n  of `Nothing` type or is nil.\"\n  [v]\n  (or\n   (nil? v)\n   (instance? Nothing v)))\n\n(defn from-maybe\n  \"Return inner value from maybe monad.\n\n  This is a specialized version of `cats.core/extract`\n  for Maybe monad types that allows set up\n  the default value.\n\n  Let see some examples:\n\n      (from-maybe (just 1))\n      ;=> 1\n\n      (from-maybe (nothing))\n      ;=> nil\n\n      (from-maybe (nothing) 42)\n      ;=> 42\n  \"\n  ([mv]\n   {:pre [(maybe? mv)]}\n   (when (just? mv)\n     (p/-extract mv)))\n  ([mv default]\n   {:pre [(maybe? mv)]}\n   (if (just? mv)\n     (p/-extract mv)\n     default)))\n\n;; --- Monad definition\n\n(def ^{:no-doc true}\n  context\n  (reify\n    p/Context\n    p/Semigroup\n    (-mappend [ctx mv mv']\n      (cond\n        (nothing? mv) mv'\n        (nothing? mv') mv\n        :else (just (let [mv (p/-extract mv)\n                          mv' (p/-extract mv')]\n                      (p/-mappend (p/-get-context mv) mv mv')))))\n\n    p/Monoid\n    (-mempty [_]\n      (nothing))\n\n    p/Functor\n    (-fmap [_ f mv]\n      (if (nothing? mv)\n        mv\n        (just (f (p/-extract mv)))))\n\n    p/Applicative\n    (-pure [_ v]\n      (just v))\n    (-fapply [m af av]\n      (if (nothing? af)\n        af\n        (p/-fmap m (p/-extract af) av)))\n\n    p/Monad\n    (-mreturn [_ v]\n      (if (nil? v)\n        (nothing)\n        (just v)))\n    (-mbind [_ mv f]\n      (assert (maybe? mv) (str \"Context mismatch: \" (p/-repr mv)\n                               \" is not allowed to use with maybe context.\"))\n      (if (nothing? mv)\n        mv\n        (f (p/-extract mv))))\n\n    p/MonadZero\n    (-mzero [_]\n      (nothing))\n\n    p/MonadPlus\n    (-mplus [_ mv mv']\n      (if (just? mv)\n        mv\n        mv'))\n\n    p/Foldable\n    (-foldl [_ f z mv]\n      (if (just? mv)\n        (f z (p/-extract mv))\n        z))\n\n    (-foldr [_ f z mv]\n      (if (just? mv)\n        (f (p/-extract mv) z)\n        z))\n\n    p/Traversable\n    (-traverse [_ f mv]\n      (if (just? mv)\n        (let [a (f (p/-extract mv))]\n          (p/-fmap (p/-get-context a) just a))\n        (p/-pure (ctx/infer) mv)))\n\n    p/Printable\n    (-repr [_]\n      \"#<Maybe>\")))\n\n(util/make-printable (type context))\n\n;; --- Utility functions\n\n#?(:clj\n   (defmacro maybe\n     \"Given a default value, a maybe and a function, return the default if the\n     maybe is a nothing; if its a just, apply the function to the value it\n     contains and return the result.\"\n     [default m f]\n     `(do\n        (assert (maybe? ~m) (str \"'\" ~m \"' is not a Maybe monad\"))\n        (if (nothing? ~m)\n          ~default\n          (~f (p/-extract ~m))))))\n\n(defn seq->maybe\n  \"Given a collection, return a nothing if its empty or a just with its\n  first element if its not.\"\n  [coll]\n  (if (empty? coll)\n    (nothing)\n    (just (first coll))))\n\n(defn maybe->seq\n  \"Given a maybe, return an empty seq if its nothing or a one-element seq\n  with its value if its not.\"\n  [m]\n  {:pre [(maybe? m)]}\n  (if (nothing? m)\n    (lazy-seq [])\n    (lazy-seq [(p/-extract m)])))\n\n(def ^{:private true :no-doc true}\n  +extract-just-xform+\n  (comp\n   (filter just?)\n   (map p/-extract)))\n\n(defn cat-maybes\n  \"Given a collection of maybes, return a sequence of the values\n  that the just's contain.\"\n  [coll]\n  (sequence +extract-just-xform+ coll))\n\n(defn map-maybe\n  \"Given a maybe-returning function and a collection, map the function over\n  the collection returning the values contained in the just values of the\n  resulting collection.\"\n  [mf coll]\n  (cat-maybes (map mf coll)))\n"]}