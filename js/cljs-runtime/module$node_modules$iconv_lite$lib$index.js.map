{
"version":3,
"file":"module$node_modules$iconv_lite$lib$index.js",
"lineCount":6,
"mappings":"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",
"sources":["node_modules/iconv-lite/lib/index.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$iconv_lite$lib$index\"] = function(global,require,module,exports) {\nvar process = require('process');\n\"use strict\";\n\n// Some environments don't have global Buffer (e.g. React Native).\n// Solution would be installing npm modules \"buffer\" and \"stream\" explicitly.\nvar Buffer = require(\"safer-buffer\").Buffer;\n\nvar bomHandling = require(\"./bom-handling\"),\n    iconv = module.exports;\n\n// All codecs and aliases are kept here, keyed by encoding name/alias.\n// They are lazy loaded in `iconv.getCodec` from `encodings/index.js`.\niconv.encodings = null;\n\n// Characters emitted in case of error.\niconv.defaultCharUnicode = '\ufffd';\niconv.defaultCharSingleByte = '?';\n\n// Public API.\niconv.encode = function encode(str, encoding, options) {\n    str = \"\" + (str || \"\"); // Ensure string.\n\n    var encoder = iconv.getEncoder(encoding, options);\n\n    var res = encoder.write(str);\n    var trail = encoder.end();\n    \n    return (trail && trail.length > 0) ? Buffer.concat([res, trail]) : res;\n}\n\niconv.decode = function decode(buf, encoding, options) {\n    if (typeof buf === 'string') {\n        if (!iconv.skipDecodeWarning) {\n            console.error('Iconv-lite warning: decode()-ing strings is deprecated. Refer to https://github.com/ashtuchkin/iconv-lite/wiki/Use-Buffers-when-decoding');\n            iconv.skipDecodeWarning = true;\n        }\n\n        buf = Buffer.from(\"\" + (buf || \"\"), \"binary\"); // Ensure buffer.\n    }\n\n    var decoder = iconv.getDecoder(encoding, options);\n\n    var res = decoder.write(buf);\n    var trail = decoder.end();\n\n    return trail ? (res + trail) : res;\n}\n\niconv.encodingExists = function encodingExists(enc) {\n    try {\n        iconv.getCodec(enc);\n        return true;\n    } catch (e) {\n        return false;\n    }\n}\n\n// Legacy aliases to convert functions\niconv.toEncoding = iconv.encode;\niconv.fromEncoding = iconv.decode;\n\n// Search for a codec in iconv.encodings. Cache codec data in iconv._codecDataCache.\niconv._codecDataCache = {};\niconv.getCodec = function getCodec(encoding) {\n    if (!iconv.encodings)\n        iconv.encodings = require(\"../encodings\"); // Lazy load all encoding definitions.\n    \n    // Canonicalize encoding name: strip all non-alphanumeric chars and appended year.\n    var enc = iconv._canonicalizeEncoding(encoding);\n\n    // Traverse iconv.encodings to find actual codec.\n    var codecOptions = {};\n    while (true) {\n        var codec = iconv._codecDataCache[enc];\n        if (codec)\n            return codec;\n\n        var codecDef = iconv.encodings[enc];\n\n        switch (typeof codecDef) {\n            case \"string\": // Direct alias to other encoding.\n                enc = codecDef;\n                break;\n\n            case \"object\": // Alias with options. Can be layered.\n                for (var key in codecDef)\n                    codecOptions[key] = codecDef[key];\n\n                if (!codecOptions.encodingName)\n                    codecOptions.encodingName = enc;\n                \n                enc = codecDef.type;\n                break;\n\n            case \"function\": // Codec itself.\n                if (!codecOptions.encodingName)\n                    codecOptions.encodingName = enc;\n\n                // The codec function must load all tables and return object with .encoder and .decoder methods.\n                // It'll be called only once (for each different options object).\n                codec = new codecDef(codecOptions, iconv);\n\n                iconv._codecDataCache[codecOptions.encodingName] = codec; // Save it to be reused later.\n                return codec;\n\n            default:\n                throw new Error(\"Encoding not recognized: '\" + encoding + \"' (searched as: '\"+enc+\"')\");\n        }\n    }\n}\n\niconv._canonicalizeEncoding = function(encoding) {\n    // Canonicalize encoding name: strip all non-alphanumeric chars and appended year.\n    return (''+encoding).toLowerCase().replace(/:\\d{4}$|[^0-9a-z]/g, \"\");\n}\n\niconv.getEncoder = function getEncoder(encoding, options) {\n    var codec = iconv.getCodec(encoding),\n        encoder = new codec.encoder(options, codec);\n\n    if (codec.bomAware && options && options.addBOM)\n        encoder = new bomHandling.PrependBOM(encoder, options);\n\n    return encoder;\n}\n\niconv.getDecoder = function getDecoder(encoding, options) {\n    var codec = iconv.getCodec(encoding),\n        decoder = new codec.decoder(options, codec);\n\n    if (codec.bomAware && !(options && options.stripBOM === false))\n        decoder = new bomHandling.StripBOM(decoder, options);\n\n    return decoder;\n}\n\n\n// Load extensions in Node. All of them are omitted in Browserify build via 'browser' field in package.json.\nvar nodeVer = typeof process !== 'undefined' && process.versions && process.versions.node;\nif (nodeVer) {\n\n    // Load streaming support in Node v0.10+\n    var nodeVerArr = nodeVer.split(\".\").map(Number);\n    if (nodeVerArr[0] > 0 || nodeVerArr[1] >= 10) {\n        require(\"./streams\")(iconv);\n    }\n\n    // Load Node primitive extensions.\n    require(\"./extend-node\")(iconv);\n}\n\nif (\"\u0100\" != \"\\u0100\") {\n    console.error(\"iconv-lite warning: javascript files use encoding different from utf-8. See https://github.com/ashtuchkin/iconv-lite/wiki/Javascript-source-file-encodings for more info.\");\n}\n\n};"],
"names":["shadow$provide","global","require","module","exports","process","Buffer","bomHandling","iconv","encodings","defaultCharUnicode","defaultCharSingleByte","encode","iconv.encode","str","encoding","options","encoder","getEncoder","res","write","trail","end","length","concat","decode","iconv.decode","buf","skipDecodeWarning","console","error","from","decoder","getDecoder","encodingExists","iconv.encodingExists","enc","getCodec","e","toEncoding","fromEncoding","_codecDataCache","iconv.getCodec","_canonicalizeEncoding","codecOptions","codec","codecDef","key","encodingName","type","Error","iconv._canonicalizeEncoding","toLowerCase","replace","iconv.getEncoder","bomAware","addBOM","PrependBOM","iconv.getDecoder","stripBOM","StripBOM","nodeVer","versions","node","nodeVerArr","split","map","Number"]
}
