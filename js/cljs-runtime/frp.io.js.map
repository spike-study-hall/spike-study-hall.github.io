{"version":3,"sources":["frp/io.cljc"],"mappings":";;;;;;;;AASA,AAAA,AAAAA,AAAA,AAAA,AAAgBC,AACbC,AAAGC,AAAEC;AADR,AAEOA,AACA,AAACC,AAAkB,AAAA,AAAYF,AAC/B,AAACG,AAAK,AAACC,AAAKL,AACAM;;AAEnB,AAAA,AAAAR,AAAA,AAAA,AAAgBS,AACbC,AAAEN;AADL,AAEE,AAACO,AAAmBD,AAAE,AAAA,AAAON,AAAKA;;AAEpC,AAAA,AAAMQ,AACHV;AADH,AAGE,AAAMW,AAAM,AAAA,AAACC;AAAb,AACE;;AAAOC;AAAP,AACE,AAAAC,AAAAC;AAAAC,AAAeH;AAAf,AAAA,AAAA,AAAAI,AACE,AAAA,AAAA,AAAAE,AAAaR;AADfO,AAAAF;AAAA,AAAA,AAAAF,AAAAA,AAAAG,AAAAC,AAAAJ,AAAAG,AAAAC;;AACsB,AAAA,AAAA,AAAAC,AAAUR;;AAGzB,AAAAU,AAAA;AAAAC;AAAA,AAAe,AAAA,AAAA,AAAA,AAAAA,AAACG,AAAOd,AAAkBE;;;AAFzCA,AACA,AAACO,AAAMpB,AACPuB;AAAA,AAAA,AAAAF,AAAAE,AAAAF,AAAAE,AAACC,AAAAA,AAAAA;;;;AALHX;;;;AAAAA;;AAAAA;;;AAAAA;AAAAA;;;;;;;;AAQX,AAAA,AAAAf,AAAA,AAAA,AAAgB4B,AACb1B,AAAGQ,AAAEN;AADR,AAEE,AAAAyB,AAAKzB,AAAAA,AACA,AAACK,AAAAA,AAAAA,AAAcC,AAAAA;AADpB,AAAA,AAAAmB,AAAAA,AAEK3B,AAAAA,AAAAA;;AAEP,AAAA,AAAM4B,AACHC,AAAU7B,AAAG8B;AADhB,AAEE,AAACC,AAAMC,AACA,AAAA,AAAA,AAACC,AAAQC,AACC,AAAA,AAASJ,AAAWD,AACrB,AAAAM,AAAC,AAAAC,AAAAC;AAAAC,AAAWR;AAAX,AAAA,AAAA,AAAAM,AAAAA,AAAAE,AAAAF,AAAAE,AACEC,AAAAA;AAAa,AAACxC,AAAAA,AAAAA,AAAkBC,AAAAA;;AAChC,AAAAwC,AAAsB,AAAC9B,AAAYV;AAAnC,AAAA,AAAAwC,AAAAA,AAACd,AAAAA,AAAAA;;;AAFJ,AAAA,AAAAS,AAAAA,AAAAA,AAGEL,AAAAA;;;AAEpB,AAAA,AAAMW,AACHzC,AAAG8B;AADN,AAEE,AAACF,AAAK,AAAAc,AAAA,AAAA,AAAMV,AACD,AAAAW,AAAA,AAAAxB;AAAAyB,AAAC,AAAA,AAASd;AAAV,AAAA,AAAAc,AAAAA,AAAAD,AAAAC,AAAAD;;AADL,AAAA,AAAAD,AAAAA,AAGKG,AAAAA,AAAAA;AACL7C,AACA8B","names":["aid.core.curry.cljs$core$IFn$_invoke$arity$2","frp.io/run-event-effect!","f!","e","net","frp.primitives.event/get-latests","cljs.core/run!","cljs.core.comp.cljs$core$IFn$_invoke$arity$2","frp.tuple/snd","frp.io/get-net-value","b","frp.primitives.behavior/get-value","frp.io/memoize-one","state","cljs.core.atom.cljs$core$IFn$_invoke$arity$1","more","pred__60024","cljs.core/=","expr__60025","G__60027","G__60028","cljs.core/deref","cljs.core.apply.cljs$core$IFn$_invoke$arity$2","G__60029","p1__60023#","G__60030","frp.primitives.event/effect","cljs.core/reset!","frp.io/run-behavior-effect!","G__60031","frp.io/run*","effect-id","x","cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$2","frp.primitives.net/universe-state","cljs.core.partial.cljs$core$IFn$_invoke$arity$3","com.rpl.specter/setval*","fexpr__60036","pred__60037","aid.core/call-pred","expr__60038","frp.primitives.event/event?","G__60040","frp.io/run","G__60041","G__60043","fexpr__60042","frp.primitives.net/get-id"],"sourcesContent":[";primitives.event and io namespaces are separated to limit the impact of :refer-clojure :exclude for transduce\n(ns frp.io\n  (:require [aid.core :as aid]\n            [com.rpl.specter :as s]\n            [frp.primitives.behavior :as behavior]\n            [frp.primitives.event :as event]\n            [frp.primitives.net :as net]\n            [frp.tuple :as tuple]))\n\n(aid/defcurried run-event-effect!\n  [f! e net]\n  (->> net\n       (event/get-latests (:entity-id e))\n       (run! (comp f!\n                   tuple/snd))))\n\n(aid/defcurried get-net-value\n  [b net]\n  (behavior/get-value b (:time net) net))\n\n(defn memoize-one\n  [f!]\n  ;TODO use core.memoize when core.memoize supports ClojureScript\n  (let [state (atom {})]\n    (fn [& more]\n      (aid/case-eval more\n        (:arguments @state) (:return @state)\n        (->> more\n             (apply f!)\n             (event/effect #(reset! state {:arguments more\n                                           :return    %})))))))\n\n(aid/defcurried run-behavior-effect!\n  [f! b net]\n  (->> net\n       (get-net-value b)\n       f!))\n\n(defn run*\n  [effect-id f! x]\n  (swap! net/universe-state\n         (partial s/setval*\n                  [(:net-id x) :effect effect-id]\n                  ((aid/casep x\n                     event/event? (run-event-effect! f!)\n                     (run-behavior-effect! (memoize-one f!)))\n                    x))))\n\n(defn run\n  [f! x]\n  (run* (->> @net/universe-state\n             ((:net-id x))\n             :effect\n             net/get-id)\n        f!\n        x))\n"]}