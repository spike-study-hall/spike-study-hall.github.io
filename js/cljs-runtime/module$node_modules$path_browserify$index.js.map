{
"version":3,
"file":"module$node_modules$path_browserify$index.js",
"lineCount":8,
"mappings":"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",
"sources":["node_modules/path-browserify/index.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$path_browserify$index\"] = function(global,require,module,exports) {\nvar process = require('process');\n// .dirname, .basename, and .extname methods are extracted from Node.js v8.11.1,\n// backported and transplited with Babel, with backwards-compat fixes\n\n// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n// resolves . and .. elements in a path array with directory names there\n// must be no slashes, empty elements, or device names (c:\\) in the array\n// (so also no leading and trailing slashes - it does not distinguish\n// relative and absolute paths)\nfunction normalizeArray(parts, allowAboveRoot) {\n  // if the path tries to go above the root, `up` ends up > 0\n  var up = 0;\n  for (var i = parts.length - 1; i >= 0; i--) {\n    var last = parts[i];\n    if (last === '.') {\n      parts.splice(i, 1);\n    } else if (last === '..') {\n      parts.splice(i, 1);\n      up++;\n    } else if (up) {\n      parts.splice(i, 1);\n      up--;\n    }\n  }\n\n  // if the path is allowed to go above the root, restore leading ..s\n  if (allowAboveRoot) {\n    for (; up--; up) {\n      parts.unshift('..');\n    }\n  }\n\n  return parts;\n}\n\n// path.resolve([from ...], to)\n// posix version\nexports.resolve = function() {\n  var resolvedPath = '',\n      resolvedAbsolute = false;\n\n  for (var i = arguments.length - 1; i >= -1 && !resolvedAbsolute; i--) {\n    var path = (i >= 0) ? arguments[i] : process.cwd();\n\n    // Skip empty and invalid entries\n    if (typeof path !== 'string') {\n      throw new TypeError('Arguments to path.resolve must be strings');\n    } else if (!path) {\n      continue;\n    }\n\n    resolvedPath = path + '/' + resolvedPath;\n    resolvedAbsolute = path.charAt(0) === '/';\n  }\n\n  // At this point the path should be resolved to a full absolute path, but\n  // handle relative paths to be safe (might happen when process.cwd() fails)\n\n  // Normalize the path\n  resolvedPath = normalizeArray(filter(resolvedPath.split('/'), function(p) {\n    return !!p;\n  }), !resolvedAbsolute).join('/');\n\n  return ((resolvedAbsolute ? '/' : '') + resolvedPath) || '.';\n};\n\n// path.normalize(path)\n// posix version\nexports.normalize = function(path) {\n  var isAbsolute = exports.isAbsolute(path),\n      trailingSlash = substr(path, -1) === '/';\n\n  // Normalize the path\n  path = normalizeArray(filter(path.split('/'), function(p) {\n    return !!p;\n  }), !isAbsolute).join('/');\n\n  if (!path && !isAbsolute) {\n    path = '.';\n  }\n  if (path && trailingSlash) {\n    path += '/';\n  }\n\n  return (isAbsolute ? '/' : '') + path;\n};\n\n// posix version\nexports.isAbsolute = function(path) {\n  return path.charAt(0) === '/';\n};\n\n// posix version\nexports.join = function() {\n  var paths = Array.prototype.slice.call(arguments, 0);\n  return exports.normalize(filter(paths, function(p, index) {\n    if (typeof p !== 'string') {\n      throw new TypeError('Arguments to path.join must be strings');\n    }\n    return p;\n  }).join('/'));\n};\n\n\n// path.relative(from, to)\n// posix version\nexports.relative = function(from, to) {\n  from = exports.resolve(from).substr(1);\n  to = exports.resolve(to).substr(1);\n\n  function trim(arr) {\n    var start = 0;\n    for (; start < arr.length; start++) {\n      if (arr[start] !== '') break;\n    }\n\n    var end = arr.length - 1;\n    for (; end >= 0; end--) {\n      if (arr[end] !== '') break;\n    }\n\n    if (start > end) return [];\n    return arr.slice(start, end - start + 1);\n  }\n\n  var fromParts = trim(from.split('/'));\n  var toParts = trim(to.split('/'));\n\n  var length = Math.min(fromParts.length, toParts.length);\n  var samePartsLength = length;\n  for (var i = 0; i < length; i++) {\n    if (fromParts[i] !== toParts[i]) {\n      samePartsLength = i;\n      break;\n    }\n  }\n\n  var outputParts = [];\n  for (var i = samePartsLength; i < fromParts.length; i++) {\n    outputParts.push('..');\n  }\n\n  outputParts = outputParts.concat(toParts.slice(samePartsLength));\n\n  return outputParts.join('/');\n};\n\nexports.sep = '/';\nexports.delimiter = ':';\n\nexports.dirname = function (path) {\n  if (typeof path !== 'string') path = path + '';\n  if (path.length === 0) return '.';\n  var code = path.charCodeAt(0);\n  var hasRoot = code === 47 /*/*/;\n  var end = -1;\n  var matchedSlash = true;\n  for (var i = path.length - 1; i >= 1; --i) {\n    code = path.charCodeAt(i);\n    if (code === 47 /*/*/) {\n        if (!matchedSlash) {\n          end = i;\n          break;\n        }\n      } else {\n      // We saw the first non-path separator\n      matchedSlash = false;\n    }\n  }\n\n  if (end === -1) return hasRoot ? '/' : '.';\n  if (hasRoot && end === 1) {\n    // return '//';\n    // Backwards-compat fix:\n    return '/';\n  }\n  return path.slice(0, end);\n};\n\nfunction basename(path) {\n  if (typeof path !== 'string') path = path + '';\n\n  var start = 0;\n  var end = -1;\n  var matchedSlash = true;\n  var i;\n\n  for (i = path.length - 1; i >= 0; --i) {\n    if (path.charCodeAt(i) === 47 /*/*/) {\n        // If we reached a path separator that was not part of a set of path\n        // separators at the end of the string, stop now\n        if (!matchedSlash) {\n          start = i + 1;\n          break;\n        }\n      } else if (end === -1) {\n      // We saw the first non-path separator, mark this as the end of our\n      // path component\n      matchedSlash = false;\n      end = i + 1;\n    }\n  }\n\n  if (end === -1) return '';\n  return path.slice(start, end);\n}\n\n// Uses a mixed approach for backwards-compatibility, as ext behavior changed\n// in new Node.js versions, so only basename() above is backported here\nexports.basename = function (path, ext) {\n  var f = basename(path);\n  if (ext && f.substr(-1 * ext.length) === ext) {\n    f = f.substr(0, f.length - ext.length);\n  }\n  return f;\n};\n\nexports.extname = function (path) {\n  if (typeof path !== 'string') path = path + '';\n  var startDot = -1;\n  var startPart = 0;\n  var end = -1;\n  var matchedSlash = true;\n  // Track the state of characters (if any) we see before our first dot and\n  // after any path separator we find\n  var preDotState = 0;\n  for (var i = path.length - 1; i >= 0; --i) {\n    var code = path.charCodeAt(i);\n    if (code === 47 /*/*/) {\n        // If we reached a path separator that was not part of a set of path\n        // separators at the end of the string, stop now\n        if (!matchedSlash) {\n          startPart = i + 1;\n          break;\n        }\n        continue;\n      }\n    if (end === -1) {\n      // We saw the first non-path separator, mark this as the end of our\n      // extension\n      matchedSlash = false;\n      end = i + 1;\n    }\n    if (code === 46 /*.*/) {\n        // If this is our first dot, mark it as the start of our extension\n        if (startDot === -1)\n          startDot = i;\n        else if (preDotState !== 1)\n          preDotState = 1;\n    } else if (startDot !== -1) {\n      // We saw a non-dot and non-path separator before our dot, so we should\n      // have a good chance at having a non-empty extension\n      preDotState = -1;\n    }\n  }\n\n  if (startDot === -1 || end === -1 ||\n      // We saw a non-dot character immediately before the dot\n      preDotState === 0 ||\n      // The (right-most) trimmed path component is exactly '..'\n      preDotState === 1 && startDot === end - 1 && startDot === startPart + 1) {\n    return '';\n  }\n  return path.slice(startDot, end);\n};\n\nfunction filter (xs, f) {\n    if (xs.filter) return xs.filter(f);\n    var res = [];\n    for (var i = 0; i < xs.length; i++) {\n        if (f(xs[i], i, xs)) res.push(xs[i]);\n    }\n    return res;\n}\n\n// String.prototype.substr - negative index don't work in IE8\nvar substr = 'ab'.substr(-1) === 'b'\n    ? function (str, start, len) { return str.substr(start, len) }\n    : function (str, start, len) {\n        if (start < 0) start = str.length + start;\n        return str.substr(start, len);\n    }\n;\n\n};"],
"names":["shadow$provide","global","require","module","exports","normalizeArray","parts","allowAboveRoot","up","i","length","last","splice","unshift","filter","xs","f","res","push","process","resolve","exports.resolve","resolvedPath","resolvedAbsolute","arguments","path","cwd","TypeError","charAt","split","p","join","normalize","exports.normalize","isAbsolute","trailingSlash","substr","exports.isAbsolute","exports.join","paths","Array","prototype","slice","call","index","relative","exports.relative","from","to","trim","arr","start","end","fromParts","toParts","Math","min","samePartsLength","outputParts","concat","sep","delimiter","dirname","exports.dirname","code","charCodeAt","hasRoot","matchedSlash","basename","exports.basename","ext","extname","exports.extname","startDot","startPart","preDotState","str","len"]
}
