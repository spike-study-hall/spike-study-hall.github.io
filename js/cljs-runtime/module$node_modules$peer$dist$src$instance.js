shadow$provide.module$node_modules$peer$dist$src$instance=function(global,require,module,exports){global=this&&this.__importDefault||function(mod){return mod&&mod.__esModule?mod:{"default":mod}};Object.defineProperty(exports,"__esModule",{value:!0});var path_1=global(require("module$node_modules$path_browserify$index")),realm_1=require("module$node_modules$peer$dist$src$models$realm"),checkBrokenConnections_1=require("module$node_modules$peer$dist$src$services$checkBrokenConnections$index"),messagesExpire_1=
require("module$node_modules$peer$dist$src$services$messagesExpire$index"),webSocketServer_1=require("module$node_modules$peer$dist$src$services$webSocketServer$index"),messageHandler_1=require("module$node_modules$peer$dist$src$messageHandler$index"),api_1=require("module$node_modules$peer$dist$src$api$index");exports.createInstance=function($jscomp$destructuring$var27){var app=$jscomp$destructuring$var27.app,server=$jscomp$destructuring$var27.server,options=$jscomp$destructuring$var27.options,realm=
new realm_1.Realm,messageHandler=new messageHandler_1.MessageHandler(realm),api=api_1.Api({config:options,realm:realm,messageHandler:messageHandler});$jscomp$destructuring$var27=new messagesExpire_1.MessagesExpire({realm:realm,config:options,messageHandler:messageHandler});var checkBrokenConnections=new checkBrokenConnections_1.CheckBrokenConnections({realm:realm,config:options,onClose:function(client){app.emit("disconnect",client)}});app.use(options.path,api);options=Object.assign(Object.assign({},
options),{path:path_1.default.posix.join(app.path(),options.path,"/")});server=new webSocketServer_1.WebSocketServer({server:server,realm:realm,config:options});server.on("connection",function(client){var messageQueue=realm.getMessageQueueById(client.getId());if(messageQueue){for(var message;message=messageQueue.readMessage();)messageHandler.handle(client,message);realm.clearMessageQueue(client.getId())}app.emit("connection",client)});server.on("message",function(client,message){app.emit("message",
client,message);messageHandler.handle(client,message)});server.on("close",function(client){app.emit("disconnect",client)});server.on("error",function(error){app.emit("error",error)});$jscomp$destructuring$var27.startMessagesExpiration();checkBrokenConnections.start()}}
//# sourceMappingURL=module$node_modules$peer$dist$src$instance.js.map
