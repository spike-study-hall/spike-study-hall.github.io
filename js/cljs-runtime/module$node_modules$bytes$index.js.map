{
"version":3,
"file":"module$node_modules$bytes$index.js",
"lineCount":3,
"mappings":"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",
"sources":["node_modules/bytes/index.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$bytes$index\"] = function(global,require,module,exports) {\n/*!\n * bytes\n * Copyright(c) 2012-2014 TJ Holowaychuk\n * Copyright(c) 2015 Jed Watson\n * MIT Licensed\n */\n\n'use strict';\n\n/**\n * Module exports.\n * @public\n */\n\nmodule.exports = bytes;\nmodule.exports.format = format;\nmodule.exports.parse = parse;\n\n/**\n * Module variables.\n * @private\n */\n\nvar formatThousandsRegExp = /\\B(?=(\\d{3})+(?!\\d))/g;\n\nvar formatDecimalsRegExp = /(?:\\.0*|(\\.[^0]+)0+)$/;\n\nvar map = {\n  b:  1,\n  kb: 1 << 10,\n  mb: 1 << 20,\n  gb: 1 << 30,\n  tb: Math.pow(1024, 4),\n  pb: Math.pow(1024, 5),\n};\n\nvar parseRegExp = /^((-|\\+)?(\\d+(?:\\.\\d+)?)) *(kb|mb|gb|tb|pb)$/i;\n\n/**\n * Convert the given value in bytes into a string or parse to string to an integer in bytes.\n *\n * @param {string|number} value\n * @param {{\n *  case: [string],\n *  decimalPlaces: [number]\n *  fixedDecimals: [boolean]\n *  thousandsSeparator: [string]\n *  unitSeparator: [string]\n *  }} [options] bytes options.\n *\n * @returns {string|number|null}\n */\n\nfunction bytes(value, options) {\n  if (typeof value === 'string') {\n    return parse(value);\n  }\n\n  if (typeof value === 'number') {\n    return format(value, options);\n  }\n\n  return null;\n}\n\n/**\n * Format the given value in bytes into a string.\n *\n * If the value is negative, it is kept as such. If it is a float,\n * it is rounded.\n *\n * @param {number} value\n * @param {object} [options]\n * @param {number} [options.decimalPlaces=2]\n * @param {number} [options.fixedDecimals=false]\n * @param {string} [options.thousandsSeparator=]\n * @param {string} [options.unit=]\n * @param {string} [options.unitSeparator=]\n *\n * @returns {string|null}\n * @public\n */\n\nfunction format(value, options) {\n  if (!Number.isFinite(value)) {\n    return null;\n  }\n\n  var mag = Math.abs(value);\n  var thousandsSeparator = (options && options.thousandsSeparator) || '';\n  var unitSeparator = (options && options.unitSeparator) || '';\n  var decimalPlaces = (options && options.decimalPlaces !== undefined) ? options.decimalPlaces : 2;\n  var fixedDecimals = Boolean(options && options.fixedDecimals);\n  var unit = (options && options.unit) || '';\n\n  if (!unit || !map[unit.toLowerCase()]) {\n    if (mag >= map.pb) {\n      unit = 'PB';\n    } else if (mag >= map.tb) {\n      unit = 'TB';\n    } else if (mag >= map.gb) {\n      unit = 'GB';\n    } else if (mag >= map.mb) {\n      unit = 'MB';\n    } else if (mag >= map.kb) {\n      unit = 'KB';\n    } else {\n      unit = 'B';\n    }\n  }\n\n  var val = value / map[unit.toLowerCase()];\n  var str = val.toFixed(decimalPlaces);\n\n  if (!fixedDecimals) {\n    str = str.replace(formatDecimalsRegExp, '$1');\n  }\n\n  if (thousandsSeparator) {\n    str = str.replace(formatThousandsRegExp, thousandsSeparator);\n  }\n\n  return str + unitSeparator + unit;\n}\n\n/**\n * Parse the string value into an integer in bytes.\n *\n * If no unit is given, it is assumed the value is in bytes.\n *\n * @param {number|string} val\n *\n * @returns {number|null}\n * @public\n */\n\nfunction parse(val) {\n  if (typeof val === 'number' && !isNaN(val)) {\n    return val;\n  }\n\n  if (typeof val !== 'string') {\n    return null;\n  }\n\n  // Test if the string passed is valid\n  var results = parseRegExp.exec(val);\n  var floatValue;\n  var unit = 'b';\n\n  if (!results) {\n    // Nothing could be extracted from the given string\n    floatValue = parseInt(val, 10);\n    unit = 'b'\n  } else {\n    // Retrieve the value and the unit\n    floatValue = parseFloat(results[1]);\n    unit = results[4].toLowerCase();\n  }\n\n  return Math.floor(map[unit] * floatValue);\n}\n\n};"],
"names":["shadow$provide","global","require","module","exports","format","value","options","Number","isFinite","mag","Math","abs","thousandsSeparator","unitSeparator","decimalPlaces","undefined","fixedDecimals","unit","map","toLowerCase","pb","tb","gb","mb","kb","str","toFixed","replace","formatDecimalsRegExp","formatThousandsRegExp","parse","val","isNaN","results","parseRegExp","exec","floatValue","parseFloat","parseInt","floor","bytes","b","pow"]
}
