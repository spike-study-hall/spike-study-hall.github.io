shadow$provide.module$node_modules$body_parser$lib$types$text=function(global,require,module,exports){function typeChecker(type){return function(req){return!!typeis(req,type)}}var bytes=require("module$node_modules$bytes$index"),contentType=require("module$node_modules$content_type$index"),debug=require("module$node_modules$debug$src$browser")("body-parser:text"),read=require("module$node_modules$body_parser$lib$read"),typeis=require("module$node_modules$type_is$index");module.exports=function(options){function parse(buf){return buf}
options=options||{};var defaultCharset=options.defaultCharset||"utf-8",inflate=!1!==options.inflate,limit="number"!==typeof options.limit?bytes.parse(options.limit||"100kb"):options.limit,type=options.type||"text/plain",verify=options.verify||!1;if(!1!==verify&&"function"!==typeof verify)throw new TypeError("option verify must be function");var shouldParse="function"!==typeof type?typeChecker(type):type;return function(req,res,next){if(req._body)debug("body already parsed"),next();else if(req.body=
req.body||{},typeis.hasBody(req))if(debug("content-type %j",req.headers["content-type"]),shouldParse(req)){try{var JSCompiler_inline_result=(contentType.parse(req).parameters.charset||"").toLowerCase()}catch(e){JSCompiler_inline_result=void 0}read(req,res,next,parse,debug,{encoding:JSCompiler_inline_result||defaultCharset,inflate:inflate,limit:limit,verify:verify})}else debug("skip parsing"),next();else debug("skip empty body"),next()}}}
//# sourceMappingURL=module$node_modules$body_parser$lib$types$text.js.map
