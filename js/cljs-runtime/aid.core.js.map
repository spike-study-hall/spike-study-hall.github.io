{"version":3,"sources":["aid/core.cljc"],"mappings":"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","names":["var_args","G__57562","aid.core/call-pred","js/Error","_","pred","expr","G__57572","aid.core/funcall","args-arr__4751__auto__","len__4730__auto__","i__4731__auto__","argseq__4752__auto__","cljs.core/IndexedSeq","seq57570","G__57571","cljs.core/first","cljs.core/next","self__4717__auto__","f","more","cljs.core.apply.cljs$core$IFn$_invoke$arity$2","G__57577","aid.core/curry","seq57574","G__57575","G__57576","arity","outer-more","n","cljs.core/count","pred__57578","cljs.core/=","expr__57579","aid.core.curry.cljs$core$IFn$_invoke$arity$2","inner-more","cljs.core.concat.cljs$core$IFn$_invoke$arity$2","aid.core/flip","x","y","cljs.core.apply.cljs$core$IFn$_invoke$arity$4","aid.core/nop","cljs.core/constantly","aid.unit/unit","aid.core/<$","a","fa","G__57605","G__57606","cats.core/<$>","aid.core/lift-a","cljs.core.apply.cljs$core$IFn$_invoke$arity$3","cats.core/<*>","cats.core.pure.cljs$core$IFn$_invoke$arity$2","cats.context.infer.cljs$core$IFn$_invoke$arity$1","aid.core/ap","m1","m2","cats.core/bind","x1","x2","cats.core.return$.cljs$core$IFn$_invoke$arity$1","aid.core/nothing","cats.monad.maybe/nothing","aid.core/maybe*","pred__57612","expr__57613","cljs.core/nil?","cats.monad.maybe/just","aid.core/if-then-else","if-function","then-function","else-function","fexpr__57618","fexpr__57618.cljs$core$IFn$_invoke$arity$variadic","more__57619__auto__","aid.core/if-then","else","cljs.core/identity","aid.core/if-else","then","aid.core/transfer*","apath","m","com.rpl.specter.impl/compiled-setval*","info__53851__auto__","aid.core/pathcache57629","info57630","com.rpl.specter.impl/magic-precompilation","com.rpl.specter.impl/->LocalSym","precompiled57631","com.rpl.specter.impl/cached-path-info-precompiled","dynamic?__53852__auto__","com.rpl.specter.impl/cached-path-info-dynamic?","G__57633"],"sourcesContent":["(ns aid.core\n  (:refer-clojure :exclude [defcurried])\n  (:require [cats.context :as ctx]\n            [cats.core :as m]\n            [cats.monad.exception :as exc]\n            [cats.monad.maybe :as maybe]\n            #?@(:clj [[clojure.test :as test]\n                      potemkin])\n            [com.rpl.specter :as s]\n            [aid.unit :as unit])\n  #?(:cljs (:require-macros [aid.core :refer [build\n                                              case-eval\n                                              casep\n                                              defcurried]])))\n\n(defn call-pred\n  ([_]\n   true)\n  ([pred expr]\n   (pred expr)))\n\n(defmacro casep\n  [x & clauses]\n  `(condp call-pred ~x\n     ~@clauses))\n\n(defmacro case-eval\n  [x & clauses]\n  `(condp = ~x\n     ~@clauses))\n\n#?(:clj\n   (do (defn gensymize\n         ;This function works around java.lang.ExceptionInInitializerError\n         ;(eval (list map (partial + 1) [0]))\n         ;CompilerException java.lang.ExceptionInInitializerError\n         ;(eval (list map (def x (partial + 1)) [0]))\n         ;=> (1)\n         ;(eval (list map inc [0]))\n         ;=> (1)\n         ;(eval (list map (fn [x] (+ 1 x)) [0]))\n         ;=> (1)\n         [x]\n         (-> (intern *ns* (gensym) x)\n             str\n             (subs 2)\n             symbol))\n\n       (defmacro functionize\n         ;If operator is a list, then it returns a value, which can be passed arround.\n         [operator]\n         (casep operator\n           test/function? operator\n           list? operator\n           `(fn [& more#]\n              (->> (map gensymize more#)\n                   (cons '~operator)\n                   eval))))\n\n       ;This definition is harder to read.\n       ;This definition doesn't use functionize.\n       (defmacro build\n         [operator & fs]\n         (potemkin/unify-gensyms\n           `(fn [& more##]\n              ;TODO use flip\n              (~operator ~@(map (fn [f##]\n                                  `(apply ~f## more##))\n                                fs)))))\n\n       ;This defintion is not compatible with ClojureScript\n       ;(defmacro build\n       ;  [operator & fs]\n       ;  `(comp (partial apply (functionize ~operator))\n       ;         (juxt ~@fs)))\n       ))\n\n(defn funcall\n  ([f]\n   (f))\n  ([f & more]\n   (apply f more)))\n\n#?(:clj\n   (do (defn get-required-arity\n         [f]\n         (-> (exc/try-or-recover (-> f\n                                     .getRequiredArity\n                                     maybe/just)\n                                 (fn [_]\n                                   (exc/success unit/unit)))\n             m/join))\n\n       (def get-non-variadic-arities\n         (comp (partial map (comp alength\n                                  (functionize .getParameterTypes)))\n               (partial filter (comp (partial = \"invoke\")\n                                     (functionize .getName)))\n               (functionize .getDeclaredMethods)\n               class))\n\n       (def get-arities\n         (build (comp distinct\n                      maybe/cat-maybes\n                      cons)\n                get-required-arity\n                (comp (partial map maybe/just)\n                      get-non-variadic-arities)))\n\n       (def get-currying-arity\n         (comp (partial max 2)\n               (partial apply min)\n               get-arities))))\n\n(defn curry\n  #?(:clj ([f]\n           (curry (get-currying-arity f) f)))\n  ([arity f]\n   (fn [& outer-more]\n     (let [n (count outer-more)]\n       (case-eval arity\n         n (apply f outer-more)\n         (curry (- arity n)\n                (fn [& inner-more]\n                  (apply f (concat outer-more inner-more))))))))\n  ([arity f & more]\n   (apply (curry arity f) more)))\n\n(defmacro curriedfn\n  [bindings & body]\n  `(curry ~(count bindings)\n          (fn ~bindings\n            ~@body)))\n\n(defmacro defcurried\n  [function-name & more]\n  `(def ~function-name\n     (curriedfn ~@more)))\n\n(defn flip\n  [f]\n  (fn\n    ([x]\n     (fn [y & more]\n       (apply f y x more)))\n    ([x y & more]\n     (apply f y x more))))\n\n(def nop\n  (constantly unit/unit))\n\n(defmacro defpfmethod\n  [multifn dispatch-val f]\n  `(defmethod ~multifn ~dispatch-val\n     [& x#]\n     (apply ~f x#)))\n\n;TODO delete this function when it's added to cats.core\n(defn <$\n  [a fa]\n  (m/<$> (constantly a) fa))\n\n(defn lift-a\n  [f]\n  (fn [& more]\n    (apply m/<*>\n           (m/pure (ctx/infer (first more)) (curry (count more) f))\n           more)))\n\n;TODO delete this function after cats.core is fixed\n(defn ap\n  [m1 m2]\n  ;TODO use >>= and <$>\n  (m/mlet [x1 m1\n           x2 m2]\n          (m/return (x1 x2))))\n\n;TODO delete this definition after cats.monad.maybe is fixed\n(def nothing\n  (maybe/nothing))\n\n(defn maybe*\n  [expr]\n  (casep expr\n    nil? nothing\n    (maybe/just expr)))\n\n(defmacro maybe-if\n  [test then]\n  `(maybe* (if ~test\n             ~then)))\n\n(defmacro maybe-if-not\n  [test then]\n  `(maybe* (if-not ~test\n             ~then)))\n\n\n(defcurried if-then-else\n  [if-function then-function else-function x]\n  ((build if\n          if-function\n          then-function\n          else-function)\n   x))\n\n(defcurried if-then\n  [if-function then-function else]\n  (if-then-else if-function\n                then-function\n                identity\n                else))\n\n(defcurried if-else\n  [if-function else-function then]\n  (if-then-else if-function\n                identity\n                else-function\n                then))\n\n(defcurried transfer*\n  [apath f m]\n  (s/setval apath (f m) m))\n"]}