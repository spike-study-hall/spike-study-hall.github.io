{
"version":3,
"file":"module$node_modules$ws$lib$Receiver.js",
"lineCount":15,
"mappings":"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",
"sources":["node_modules/ws/lib/Receiver.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$ws$lib$Receiver\"] = function(global,require,module,exports) {\n/*!\n * ws: a node.js websocket client\n * Copyright(c) 2011 Einar Otto Stangvik <einaros@gmail.com>\n * MIT Licensed\n */\n\n'use strict';\n\nconst safeBuffer = require('safe-buffer');\n\nconst PerMessageDeflate = require('./PerMessageDeflate');\nconst isValidUTF8 = require('./Validation');\nconst bufferUtil = require('./BufferUtil');\nconst ErrorCodes = require('./ErrorCodes');\nconst constants = require('./Constants');\n\nconst Buffer = safeBuffer.Buffer;\n\nconst GET_INFO = 0;\nconst GET_PAYLOAD_LENGTH_16 = 1;\nconst GET_PAYLOAD_LENGTH_64 = 2;\nconst GET_MASK = 3;\nconst GET_DATA = 4;\nconst INFLATING = 5;\n\n/**\n * HyBi Receiver implementation.\n */\nclass Receiver {\n  /**\n   * Creates a Receiver instance.\n   *\n   * @param {Object} extensions An object containing the negotiated extensions\n   * @param {Number} maxPayload The maximum allowed message length\n   * @param {String} binaryType The type for binary data\n   */\n  constructor (extensions, maxPayload, binaryType) {\n    this._binaryType = binaryType || constants.BINARY_TYPES[0];\n    this._extensions = extensions || {};\n    this._maxPayload = maxPayload | 0;\n\n    this._bufferedBytes = 0;\n    this._buffers = [];\n\n    this._compressed = false;\n    this._payloadLength = 0;\n    this._fragmented = 0;\n    this._masked = false;\n    this._fin = false;\n    this._mask = null;\n    this._opcode = 0;\n\n    this._totalPayloadLength = 0;\n    this._messageLength = 0;\n    this._fragments = [];\n\n    this._cleanupCallback = null;\n    this._hadError = false;\n    this._dead = false;\n    this._loop = false;\n\n    this.onmessage = null;\n    this.onclose = null;\n    this.onerror = null;\n    this.onping = null;\n    this.onpong = null;\n\n    this._state = GET_INFO;\n  }\n\n  /**\n   * Consumes bytes from the available buffered data.\n   *\n   * @param {Number} bytes The number of bytes to consume\n   * @return {Buffer} Consumed bytes\n   * @private\n   */\n  readBuffer (bytes) {\n    var offset = 0;\n    var dst;\n    var l;\n\n    this._bufferedBytes -= bytes;\n\n    if (bytes === this._buffers[0].length) return this._buffers.shift();\n\n    if (bytes < this._buffers[0].length) {\n      dst = this._buffers[0].slice(0, bytes);\n      this._buffers[0] = this._buffers[0].slice(bytes);\n      return dst;\n    }\n\n    dst = Buffer.allocUnsafe(bytes);\n\n    while (bytes > 0) {\n      l = this._buffers[0].length;\n\n      if (bytes >= l) {\n        this._buffers[0].copy(dst, offset);\n        offset += l;\n        this._buffers.shift();\n      } else {\n        this._buffers[0].copy(dst, offset, 0, bytes);\n        this._buffers[0] = this._buffers[0].slice(bytes);\n      }\n\n      bytes -= l;\n    }\n\n    return dst;\n  }\n\n  /**\n   * Checks if the number of buffered bytes is bigger or equal than `n` and\n   * calls `cleanup` if necessary.\n   *\n   * @param {Number} n The number of bytes to check against\n   * @return {Boolean} `true` if `bufferedBytes >= n`, else `false`\n   * @private\n   */\n  hasBufferedBytes (n) {\n    if (this._bufferedBytes >= n) return true;\n\n    this._loop = false;\n    if (this._dead) this.cleanup(this._cleanupCallback);\n    return false;\n  }\n\n  /**\n   * Adds new data to the parser.\n   *\n   * @public\n   */\n  add (data) {\n    if (this._dead) return;\n\n    this._bufferedBytes += data.length;\n    this._buffers.push(data);\n    this.startLoop();\n  }\n\n  /**\n   * Starts the parsing loop.\n   *\n   * @private\n   */\n  startLoop () {\n    this._loop = true;\n\n    while (this._loop) {\n      switch (this._state) {\n        case GET_INFO:\n          this.getInfo();\n          break;\n        case GET_PAYLOAD_LENGTH_16:\n          this.getPayloadLength16();\n          break;\n        case GET_PAYLOAD_LENGTH_64:\n          this.getPayloadLength64();\n          break;\n        case GET_MASK:\n          this.getMask();\n          break;\n        case GET_DATA:\n          this.getData();\n          break;\n        default: // `INFLATING`\n          this._loop = false;\n      }\n    }\n  }\n\n  /**\n   * Reads the first two bytes of a frame.\n   *\n   * @private\n   */\n  getInfo () {\n    if (!this.hasBufferedBytes(2)) return;\n\n    const buf = this.readBuffer(2);\n\n    if ((buf[0] & 0x30) !== 0x00) {\n      this.error(new Error('RSV2 and RSV3 must be clear'), 1002);\n      return;\n    }\n\n    const compressed = (buf[0] & 0x40) === 0x40;\n\n    if (compressed && !this._extensions[PerMessageDeflate.extensionName]) {\n      this.error(new Error('RSV1 must be clear'), 1002);\n      return;\n    }\n\n    this._fin = (buf[0] & 0x80) === 0x80;\n    this._opcode = buf[0] & 0x0f;\n    this._payloadLength = buf[1] & 0x7f;\n\n    if (this._opcode === 0x00) {\n      if (compressed) {\n        this.error(new Error('RSV1 must be clear'), 1002);\n        return;\n      }\n\n      if (!this._fragmented) {\n        this.error(new Error(`invalid opcode: ${this._opcode}`), 1002);\n        return;\n      } else {\n        this._opcode = this._fragmented;\n      }\n    } else if (this._opcode === 0x01 || this._opcode === 0x02) {\n      if (this._fragmented) {\n        this.error(new Error(`invalid opcode: ${this._opcode}`), 1002);\n        return;\n      }\n\n      this._compressed = compressed;\n    } else if (this._opcode > 0x07 && this._opcode < 0x0b) {\n      if (!this._fin) {\n        this.error(new Error('FIN must be set'), 1002);\n        return;\n      }\n\n      if (compressed) {\n        this.error(new Error('RSV1 must be clear'), 1002);\n        return;\n      }\n\n      if (this._payloadLength > 0x7d) {\n        this.error(new Error('invalid payload length'), 1002);\n        return;\n      }\n    } else {\n      this.error(new Error(`invalid opcode: ${this._opcode}`), 1002);\n      return;\n    }\n\n    if (!this._fin && !this._fragmented) this._fragmented = this._opcode;\n\n    this._masked = (buf[1] & 0x80) === 0x80;\n\n    if (this._payloadLength === 126) this._state = GET_PAYLOAD_LENGTH_16;\n    else if (this._payloadLength === 127) this._state = GET_PAYLOAD_LENGTH_64;\n    else this.haveLength();\n  }\n\n  /**\n   * Gets extended payload length (7+16).\n   *\n   * @private\n   */\n  getPayloadLength16 () {\n    if (!this.hasBufferedBytes(2)) return;\n\n    this._payloadLength = this.readBuffer(2).readUInt16BE(0, true);\n    this.haveLength();\n  }\n\n  /**\n   * Gets extended payload length (7+64).\n   *\n   * @private\n   */\n  getPayloadLength64 () {\n    if (!this.hasBufferedBytes(8)) return;\n\n    const buf = this.readBuffer(8);\n    const num = buf.readUInt32BE(0, true);\n\n    //\n    // The maximum safe integer in JavaScript is 2^53 - 1. An error is returned\n    // if payload length is greater than this number.\n    //\n    if (num > Math.pow(2, 53 - 32) - 1) {\n      this.error(new Error('max payload size exceeded'), 1009);\n      return;\n    }\n\n    this._payloadLength = (num * Math.pow(2, 32)) + buf.readUInt32BE(4, true);\n    this.haveLength();\n  }\n\n  /**\n   * Payload length has been read.\n   *\n   * @private\n   */\n  haveLength () {\n    if (this._opcode < 0x08 && this.maxPayloadExceeded(this._payloadLength)) {\n      return;\n    }\n\n    if (this._masked) this._state = GET_MASK;\n    else this._state = GET_DATA;\n  }\n\n  /**\n   * Reads mask bytes.\n   *\n   * @private\n   */\n  getMask () {\n    if (!this.hasBufferedBytes(4)) return;\n\n    this._mask = this.readBuffer(4);\n    this._state = GET_DATA;\n  }\n\n  /**\n   * Reads data bytes.\n   *\n   * @private\n   */\n  getData () {\n    var data = constants.EMPTY_BUFFER;\n\n    if (this._payloadLength) {\n      if (!this.hasBufferedBytes(this._payloadLength)) return;\n\n      data = this.readBuffer(this._payloadLength);\n      if (this._masked) bufferUtil.unmask(data, this._mask);\n    }\n\n    if (this._opcode > 0x07) {\n      this.controlMessage(data);\n    } else if (this._compressed) {\n      this._state = INFLATING;\n      this.decompress(data);\n    } else if (this.pushFragment(data)) {\n      this.dataMessage();\n    }\n  }\n\n  /**\n   * Decompresses data.\n   *\n   * @param {Buffer} data Compressed data\n   * @private\n   */\n  decompress (data) {\n    const perMessageDeflate = this._extensions[PerMessageDeflate.extensionName];\n\n    perMessageDeflate.decompress(data, this._fin, (err, buf) => {\n      if (err) {\n        this.error(err, err.closeCode === 1009 ? 1009 : 1007);\n        return;\n      }\n\n      if (this.pushFragment(buf)) this.dataMessage();\n      this.startLoop();\n    });\n  }\n\n  /**\n   * Handles a data message.\n   *\n   * @private\n   */\n  dataMessage () {\n    if (this._fin) {\n      const messageLength = this._messageLength;\n      const fragments = this._fragments;\n\n      this._totalPayloadLength = 0;\n      this._messageLength = 0;\n      this._fragmented = 0;\n      this._fragments = [];\n\n      if (this._opcode === 2) {\n        var data;\n\n        if (this._binaryType === 'nodebuffer') {\n          data = toBuffer(fragments, messageLength);\n        } else if (this._binaryType === 'arraybuffer') {\n          data = toArrayBuffer(toBuffer(fragments, messageLength));\n        } else {\n          data = fragments;\n        }\n\n        this.onmessage(data);\n      } else {\n        const buf = toBuffer(fragments, messageLength);\n\n        if (!isValidUTF8(buf)) {\n          this.error(new Error('invalid utf8 sequence'), 1007);\n          return;\n        }\n\n        this.onmessage(buf.toString());\n      }\n    }\n\n    this._state = GET_INFO;\n  }\n\n  /**\n   * Handles a control message.\n   *\n   * @param {Buffer} data Data to handle\n   * @private\n   */\n  controlMessage (data) {\n    if (this._opcode === 0x08) {\n      if (data.length === 0) {\n        this.onclose(1000, '');\n        this._loop = false;\n        this.cleanup(this._cleanupCallback);\n      } else if (data.length === 1) {\n        this.error(new Error('invalid payload length'), 1002);\n      } else {\n        const code = data.readUInt16BE(0, true);\n\n        if (!ErrorCodes.isValidErrorCode(code)) {\n          this.error(new Error(`invalid status code: ${code}`), 1002);\n          return;\n        }\n\n        const buf = data.slice(2);\n\n        if (!isValidUTF8(buf)) {\n          this.error(new Error('invalid utf8 sequence'), 1007);\n          return;\n        }\n\n        this.onclose(code, buf.toString());\n        this._loop = false;\n        this.cleanup(this._cleanupCallback);\n      }\n\n      return;\n    }\n\n    if (this._opcode === 0x09) this.onping(data);\n    else this.onpong(data);\n\n    this._state = GET_INFO;\n  }\n\n  /**\n   * Handles an error.\n   *\n   * @param {Error} err The error\n   * @param {Number} code Close code\n   * @private\n   */\n  error (err, code) {\n    this.onerror(err, code);\n    this._hadError = true;\n    this._loop = false;\n    this.cleanup(this._cleanupCallback);\n  }\n\n  /**\n   * Checks payload size, disconnects socket when it exceeds `maxPayload`.\n   *\n   * @param {Number} length Payload length\n   * @private\n   */\n  maxPayloadExceeded (length) {\n    if (length === 0 || this._maxPayload < 1) return false;\n\n    const fullLength = this._totalPayloadLength + length;\n\n    if (fullLength <= this._maxPayload) {\n      this._totalPayloadLength = fullLength;\n      return false;\n    }\n\n    this.error(new Error('max payload size exceeded'), 1009);\n    return true;\n  }\n\n  /**\n   * Appends a fragment in the fragments array after checking that the sum of\n   * fragment lengths does not exceed `maxPayload`.\n   *\n   * @param {Buffer} fragment The fragment to add\n   * @return {Boolean} `true` if `maxPayload` is not exceeded, else `false`\n   * @private\n   */\n  pushFragment (fragment) {\n    if (fragment.length === 0) return true;\n\n    const totalLength = this._messageLength + fragment.length;\n\n    if (this._maxPayload < 1 || totalLength <= this._maxPayload) {\n      this._messageLength = totalLength;\n      this._fragments.push(fragment);\n      return true;\n    }\n\n    this.error(new Error('max payload size exceeded'), 1009);\n    return false;\n  }\n\n  /**\n   * Releases resources used by the receiver.\n   *\n   * @param {Function} cb Callback\n   * @public\n   */\n  cleanup (cb) {\n    this._dead = true;\n\n    if (!this._hadError && (this._loop || this._state === INFLATING)) {\n      this._cleanupCallback = cb;\n    } else {\n      this._extensions = null;\n      this._fragments = null;\n      this._buffers = null;\n      this._mask = null;\n\n      this._cleanupCallback = null;\n      this.onmessage = null;\n      this.onclose = null;\n      this.onerror = null;\n      this.onping = null;\n      this.onpong = null;\n\n      if (cb) cb();\n    }\n  }\n}\n\nmodule.exports = Receiver;\n\n/**\n * Makes a buffer from a list of fragments.\n *\n * @param {Buffer[]} fragments The list of fragments composing the message\n * @param {Number} messageLength The length of the message\n * @return {Buffer}\n * @private\n */\nfunction toBuffer (fragments, messageLength) {\n  if (fragments.length === 1) return fragments[0];\n  if (fragments.length > 1) return bufferUtil.concat(fragments, messageLength);\n  return constants.EMPTY_BUFFER;\n}\n\n/**\n * Converts a buffer to an `ArrayBuffer`.\n *\n * @param {Buffer} The buffer to convert\n * @return {ArrayBuffer} Converted buffer\n */\nfunction toArrayBuffer (buf) {\n  if (buf.byteOffset === 0 && buf.byteLength === buf.buffer.byteLength) {\n    return buf.buffer;\n  }\n\n  return buf.buffer.slice(buf.byteOffset, buf.byteOffset + buf.byteLength);\n}\n\n};"],
"names":["shadow$provide","global","require","module","exports","toBuffer","fragments","messageLength","length","bufferUtil","concat","constants","EMPTY_BUFFER","safeBuffer","PerMessageDeflate","isValidUTF8","ErrorCodes","Buffer","Receiver","constructor","extensions","maxPayload","binaryType","_binaryType","BINARY_TYPES","_extensions","_maxPayload","_bufferedBytes","_buffers","_compressed","_fragmented","_payloadLength","_fin","_masked","_mask","_messageLength","_totalPayloadLength","_opcode","_fragments","_cleanupCallback","_loop","_dead","_hadError","onpong","onping","onerror","onclose","onmessage","_state","GET_INFO","readBuffer","bytes","offset","shift","dst","slice","allocUnsafe","l","copy","hasBufferedBytes","n","cleanup","add","data","push","startLoop","getInfo","GET_PAYLOAD_LENGTH_16","getPayloadLength16","GET_PAYLOAD_LENGTH_64","getPayloadLength64","GET_MASK","getMask","GET_DATA","getData","buf","error","Error","compressed","extensionName","haveLength","readUInt16BE","num","readUInt32BE","Math","pow","maxPayloadExceeded","unmask","controlMessage","INFLATING","decompress","pushFragment","dataMessage","perMessageDeflate","err","closeCode","byteOffset","byteLength","buffer","toString","code","isValidErrorCode","fullLength","fragment","totalLength","cb"]
}
