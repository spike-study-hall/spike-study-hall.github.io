{
"version":3,
"file":"module$node_modules$array_flatten$array_flatten.js",
"lineCount":2,
"mappings":"AAAAA,cAAA,gDAAA,CAAoE,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CAgB5GC,QAASA,iBAAiB,CAACC,KAAD,CAAQC,MAAR,CAAgBC,KAAhB,CAAuB,CAC/C,IAAK,IAAIC,EAAI,CAAb,CAAgBA,CAAhB,CAAoBH,KAAAI,OAApB,CAAkCD,CAAA,EAAlC,CAAuC,CACrC,IAAIE,MAAQL,KAAA,CAAMG,CAAN,CAEA,EAAZ,CAAID,KAAJ,EAAiBI,KAAAC,QAAA,CAAcF,KAAd,CAAjB,CACEN,gBAAA,CAAiBM,KAAjB,CAAwBJ,MAAxB,CAAgCC,KAAhC,CAAwC,CAAxC,CADF,CAGED,MAAAO,KAAA,CAAYH,KAAZ,CANmC,CAUvC,MAAOJ,OAXwC,CAqBjDQ,QAASA,eAAe,CAACT,KAAD,CAAQC,MAAR,CAAgB,CACtC,IAAK,IAAIE,EAAI,CAAb,CAAgBA,CAAhB,CAAoBH,KAAAI,OAApB,CAAkCD,CAAA,EAAlC,CAAuC,CACrC,IAAIE,MAAQL,KAAA,CAAMG,CAAN,CAERG,MAAAC,QAAA,CAAcF,KAAd,CAAJ,CACEI,cAAA,CAAeJ,KAAf,CAAsBJ,MAAtB,CADF,CAGEA,MAAAO,KAAA,CAAYH,KAAZ,CANmC,CAUvC,MAAOJ,OAX+B,CA/BxCJ,MAAAC,QAAA,CAoDAY,QAAsB,CAACV,KAAD;AAAQE,KAAR,CAAe,CACnC,MAAa,KAAb,EAAIA,KAAJ,CACSO,cAAA,CAAeT,KAAf,CAAsB,EAAtB,CADT,CAIOD,gBAAA,CAAiBC,KAAjB,CAAwB,EAAxB,CAA4BE,KAA5B,CAL4B,CA1DuE;",
"sources":["node_modules/array-flatten/array-flatten.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$array_flatten$array_flatten\"] = function(global,require,module,exports) {\n'use strict'\n\n/**\n * Expose `arrayFlatten`.\n */\nmodule.exports = arrayFlatten\n\n/**\n * Recursive flatten function with depth.\n *\n * @param  {Array}  array\n * @param  {Array}  result\n * @param  {Number} depth\n * @return {Array}\n */\nfunction flattenWithDepth (array, result, depth) {\n  for (var i = 0; i < array.length; i++) {\n    var value = array[i]\n\n    if (depth > 0 && Array.isArray(value)) {\n      flattenWithDepth(value, result, depth - 1)\n    } else {\n      result.push(value)\n    }\n  }\n\n  return result\n}\n\n/**\n * Recursive flatten function. Omitting depth is slightly faster.\n *\n * @param  {Array} array\n * @param  {Array} result\n * @return {Array}\n */\nfunction flattenForever (array, result) {\n  for (var i = 0; i < array.length; i++) {\n    var value = array[i]\n\n    if (Array.isArray(value)) {\n      flattenForever(value, result)\n    } else {\n      result.push(value)\n    }\n  }\n\n  return result\n}\n\n/**\n * Flatten an array, with the ability to define a depth.\n *\n * @param  {Array}  array\n * @param  {Number} depth\n * @return {Array}\n */\nfunction arrayFlatten (array, depth) {\n  if (depth == null) {\n    return flattenForever(array, [])\n  }\n\n  return flattenWithDepth(array, [], depth)\n}\n\n};"],
"names":["shadow$provide","global","require","module","exports","flattenWithDepth","array","result","depth","i","length","value","Array","isArray","push","flattenForever","arrayFlatten"]
}
