shadow$provide.module$node_modules$raw_body$index=function(global,require,module,exports){function getDecoder(encoding){if(!encoding)return null;try{return iconv.getDecoder(encoding)}catch(e){if(!ICONV_ENCODING_MESSAGE_REGEXP.test(e.message))throw e;throw createError(415,"specified encoding unsupported",{encoding:encoding,type:"encoding.unsupported"});}}function readStream(stream,encoding,length,limit,callback){function done(){function invokeCallback(){cleanup();args[0]&&(unpipe(stream),"function"===
typeof stream.pause&&stream.pause());callback.apply(null,args)}for(var args=Array(arguments.length),i=0;i<args.length;i++)args[i]=arguments[i];complete=!0;sync?process.nextTick(invokeCallback):invokeCallback()}function onAborted(){complete||done(createError(400,"request aborted",{code:"ECONNABORTED",expected:length,length:length,received:received,type:"request.aborted"}))}function onData(chunk){complete||(received+=chunk.length,null!==limit&&received>limit?done(createError(413,"request entity too large",
{limit:limit,received:received,type:"entity.too.large"})):decoder?buffer+=decoder.write(chunk):buffer.push(chunk))}function onEnd(err){if(!complete){if(err)return done(err);null!==length&&received!==length?done(createError(400,"request size did not match content length",{expected:length,length:length,received:received,type:"request.size.invalid"})):(err=decoder?buffer+(decoder.end()||""):Buffer.concat(buffer),done(null,err))}}function cleanup(){buffer=null;stream.removeListener("aborted",onAborted);
stream.removeListener("data",onData);stream.removeListener("end",onEnd);stream.removeListener("error",onEnd);stream.removeListener("close",cleanup)}var complete=!1,sync=!0;if(null!==limit&&null!==length&&length>limit)return done(createError(413,"request entity too large",{expected:length,length:length,limit:limit,type:"entity.too.large"}));var state=stream._readableState;if(stream._decoder||state&&(state.encoding||state.decoder))return done(createError(500,"stream encoding should not be set",{type:"stream.encoding.set"}));
var received=0;try{var decoder=getDecoder(encoding)}catch(err){return done(err)}var buffer=decoder?"":[];stream.on("aborted",onAborted);stream.on("close",cleanup);stream.on("data",onData);stream.on("end",onEnd);stream.on("error",onEnd);sync=!1}var process=require("module$node_modules$process$browser"),Buffer=require("module$node_modules$buffer$index").Buffer;"use strict";var bytes=require("module$node_modules$bytes$index"),createError=require("module$node_modules$http_errors$index"),iconv=require("module$node_modules$iconv_lite$lib$index"),
unpipe=require("module$node_modules$unpipe$index");module.exports=function(stream,options,callback){var opts=options||{};if(!0===options||"string"===typeof options)opts={encoding:options};"function"===typeof options&&(callback=options,opts={});if(void 0!==callback&&"function"!==typeof callback)throw new TypeError("argument callback must be a function");if(!callback&&!global.Promise)throw new TypeError("argument callback is required");var encoding=!0!==opts.encoding?opts.encoding:"utf-8",limit=bytes.parse(opts.limit),
length=null==opts.length||isNaN(opts.length)?null:parseInt(opts.length,10);return callback?readStream(stream,encoding,length,limit,callback):new Promise(function(resolve,reject){readStream(stream,encoding,length,limit,function(err,buf){if(err)return reject(err);resolve(buf)})})};var ICONV_ENCODING_MESSAGE_REGEXP=/^Encoding not recognized: /}
//# sourceMappingURL=module$node_modules$raw_body$index.js.map
