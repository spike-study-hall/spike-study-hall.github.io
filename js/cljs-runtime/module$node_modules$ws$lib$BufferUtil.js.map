{
"version":3,
"file":"module$node_modules$ws$lib$BufferUtil.js",
"lineCount":2,
"mappings":"AAAAA,cAAA,sCAAA,CAA0D,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CAWlG,IAAMC,OAFaH,OAAAI,CAAQ,uCAARA,CAEJD,OAUTE,OAAAA,CAASA,QAAA,CAACC,IAAD,CAAOC,WAAP,CAAuB,CAC9BC,WAAAA,CAASL,MAAAM,YAAA,CAAmBF,WAAnB,CAGf,KAFA,IAAIG,OAAS,CAAb,CAESC,EAAI,CAAb,CAAgBA,CAAhB,CAAoBL,IAAAM,OAApB,CAAiCD,CAAA,EAAjC,CAAsC,CACpC,IAAME,IAAMP,IAAA,CAAKK,CAAL,CACZE,IAAAC,KAAA,CAASN,WAAT,CAAiBE,MAAjB,CACAA,OAAA,EAAUG,GAAAD,OAH0B,CAMtC,MAAOJ,YAV6B,CAatC,IAAI,CACF,IAAMO,WAAaf,OAAA,CAAQ,sCAAR,CAEnBC,OAAAC,QAAA,CAAiBc,MAAAC,OAAA,CAAc,CAAEZ,OAAAA,MAAF,CAAd,CAA0BU,UAAAG,WAA1B,EAAmDH,UAAnD,CAHf,CAIF,MAAOI,CAAP,CAAqC,CAgCrClB,MAAAC,QAAA;AAAiB,CAAEG,OAAAA,MAAF,CAAUe,KArBdA,QAAA,CAACC,MAAD,CAASD,IAAT,CAAeE,MAAf,CAAuBZ,MAAvB,CAA+BE,MAA/B,CAA0C,CACrD,IAAK,IAAID,EAAI,CAAb,CAAgBA,CAAhB,CAAoBC,MAApB,CAA4BD,CAAA,EAA5B,CACEW,MAAA,CAAOZ,MAAP,CAAgBC,CAAhB,CAAA,CAAqBU,MAAA,CAAOV,CAAP,CAArB,CAAiCS,IAAA,CAAKT,CAAL,CAAS,CAAT,CAFkB,CAqBtC,CAAgBY,OARlBA,QAAA,CAACC,MAAD,CAASJ,IAAT,CAAkB,CAG/B,IADA,IAAMR,OAASY,MAAAZ,OAAf,CACSD,EAAI,CAAb,CAAgBA,CAAhB,CAAoBC,MAApB,CAA4BD,CAAA,EAA5B,CACEa,MAAA,CAAOb,CAAP,CAAA,EAAaS,IAAA,CAAKT,CAAL,CAAS,CAAT,CAJgB,CAQhB,CAhCoB,CAtC2D;",
"sources":["node_modules/ws/lib/BufferUtil.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$ws$lib$BufferUtil\"] = function(global,require,module,exports) {\n/*!\n * ws: a node.js websocket client\n * Copyright(c) 2011 Einar Otto Stangvik <einaros@gmail.com>\n * MIT Licensed\n */\n\n'use strict';\n\nconst safeBuffer = require('safe-buffer');\n\nconst Buffer = safeBuffer.Buffer;\n\n/**\n * Merges an array of buffers into a new buffer.\n *\n * @param {Buffer[]} list The array of buffers to concat\n * @param {Number} totalLength The total length of buffers in the list\n * @return {Buffer} The resulting buffer\n * @public\n */\nconst concat = (list, totalLength) => {\n  const target = Buffer.allocUnsafe(totalLength);\n  var offset = 0;\n\n  for (var i = 0; i < list.length; i++) {\n    const buf = list[i];\n    buf.copy(target, offset);\n    offset += buf.length;\n  }\n\n  return target;\n};\n\ntry {\n  const bufferUtil = require('bufferutil');\n\n  module.exports = Object.assign({ concat }, bufferUtil.BufferUtil || bufferUtil);\n} catch (e) /* istanbul ignore next */ {\n  /**\n   * Masks a buffer using the given mask.\n   *\n   * @param {Buffer} source The buffer to mask\n   * @param {Buffer} mask The mask to use\n   * @param {Buffer} output The buffer where to store the result\n   * @param {Number} offset The offset at which to start writing\n   * @param {Number} length The number of bytes to mask.\n   * @public\n   */\n  const mask = (source, mask, output, offset, length) => {\n    for (var i = 0; i < length; i++) {\n      output[offset + i] = source[i] ^ mask[i & 3];\n    }\n  };\n\n  /**\n   * Unmasks a buffer using the given mask.\n   *\n   * @param {Buffer} buffer The buffer to unmask\n   * @param {Buffer} mask The mask to use\n   * @public\n   */\n  const unmask = (buffer, mask) => {\n    // Required until https://github.com/nodejs/node/issues/9006 is resolved.\n    const length = buffer.length;\n    for (var i = 0; i < length; i++) {\n      buffer[i] ^= mask[i & 3];\n    }\n  };\n\n  module.exports = { concat, mask, unmask };\n}\n\n};"],
"names":["shadow$provide","global","require","module","exports","Buffer","safeBuffer","concat","list","totalLength","target","allocUnsafe","offset","i","length","buf","copy","bufferUtil","Object","assign","BufferUtil","e","mask","source","output","unmask","buffer"]
}
