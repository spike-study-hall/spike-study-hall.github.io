shadow$provide.module$node_modules$vary$index=function(global,require,module,exports){function append(header,field){if("string"!==typeof header)throw new TypeError("header argument is required");if(!field)throw new TypeError("field argument is required");field=Array.isArray(field)?field:parse(String(field));for(var j=0;j<field.length;j++)if(!FIELD_NAME_REGEXP.test(field[j]))throw new TypeError("field argument contains an invalid header name");if("*"===header)return header;j=header;header=parse(header.toLowerCase());
if(-1!==field.indexOf("*")||-1!==header.indexOf("*"))return"*";for(var i=0;i<field.length;i++){var fld=field[i].toLowerCase();-1===header.indexOf(fld)&&(header.push(fld),j=j?j+", "+field[i]:field[i])}return j}function parse(header){for(var end=0,list=[],start=0,i=0,len=header.length;i<len;i++)switch(header.charCodeAt(i)){case 32:start===end&&(start=end=i+1);break;case 44:list.push(header.substring(start,end));start=end=i+1;break;default:end=i+1}list.push(header.substring(start,end));return list}module.exports=
function(res,field){if(!res||!res.getHeader||!res.setHeader)throw new TypeError("res argument is required");var val=res.getHeader("Vary")||"",header=Array.isArray(val)?val.join(", "):String(val);(val=append(header,field))&&res.setHeader("Vary",val)};module.exports.append=append;var FIELD_NAME_REGEXP=/^[!#$%&'*+\-.^_`|~0-9A-Za-z]+$/}
//# sourceMappingURL=module$node_modules$vary$index.js.map
