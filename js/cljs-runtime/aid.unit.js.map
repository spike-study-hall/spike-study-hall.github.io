{"version":3,"sources":["aid/unit.cljc"],"mappings":"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","names":["this__4385__auto__","k__4386__auto__","this__4387__auto__","k50470","else__4388__auto__","G__50474","cljs.core.get.cljs$core$IFn$_invoke$arity$3","__extmap","this__4404__auto__","f__4405__auto__","init__4406__auto__","cljs.core.reduce.cljs$core$IFn$_invoke$arity$3","ret__4407__auto__","p__50475","vec__50476","k__4408__auto__","cljs.core.nth.cljs$core$IFn$_invoke$arity$3","v__4409__auto__","this__4399__auto__","writer__4400__auto__","opts__4401__auto__","pr-pair__4402__auto__","keyval__4403__auto__","cljs.core/pr-sequential-writer","cljs.core.concat.cljs$core$IFn$_invoke$arity$2","G__50469","cljs.core/RecordIter","cljs.core/-iterator","cljs.core/nil-iter","this__4383__auto__","__meta","this__4380__auto__","__hash","this__4389__auto__","cljs.core/count","this__4381__auto__","h__4243__auto__","fexpr__50484","coll__4382__auto__","cljs.core/hash-unordered-coll","this50471","other50472","cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2","this__4394__auto__","k__4395__auto__","cljs.core/contains?","cljs.core.dissoc.cljs$core$IFn$_invoke$arity$2","cljs.core/-with-meta","cljs.core.into.cljs$core$IFn$_invoke$arity$2","cljs.core/not-empty","cljs.core/PROTOCOL_SENTINEL","this__4392__auto__","k__4393__auto__","pred__50487","cljs.core/keyword-identical?","expr__50488","cljs.core.assoc.cljs$core$IFn$_invoke$arity$3","this__4397__auto__","cljs.core/seq","this__4384__auto__","this__4390__auto__","entry__4391__auto__","cljs.core/vector?","cljs.core._nth.cljs$core$IFn$_invoke$arity$2","cljs.core/-conj","aid.unit/Unit","this__4428__auto__","cljs.core/List","writer__4429__auto__","cljs.core/-write","G__50473","extmap__4424__auto__","G__50504","cljs.core.dissoc.cljs$core$IFn$_invoke$arity$1","cljs.core/record?","aid.unit/->Unit","aid.unit/map->Unit","_","js/aid","js/aid.unit","js/aid.unit.t_aid$unit50493","aid.unit/t_aid$unit50493","_50495","meta50494","this__4374__auto__","writer__4375__auto__","opt__4376__auto__","aid.unit/->t_aid$unit50493","cats.util/make-printable","aid.unit/unit"],"sourcesContent":[";TODO delete this namespace when unit is added to cats.monad\n(ns aid.unit\n  (:require [cats.protocols :as p]\n            [cats.util :as util]))\n\n(defrecord Unit\n  []\n  p/Contextual\n  (-get-context [_]\n    (reify\n      p/Context\n      p/Semigroup\n      (-mappend [_ _ _]\n        (Unit.))\n      p/Monoid\n      (-mempty [_]\n        (Unit.))))\n  p/Printable\n  (-repr [_]\n    (str \"#[unit]\")))\n\n(util/make-printable Unit)\n\n(def unit\n  (Unit.))\n"]}