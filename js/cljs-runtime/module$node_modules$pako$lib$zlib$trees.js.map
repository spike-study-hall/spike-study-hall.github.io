{
"version":3,
"file":"module$node_modules$pako$lib$zlib$trees.js",
"lineCount":20,
"mappings":"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",
"sources":["node_modules/pako/lib/zlib/trees.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$pako$lib$zlib$trees\"] = function(global,require,module,exports) {\n'use strict';\n\n// (C) 1995-2013 Jean-loup Gailly and Mark Adler\n// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin\n//\n// This software is provided 'as-is', without any express or implied\n// warranty. In no event will the authors be held liable for any damages\n// arising from the use of this software.\n//\n// Permission is granted to anyone to use this software for any purpose,\n// including commercial applications, and to alter it and redistribute it\n// freely, subject to the following restrictions:\n//\n// 1. The origin of this software must not be misrepresented; you must not\n//   claim that you wrote the original software. If you use this software\n//   in a product, an acknowledgment in the product documentation would be\n//   appreciated but is not required.\n// 2. Altered source versions must be plainly marked as such, and must not be\n//   misrepresented as being the original software.\n// 3. This notice may not be removed or altered from any source distribution.\n\n/* eslint-disable space-unary-ops */\n\nvar utils = require('../utils/common');\n\n/* Public constants ==========================================================*/\n/* ===========================================================================*/\n\n\n//var Z_FILTERED          = 1;\n//var Z_HUFFMAN_ONLY      = 2;\n//var Z_RLE               = 3;\nvar Z_FIXED               = 4;\n//var Z_DEFAULT_STRATEGY  = 0;\n\n/* Possible values of the data_type field (though see inflate()) */\nvar Z_BINARY              = 0;\nvar Z_TEXT                = 1;\n//var Z_ASCII             = 1; // = Z_TEXT\nvar Z_UNKNOWN             = 2;\n\n/*============================================================================*/\n\n\nfunction zero(buf) { var len = buf.length; while (--len >= 0) { buf[len] = 0; } }\n\n// From zutil.h\n\nvar STORED_BLOCK = 0;\nvar STATIC_TREES = 1;\nvar DYN_TREES    = 2;\n/* The three kinds of block type */\n\nvar MIN_MATCH    = 3;\nvar MAX_MATCH    = 258;\n/* The minimum and maximum match lengths */\n\n// From deflate.h\n/* ===========================================================================\n * Internal compression state.\n */\n\nvar LENGTH_CODES  = 29;\n/* number of length codes, not counting the special END_BLOCK code */\n\nvar LITERALS      = 256;\n/* number of literal bytes 0..255 */\n\nvar L_CODES       = LITERALS + 1 + LENGTH_CODES;\n/* number of Literal or Length codes, including the END_BLOCK code */\n\nvar D_CODES       = 30;\n/* number of distance codes */\n\nvar BL_CODES      = 19;\n/* number of codes used to transfer the bit lengths */\n\nvar HEAP_SIZE     = 2 * L_CODES + 1;\n/* maximum heap size */\n\nvar MAX_BITS      = 15;\n/* All codes must not exceed MAX_BITS bits */\n\nvar Buf_size      = 16;\n/* size of bit buffer in bi_buf */\n\n\n/* ===========================================================================\n * Constants\n */\n\nvar MAX_BL_BITS = 7;\n/* Bit length codes must not exceed MAX_BL_BITS bits */\n\nvar END_BLOCK   = 256;\n/* end of block literal code */\n\nvar REP_3_6     = 16;\n/* repeat previous bit length 3-6 times (2 bits of repeat count) */\n\nvar REPZ_3_10   = 17;\n/* repeat a zero length 3-10 times  (3 bits of repeat count) */\n\nvar REPZ_11_138 = 18;\n/* repeat a zero length 11-138 times  (7 bits of repeat count) */\n\n/* eslint-disable comma-spacing,array-bracket-spacing */\nvar extra_lbits =   /* extra bits for each length code */\n  [0,0,0,0,0,0,0,0,1,1,1,1,2,2,2,2,3,3,3,3,4,4,4,4,5,5,5,5,0];\n\nvar extra_dbits =   /* extra bits for each distance code */\n  [0,0,0,0,1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10,11,11,12,12,13,13];\n\nvar extra_blbits =  /* extra bits for each bit length code */\n  [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,3,7];\n\nvar bl_order =\n  [16,17,18,0,8,7,9,6,10,5,11,4,12,3,13,2,14,1,15];\n/* eslint-enable comma-spacing,array-bracket-spacing */\n\n/* The lengths of the bit length codes are sent in order of decreasing\n * probability, to avoid transmitting the lengths for unused bit length codes.\n */\n\n/* ===========================================================================\n * Local data. These are initialized only once.\n */\n\n// We pre-fill arrays with 0 to avoid uninitialized gaps\n\nvar DIST_CODE_LEN = 512; /* see definition of array dist_code below */\n\n// !!!! Use flat array instead of structure, Freq = i*2, Len = i*2+1\nvar static_ltree  = new Array((L_CODES + 2) * 2);\nzero(static_ltree);\n/* The static literal tree. Since the bit lengths are imposed, there is no\n * need for the L_CODES extra codes used during heap construction. However\n * The codes 286 and 287 are needed to build a canonical tree (see _tr_init\n * below).\n */\n\nvar static_dtree  = new Array(D_CODES * 2);\nzero(static_dtree);\n/* The static distance tree. (Actually a trivial tree since all codes use\n * 5 bits.)\n */\n\nvar _dist_code    = new Array(DIST_CODE_LEN);\nzero(_dist_code);\n/* Distance codes. The first 256 values correspond to the distances\n * 3 .. 258, the last 256 values correspond to the top 8 bits of\n * the 15 bit distances.\n */\n\nvar _length_code  = new Array(MAX_MATCH - MIN_MATCH + 1);\nzero(_length_code);\n/* length code for each normalized match length (0 == MIN_MATCH) */\n\nvar base_length   = new Array(LENGTH_CODES);\nzero(base_length);\n/* First normalized length for each code (0 = MIN_MATCH) */\n\nvar base_dist     = new Array(D_CODES);\nzero(base_dist);\n/* First normalized distance for each code (0 = distance of 1) */\n\n\nfunction StaticTreeDesc(static_tree, extra_bits, extra_base, elems, max_length) {\n\n  this.static_tree  = static_tree;  /* static tree or NULL */\n  this.extra_bits   = extra_bits;   /* extra bits for each code or NULL */\n  this.extra_base   = extra_base;   /* base index for extra_bits */\n  this.elems        = elems;        /* max number of elements in the tree */\n  this.max_length   = max_length;   /* max bit length for the codes */\n\n  // show if `static_tree` has data or dummy - needed for monomorphic objects\n  this.has_stree    = static_tree && static_tree.length;\n}\n\n\nvar static_l_desc;\nvar static_d_desc;\nvar static_bl_desc;\n\n\nfunction TreeDesc(dyn_tree, stat_desc) {\n  this.dyn_tree = dyn_tree;     /* the dynamic tree */\n  this.max_code = 0;            /* largest code with non zero frequency */\n  this.stat_desc = stat_desc;   /* the corresponding static tree */\n}\n\n\n\nfunction d_code(dist) {\n  return dist < 256 ? _dist_code[dist] : _dist_code[256 + (dist >>> 7)];\n}\n\n\n/* ===========================================================================\n * Output a short LSB first on the stream.\n * IN assertion: there is enough room in pendingBuf.\n */\nfunction put_short(s, w) {\n//    put_byte(s, (uch)((w) & 0xff));\n//    put_byte(s, (uch)((ush)(w) >> 8));\n  s.pending_buf[s.pending++] = (w) & 0xff;\n  s.pending_buf[s.pending++] = (w >>> 8) & 0xff;\n}\n\n\n/* ===========================================================================\n * Send a value on a given number of bits.\n * IN assertion: length <= 16 and value fits in length bits.\n */\nfunction send_bits(s, value, length) {\n  if (s.bi_valid > (Buf_size - length)) {\n    s.bi_buf |= (value << s.bi_valid) & 0xffff;\n    put_short(s, s.bi_buf);\n    s.bi_buf = value >> (Buf_size - s.bi_valid);\n    s.bi_valid += length - Buf_size;\n  } else {\n    s.bi_buf |= (value << s.bi_valid) & 0xffff;\n    s.bi_valid += length;\n  }\n}\n\n\nfunction send_code(s, c, tree) {\n  send_bits(s, tree[c * 2]/*.Code*/, tree[c * 2 + 1]/*.Len*/);\n}\n\n\n/* ===========================================================================\n * Reverse the first len bits of a code, using straightforward code (a faster\n * method would use a table)\n * IN assertion: 1 <= len <= 15\n */\nfunction bi_reverse(code, len) {\n  var res = 0;\n  do {\n    res |= code & 1;\n    code >>>= 1;\n    res <<= 1;\n  } while (--len > 0);\n  return res >>> 1;\n}\n\n\n/* ===========================================================================\n * Flush the bit buffer, keeping at most 7 bits in it.\n */\nfunction bi_flush(s) {\n  if (s.bi_valid === 16) {\n    put_short(s, s.bi_buf);\n    s.bi_buf = 0;\n    s.bi_valid = 0;\n\n  } else if (s.bi_valid >= 8) {\n    s.pending_buf[s.pending++] = s.bi_buf & 0xff;\n    s.bi_buf >>= 8;\n    s.bi_valid -= 8;\n  }\n}\n\n\n/* ===========================================================================\n * Compute the optimal bit lengths for a tree and update the total bit length\n * for the current block.\n * IN assertion: the fields freq and dad are set, heap[heap_max] and\n *    above are the tree nodes sorted by increasing frequency.\n * OUT assertions: the field len is set to the optimal bit length, the\n *     array bl_count contains the frequencies for each bit length.\n *     The length opt_len is updated; static_len is also updated if stree is\n *     not null.\n */\nfunction gen_bitlen(s, desc)\n//    deflate_state *s;\n//    tree_desc *desc;    /* the tree descriptor */\n{\n  var tree            = desc.dyn_tree;\n  var max_code        = desc.max_code;\n  var stree           = desc.stat_desc.static_tree;\n  var has_stree       = desc.stat_desc.has_stree;\n  var extra           = desc.stat_desc.extra_bits;\n  var base            = desc.stat_desc.extra_base;\n  var max_length      = desc.stat_desc.max_length;\n  var h;              /* heap index */\n  var n, m;           /* iterate over the tree elements */\n  var bits;           /* bit length */\n  var xbits;          /* extra bits */\n  var f;              /* frequency */\n  var overflow = 0;   /* number of elements with bit length too large */\n\n  for (bits = 0; bits <= MAX_BITS; bits++) {\n    s.bl_count[bits] = 0;\n  }\n\n  /* In a first pass, compute the optimal bit lengths (which may\n   * overflow in the case of the bit length tree).\n   */\n  tree[s.heap[s.heap_max] * 2 + 1]/*.Len*/ = 0; /* root of the heap */\n\n  for (h = s.heap_max + 1; h < HEAP_SIZE; h++) {\n    n = s.heap[h];\n    bits = tree[tree[n * 2 + 1]/*.Dad*/ * 2 + 1]/*.Len*/ + 1;\n    if (bits > max_length) {\n      bits = max_length;\n      overflow++;\n    }\n    tree[n * 2 + 1]/*.Len*/ = bits;\n    /* We overwrite tree[n].Dad which is no longer needed */\n\n    if (n > max_code) { continue; } /* not a leaf node */\n\n    s.bl_count[bits]++;\n    xbits = 0;\n    if (n >= base) {\n      xbits = extra[n - base];\n    }\n    f = tree[n * 2]/*.Freq*/;\n    s.opt_len += f * (bits + xbits);\n    if (has_stree) {\n      s.static_len += f * (stree[n * 2 + 1]/*.Len*/ + xbits);\n    }\n  }\n  if (overflow === 0) { return; }\n\n  // Trace((stderr,\"\\nbit length overflow\\n\"));\n  /* This happens for example on obj2 and pic of the Calgary corpus */\n\n  /* Find the first bit length which could increase: */\n  do {\n    bits = max_length - 1;\n    while (s.bl_count[bits] === 0) { bits--; }\n    s.bl_count[bits]--;      /* move one leaf down the tree */\n    s.bl_count[bits + 1] += 2; /* move one overflow item as its brother */\n    s.bl_count[max_length]--;\n    /* The brother of the overflow item also moves one step up,\n     * but this does not affect bl_count[max_length]\n     */\n    overflow -= 2;\n  } while (overflow > 0);\n\n  /* Now recompute all bit lengths, scanning in increasing frequency.\n   * h is still equal to HEAP_SIZE. (It is simpler to reconstruct all\n   * lengths instead of fixing only the wrong ones. This idea is taken\n   * from 'ar' written by Haruhiko Okumura.)\n   */\n  for (bits = max_length; bits !== 0; bits--) {\n    n = s.bl_count[bits];\n    while (n !== 0) {\n      m = s.heap[--h];\n      if (m > max_code) { continue; }\n      if (tree[m * 2 + 1]/*.Len*/ !== bits) {\n        // Trace((stderr,\"code %d bits %d->%d\\n\", m, tree[m].Len, bits));\n        s.opt_len += (bits - tree[m * 2 + 1]/*.Len*/) * tree[m * 2]/*.Freq*/;\n        tree[m * 2 + 1]/*.Len*/ = bits;\n      }\n      n--;\n    }\n  }\n}\n\n\n/* ===========================================================================\n * Generate the codes for a given tree and bit counts (which need not be\n * optimal).\n * IN assertion: the array bl_count contains the bit length statistics for\n * the given tree and the field len is set for all tree elements.\n * OUT assertion: the field code is set for all tree elements of non\n *     zero code length.\n */\nfunction gen_codes(tree, max_code, bl_count)\n//    ct_data *tree;             /* the tree to decorate */\n//    int max_code;              /* largest code with non zero frequency */\n//    ushf *bl_count;            /* number of codes at each bit length */\n{\n  var next_code = new Array(MAX_BITS + 1); /* next code value for each bit length */\n  var code = 0;              /* running code value */\n  var bits;                  /* bit index */\n  var n;                     /* code index */\n\n  /* The distribution counts are first used to generate the code values\n   * without bit reversal.\n   */\n  for (bits = 1; bits <= MAX_BITS; bits++) {\n    next_code[bits] = code = (code + bl_count[bits - 1]) << 1;\n  }\n  /* Check that the bit counts in bl_count are consistent. The last code\n   * must be all ones.\n   */\n  //Assert (code + bl_count[MAX_BITS]-1 == (1<<MAX_BITS)-1,\n  //        \"inconsistent bit counts\");\n  //Tracev((stderr,\"\\ngen_codes: max_code %d \", max_code));\n\n  for (n = 0;  n <= max_code; n++) {\n    var len = tree[n * 2 + 1]/*.Len*/;\n    if (len === 0) { continue; }\n    /* Now reverse the bits */\n    tree[n * 2]/*.Code*/ = bi_reverse(next_code[len]++, len);\n\n    //Tracecv(tree != static_ltree, (stderr,\"\\nn %3d %c l %2d c %4x (%x) \",\n    //     n, (isgraph(n) ? n : ' '), len, tree[n].Code, next_code[len]-1));\n  }\n}\n\n\n/* ===========================================================================\n * Initialize the various 'constant' tables.\n */\nfunction tr_static_init() {\n  var n;        /* iterates over tree elements */\n  var bits;     /* bit counter */\n  var length;   /* length value */\n  var code;     /* code value */\n  var dist;     /* distance index */\n  var bl_count = new Array(MAX_BITS + 1);\n  /* number of codes at each bit length for an optimal tree */\n\n  // do check in _tr_init()\n  //if (static_init_done) return;\n\n  /* For some embedded targets, global variables are not initialized: */\n/*#ifdef NO_INIT_GLOBAL_POINTERS\n  static_l_desc.static_tree = static_ltree;\n  static_l_desc.extra_bits = extra_lbits;\n  static_d_desc.static_tree = static_dtree;\n  static_d_desc.extra_bits = extra_dbits;\n  static_bl_desc.extra_bits = extra_blbits;\n#endif*/\n\n  /* Initialize the mapping length (0..255) -> length code (0..28) */\n  length = 0;\n  for (code = 0; code < LENGTH_CODES - 1; code++) {\n    base_length[code] = length;\n    for (n = 0; n < (1 << extra_lbits[code]); n++) {\n      _length_code[length++] = code;\n    }\n  }\n  //Assert (length == 256, \"tr_static_init: length != 256\");\n  /* Note that the length 255 (match length 258) can be represented\n   * in two different ways: code 284 + 5 bits or code 285, so we\n   * overwrite length_code[255] to use the best encoding:\n   */\n  _length_code[length - 1] = code;\n\n  /* Initialize the mapping dist (0..32K) -> dist code (0..29) */\n  dist = 0;\n  for (code = 0; code < 16; code++) {\n    base_dist[code] = dist;\n    for (n = 0; n < (1 << extra_dbits[code]); n++) {\n      _dist_code[dist++] = code;\n    }\n  }\n  //Assert (dist == 256, \"tr_static_init: dist != 256\");\n  dist >>= 7; /* from now on, all distances are divided by 128 */\n  for (; code < D_CODES; code++) {\n    base_dist[code] = dist << 7;\n    for (n = 0; n < (1 << (extra_dbits[code] - 7)); n++) {\n      _dist_code[256 + dist++] = code;\n    }\n  }\n  //Assert (dist == 256, \"tr_static_init: 256+dist != 512\");\n\n  /* Construct the codes of the static literal tree */\n  for (bits = 0; bits <= MAX_BITS; bits++) {\n    bl_count[bits] = 0;\n  }\n\n  n = 0;\n  while (n <= 143) {\n    static_ltree[n * 2 + 1]/*.Len*/ = 8;\n    n++;\n    bl_count[8]++;\n  }\n  while (n <= 255) {\n    static_ltree[n * 2 + 1]/*.Len*/ = 9;\n    n++;\n    bl_count[9]++;\n  }\n  while (n <= 279) {\n    static_ltree[n * 2 + 1]/*.Len*/ = 7;\n    n++;\n    bl_count[7]++;\n  }\n  while (n <= 287) {\n    static_ltree[n * 2 + 1]/*.Len*/ = 8;\n    n++;\n    bl_count[8]++;\n  }\n  /* Codes 286 and 287 do not exist, but we must include them in the\n   * tree construction to get a canonical Huffman tree (longest code\n   * all ones)\n   */\n  gen_codes(static_ltree, L_CODES + 1, bl_count);\n\n  /* The static distance tree is trivial: */\n  for (n = 0; n < D_CODES; n++) {\n    static_dtree[n * 2 + 1]/*.Len*/ = 5;\n    static_dtree[n * 2]/*.Code*/ = bi_reverse(n, 5);\n  }\n\n  // Now data ready and we can init static trees\n  static_l_desc = new StaticTreeDesc(static_ltree, extra_lbits, LITERALS + 1, L_CODES, MAX_BITS);\n  static_d_desc = new StaticTreeDesc(static_dtree, extra_dbits, 0,          D_CODES, MAX_BITS);\n  static_bl_desc = new StaticTreeDesc(new Array(0), extra_blbits, 0,         BL_CODES, MAX_BL_BITS);\n\n  //static_init_done = true;\n}\n\n\n/* ===========================================================================\n * Initialize a new block.\n */\nfunction init_block(s) {\n  var n; /* iterates over tree elements */\n\n  /* Initialize the trees. */\n  for (n = 0; n < L_CODES;  n++) { s.dyn_ltree[n * 2]/*.Freq*/ = 0; }\n  for (n = 0; n < D_CODES;  n++) { s.dyn_dtree[n * 2]/*.Freq*/ = 0; }\n  for (n = 0; n < BL_CODES; n++) { s.bl_tree[n * 2]/*.Freq*/ = 0; }\n\n  s.dyn_ltree[END_BLOCK * 2]/*.Freq*/ = 1;\n  s.opt_len = s.static_len = 0;\n  s.last_lit = s.matches = 0;\n}\n\n\n/* ===========================================================================\n * Flush the bit buffer and align the output on a byte boundary\n */\nfunction bi_windup(s)\n{\n  if (s.bi_valid > 8) {\n    put_short(s, s.bi_buf);\n  } else if (s.bi_valid > 0) {\n    //put_byte(s, (Byte)s->bi_buf);\n    s.pending_buf[s.pending++] = s.bi_buf;\n  }\n  s.bi_buf = 0;\n  s.bi_valid = 0;\n}\n\n/* ===========================================================================\n * Copy a stored block, storing first the length and its\n * one's complement if requested.\n */\nfunction copy_block(s, buf, len, header)\n//DeflateState *s;\n//charf    *buf;    /* the input data */\n//unsigned len;     /* its length */\n//int      header;  /* true if block header must be written */\n{\n  bi_windup(s);        /* align on byte boundary */\n\n  if (header) {\n    put_short(s, len);\n    put_short(s, ~len);\n  }\n//  while (len--) {\n//    put_byte(s, *buf++);\n//  }\n  utils.arraySet(s.pending_buf, s.window, buf, len, s.pending);\n  s.pending += len;\n}\n\n/* ===========================================================================\n * Compares to subtrees, using the tree depth as tie breaker when\n * the subtrees have equal frequency. This minimizes the worst case length.\n */\nfunction smaller(tree, n, m, depth) {\n  var _n2 = n * 2;\n  var _m2 = m * 2;\n  return (tree[_n2]/*.Freq*/ < tree[_m2]/*.Freq*/ ||\n         (tree[_n2]/*.Freq*/ === tree[_m2]/*.Freq*/ && depth[n] <= depth[m]));\n}\n\n/* ===========================================================================\n * Restore the heap property by moving down the tree starting at node k,\n * exchanging a node with the smallest of its two sons if necessary, stopping\n * when the heap property is re-established (each father smaller than its\n * two sons).\n */\nfunction pqdownheap(s, tree, k)\n//    deflate_state *s;\n//    ct_data *tree;  /* the tree to restore */\n//    int k;               /* node to move down */\n{\n  var v = s.heap[k];\n  var j = k << 1;  /* left son of k */\n  while (j <= s.heap_len) {\n    /* Set j to the smallest of the two sons: */\n    if (j < s.heap_len &&\n      smaller(tree, s.heap[j + 1], s.heap[j], s.depth)) {\n      j++;\n    }\n    /* Exit if v is smaller than both sons */\n    if (smaller(tree, v, s.heap[j], s.depth)) { break; }\n\n    /* Exchange v with the smallest son */\n    s.heap[k] = s.heap[j];\n    k = j;\n\n    /* And continue down the tree, setting j to the left son of k */\n    j <<= 1;\n  }\n  s.heap[k] = v;\n}\n\n\n// inlined manually\n// var SMALLEST = 1;\n\n/* ===========================================================================\n * Send the block data compressed using the given Huffman trees\n */\nfunction compress_block(s, ltree, dtree)\n//    deflate_state *s;\n//    const ct_data *ltree; /* literal tree */\n//    const ct_data *dtree; /* distance tree */\n{\n  var dist;           /* distance of matched string */\n  var lc;             /* match length or unmatched char (if dist == 0) */\n  var lx = 0;         /* running index in l_buf */\n  var code;           /* the code to send */\n  var extra;          /* number of extra bits to send */\n\n  if (s.last_lit !== 0) {\n    do {\n      dist = (s.pending_buf[s.d_buf + lx * 2] << 8) | (s.pending_buf[s.d_buf + lx * 2 + 1]);\n      lc = s.pending_buf[s.l_buf + lx];\n      lx++;\n\n      if (dist === 0) {\n        send_code(s, lc, ltree); /* send a literal byte */\n        //Tracecv(isgraph(lc), (stderr,\" '%c' \", lc));\n      } else {\n        /* Here, lc is the match length - MIN_MATCH */\n        code = _length_code[lc];\n        send_code(s, code + LITERALS + 1, ltree); /* send the length code */\n        extra = extra_lbits[code];\n        if (extra !== 0) {\n          lc -= base_length[code];\n          send_bits(s, lc, extra);       /* send the extra length bits */\n        }\n        dist--; /* dist is now the match distance - 1 */\n        code = d_code(dist);\n        //Assert (code < D_CODES, \"bad d_code\");\n\n        send_code(s, code, dtree);       /* send the distance code */\n        extra = extra_dbits[code];\n        if (extra !== 0) {\n          dist -= base_dist[code];\n          send_bits(s, dist, extra);   /* send the extra distance bits */\n        }\n      } /* literal or match pair ? */\n\n      /* Check that the overlay between pending_buf and d_buf+l_buf is ok: */\n      //Assert((uInt)(s->pending) < s->lit_bufsize + 2*lx,\n      //       \"pendingBuf overflow\");\n\n    } while (lx < s.last_lit);\n  }\n\n  send_code(s, END_BLOCK, ltree);\n}\n\n\n/* ===========================================================================\n * Construct one Huffman tree and assigns the code bit strings and lengths.\n * Update the total bit length for the current block.\n * IN assertion: the field freq is set for all tree elements.\n * OUT assertions: the fields len and code are set to the optimal bit length\n *     and corresponding code. The length opt_len is updated; static_len is\n *     also updated if stree is not null. The field max_code is set.\n */\nfunction build_tree(s, desc)\n//    deflate_state *s;\n//    tree_desc *desc; /* the tree descriptor */\n{\n  var tree     = desc.dyn_tree;\n  var stree    = desc.stat_desc.static_tree;\n  var has_stree = desc.stat_desc.has_stree;\n  var elems    = desc.stat_desc.elems;\n  var n, m;          /* iterate over heap elements */\n  var max_code = -1; /* largest code with non zero frequency */\n  var node;          /* new node being created */\n\n  /* Construct the initial heap, with least frequent element in\n   * heap[SMALLEST]. The sons of heap[n] are heap[2*n] and heap[2*n+1].\n   * heap[0] is not used.\n   */\n  s.heap_len = 0;\n  s.heap_max = HEAP_SIZE;\n\n  for (n = 0; n < elems; n++) {\n    if (tree[n * 2]/*.Freq*/ !== 0) {\n      s.heap[++s.heap_len] = max_code = n;\n      s.depth[n] = 0;\n\n    } else {\n      tree[n * 2 + 1]/*.Len*/ = 0;\n    }\n  }\n\n  /* The pkzip format requires that at least one distance code exists,\n   * and that at least one bit should be sent even if there is only one\n   * possible code. So to avoid special checks later on we force at least\n   * two codes of non zero frequency.\n   */\n  while (s.heap_len < 2) {\n    node = s.heap[++s.heap_len] = (max_code < 2 ? ++max_code : 0);\n    tree[node * 2]/*.Freq*/ = 1;\n    s.depth[node] = 0;\n    s.opt_len--;\n\n    if (has_stree) {\n      s.static_len -= stree[node * 2 + 1]/*.Len*/;\n    }\n    /* node is 0 or 1 so it does not have extra bits */\n  }\n  desc.max_code = max_code;\n\n  /* The elements heap[heap_len/2+1 .. heap_len] are leaves of the tree,\n   * establish sub-heaps of increasing lengths:\n   */\n  for (n = (s.heap_len >> 1/*int /2*/); n >= 1; n--) { pqdownheap(s, tree, n); }\n\n  /* Construct the Huffman tree by repeatedly combining the least two\n   * frequent nodes.\n   */\n  node = elems;              /* next internal node of the tree */\n  do {\n    //pqremove(s, tree, n);  /* n = node of least frequency */\n    /*** pqremove ***/\n    n = s.heap[1/*SMALLEST*/];\n    s.heap[1/*SMALLEST*/] = s.heap[s.heap_len--];\n    pqdownheap(s, tree, 1/*SMALLEST*/);\n    /***/\n\n    m = s.heap[1/*SMALLEST*/]; /* m = node of next least frequency */\n\n    s.heap[--s.heap_max] = n; /* keep the nodes sorted by frequency */\n    s.heap[--s.heap_max] = m;\n\n    /* Create a new node father of n and m */\n    tree[node * 2]/*.Freq*/ = tree[n * 2]/*.Freq*/ + tree[m * 2]/*.Freq*/;\n    s.depth[node] = (s.depth[n] >= s.depth[m] ? s.depth[n] : s.depth[m]) + 1;\n    tree[n * 2 + 1]/*.Dad*/ = tree[m * 2 + 1]/*.Dad*/ = node;\n\n    /* and insert the new node in the heap */\n    s.heap[1/*SMALLEST*/] = node++;\n    pqdownheap(s, tree, 1/*SMALLEST*/);\n\n  } while (s.heap_len >= 2);\n\n  s.heap[--s.heap_max] = s.heap[1/*SMALLEST*/];\n\n  /* At this point, the fields freq and dad are set. We can now\n   * generate the bit lengths.\n   */\n  gen_bitlen(s, desc);\n\n  /* The field len is now set, we can generate the bit codes */\n  gen_codes(tree, max_code, s.bl_count);\n}\n\n\n/* ===========================================================================\n * Scan a literal or distance tree to determine the frequencies of the codes\n * in the bit length tree.\n */\nfunction scan_tree(s, tree, max_code)\n//    deflate_state *s;\n//    ct_data *tree;   /* the tree to be scanned */\n//    int max_code;    /* and its largest code of non zero frequency */\n{\n  var n;                     /* iterates over all tree elements */\n  var prevlen = -1;          /* last emitted length */\n  var curlen;                /* length of current code */\n\n  var nextlen = tree[0 * 2 + 1]/*.Len*/; /* length of next code */\n\n  var count = 0;             /* repeat count of the current code */\n  var max_count = 7;         /* max repeat count */\n  var min_count = 4;         /* min repeat count */\n\n  if (nextlen === 0) {\n    max_count = 138;\n    min_count = 3;\n  }\n  tree[(max_code + 1) * 2 + 1]/*.Len*/ = 0xffff; /* guard */\n\n  for (n = 0; n <= max_code; n++) {\n    curlen = nextlen;\n    nextlen = tree[(n + 1) * 2 + 1]/*.Len*/;\n\n    if (++count < max_count && curlen === nextlen) {\n      continue;\n\n    } else if (count < min_count) {\n      s.bl_tree[curlen * 2]/*.Freq*/ += count;\n\n    } else if (curlen !== 0) {\n\n      if (curlen !== prevlen) { s.bl_tree[curlen * 2]/*.Freq*/++; }\n      s.bl_tree[REP_3_6 * 2]/*.Freq*/++;\n\n    } else if (count <= 10) {\n      s.bl_tree[REPZ_3_10 * 2]/*.Freq*/++;\n\n    } else {\n      s.bl_tree[REPZ_11_138 * 2]/*.Freq*/++;\n    }\n\n    count = 0;\n    prevlen = curlen;\n\n    if (nextlen === 0) {\n      max_count = 138;\n      min_count = 3;\n\n    } else if (curlen === nextlen) {\n      max_count = 6;\n      min_count = 3;\n\n    } else {\n      max_count = 7;\n      min_count = 4;\n    }\n  }\n}\n\n\n/* ===========================================================================\n * Send a literal or distance tree in compressed form, using the codes in\n * bl_tree.\n */\nfunction send_tree(s, tree, max_code)\n//    deflate_state *s;\n//    ct_data *tree; /* the tree to be scanned */\n//    int max_code;       /* and its largest code of non zero frequency */\n{\n  var n;                     /* iterates over all tree elements */\n  var prevlen = -1;          /* last emitted length */\n  var curlen;                /* length of current code */\n\n  var nextlen = tree[0 * 2 + 1]/*.Len*/; /* length of next code */\n\n  var count = 0;             /* repeat count of the current code */\n  var max_count = 7;         /* max repeat count */\n  var min_count = 4;         /* min repeat count */\n\n  /* tree[max_code+1].Len = -1; */  /* guard already set */\n  if (nextlen === 0) {\n    max_count = 138;\n    min_count = 3;\n  }\n\n  for (n = 0; n <= max_code; n++) {\n    curlen = nextlen;\n    nextlen = tree[(n + 1) * 2 + 1]/*.Len*/;\n\n    if (++count < max_count && curlen === nextlen) {\n      continue;\n\n    } else if (count < min_count) {\n      do { send_code(s, curlen, s.bl_tree); } while (--count !== 0);\n\n    } else if (curlen !== 0) {\n      if (curlen !== prevlen) {\n        send_code(s, curlen, s.bl_tree);\n        count--;\n      }\n      //Assert(count >= 3 && count <= 6, \" 3_6?\");\n      send_code(s, REP_3_6, s.bl_tree);\n      send_bits(s, count - 3, 2);\n\n    } else if (count <= 10) {\n      send_code(s, REPZ_3_10, s.bl_tree);\n      send_bits(s, count - 3, 3);\n\n    } else {\n      send_code(s, REPZ_11_138, s.bl_tree);\n      send_bits(s, count - 11, 7);\n    }\n\n    count = 0;\n    prevlen = curlen;\n    if (nextlen === 0) {\n      max_count = 138;\n      min_count = 3;\n\n    } else if (curlen === nextlen) {\n      max_count = 6;\n      min_count = 3;\n\n    } else {\n      max_count = 7;\n      min_count = 4;\n    }\n  }\n}\n\n\n/* ===========================================================================\n * Construct the Huffman tree for the bit lengths and return the index in\n * bl_order of the last bit length code to send.\n */\nfunction build_bl_tree(s) {\n  var max_blindex;  /* index of last bit length code of non zero freq */\n\n  /* Determine the bit length frequencies for literal and distance trees */\n  scan_tree(s, s.dyn_ltree, s.l_desc.max_code);\n  scan_tree(s, s.dyn_dtree, s.d_desc.max_code);\n\n  /* Build the bit length tree: */\n  build_tree(s, s.bl_desc);\n  /* opt_len now includes the length of the tree representations, except\n   * the lengths of the bit lengths codes and the 5+5+4 bits for the counts.\n   */\n\n  /* Determine the number of bit length codes to send. The pkzip format\n   * requires that at least 4 bit length codes be sent. (appnote.txt says\n   * 3 but the actual value used is 4.)\n   */\n  for (max_blindex = BL_CODES - 1; max_blindex >= 3; max_blindex--) {\n    if (s.bl_tree[bl_order[max_blindex] * 2 + 1]/*.Len*/ !== 0) {\n      break;\n    }\n  }\n  /* Update opt_len to include the bit length tree and counts */\n  s.opt_len += 3 * (max_blindex + 1) + 5 + 5 + 4;\n  //Tracev((stderr, \"\\ndyn trees: dyn %ld, stat %ld\",\n  //        s->opt_len, s->static_len));\n\n  return max_blindex;\n}\n\n\n/* ===========================================================================\n * Send the header for a block using dynamic Huffman trees: the counts, the\n * lengths of the bit length codes, the literal tree and the distance tree.\n * IN assertion: lcodes >= 257, dcodes >= 1, blcodes >= 4.\n */\nfunction send_all_trees(s, lcodes, dcodes, blcodes)\n//    deflate_state *s;\n//    int lcodes, dcodes, blcodes; /* number of codes for each tree */\n{\n  var rank;                    /* index in bl_order */\n\n  //Assert (lcodes >= 257 && dcodes >= 1 && blcodes >= 4, \"not enough codes\");\n  //Assert (lcodes <= L_CODES && dcodes <= D_CODES && blcodes <= BL_CODES,\n  //        \"too many codes\");\n  //Tracev((stderr, \"\\nbl counts: \"));\n  send_bits(s, lcodes - 257, 5); /* not +255 as stated in appnote.txt */\n  send_bits(s, dcodes - 1,   5);\n  send_bits(s, blcodes - 4,  4); /* not -3 as stated in appnote.txt */\n  for (rank = 0; rank < blcodes; rank++) {\n    //Tracev((stderr, \"\\nbl code %2d \", bl_order[rank]));\n    send_bits(s, s.bl_tree[bl_order[rank] * 2 + 1]/*.Len*/, 3);\n  }\n  //Tracev((stderr, \"\\nbl tree: sent %ld\", s->bits_sent));\n\n  send_tree(s, s.dyn_ltree, lcodes - 1); /* literal tree */\n  //Tracev((stderr, \"\\nlit tree: sent %ld\", s->bits_sent));\n\n  send_tree(s, s.dyn_dtree, dcodes - 1); /* distance tree */\n  //Tracev((stderr, \"\\ndist tree: sent %ld\", s->bits_sent));\n}\n\n\n/* ===========================================================================\n * Check if the data type is TEXT or BINARY, using the following algorithm:\n * - TEXT if the two conditions below are satisfied:\n *    a) There are no non-portable control characters belonging to the\n *       \"black list\" (0..6, 14..25, 28..31).\n *    b) There is at least one printable character belonging to the\n *       \"white list\" (9 {TAB}, 10 {LF}, 13 {CR}, 32..255).\n * - BINARY otherwise.\n * - The following partially-portable control characters form a\n *   \"gray list\" that is ignored in this detection algorithm:\n *   (7 {BEL}, 8 {BS}, 11 {VT}, 12 {FF}, 26 {SUB}, 27 {ESC}).\n * IN assertion: the fields Freq of dyn_ltree are set.\n */\nfunction detect_data_type(s) {\n  /* black_mask is the bit mask of black-listed bytes\n   * set bits 0..6, 14..25, and 28..31\n   * 0xf3ffc07f = binary 11110011111111111100000001111111\n   */\n  var black_mask = 0xf3ffc07f;\n  var n;\n\n  /* Check for non-textual (\"black-listed\") bytes. */\n  for (n = 0; n <= 31; n++, black_mask >>>= 1) {\n    if ((black_mask & 1) && (s.dyn_ltree[n * 2]/*.Freq*/ !== 0)) {\n      return Z_BINARY;\n    }\n  }\n\n  /* Check for textual (\"white-listed\") bytes. */\n  if (s.dyn_ltree[9 * 2]/*.Freq*/ !== 0 || s.dyn_ltree[10 * 2]/*.Freq*/ !== 0 ||\n      s.dyn_ltree[13 * 2]/*.Freq*/ !== 0) {\n    return Z_TEXT;\n  }\n  for (n = 32; n < LITERALS; n++) {\n    if (s.dyn_ltree[n * 2]/*.Freq*/ !== 0) {\n      return Z_TEXT;\n    }\n  }\n\n  /* There are no \"black-listed\" or \"white-listed\" bytes:\n   * this stream either is empty or has tolerated (\"gray-listed\") bytes only.\n   */\n  return Z_BINARY;\n}\n\n\nvar static_init_done = false;\n\n/* ===========================================================================\n * Initialize the tree data structures for a new zlib stream.\n */\nfunction _tr_init(s)\n{\n\n  if (!static_init_done) {\n    tr_static_init();\n    static_init_done = true;\n  }\n\n  s.l_desc  = new TreeDesc(s.dyn_ltree, static_l_desc);\n  s.d_desc  = new TreeDesc(s.dyn_dtree, static_d_desc);\n  s.bl_desc = new TreeDesc(s.bl_tree, static_bl_desc);\n\n  s.bi_buf = 0;\n  s.bi_valid = 0;\n\n  /* Initialize the first block of the first file: */\n  init_block(s);\n}\n\n\n/* ===========================================================================\n * Send a stored block\n */\nfunction _tr_stored_block(s, buf, stored_len, last)\n//DeflateState *s;\n//charf *buf;       /* input block */\n//ulg stored_len;   /* length of input block */\n//int last;         /* one if this is the last block for a file */\n{\n  send_bits(s, (STORED_BLOCK << 1) + (last ? 1 : 0), 3);    /* send block type */\n  copy_block(s, buf, stored_len, true); /* with header */\n}\n\n\n/* ===========================================================================\n * Send one empty static block to give enough lookahead for inflate.\n * This takes 10 bits, of which 7 may remain in the bit buffer.\n */\nfunction _tr_align(s) {\n  send_bits(s, STATIC_TREES << 1, 3);\n  send_code(s, END_BLOCK, static_ltree);\n  bi_flush(s);\n}\n\n\n/* ===========================================================================\n * Determine the best encoding for the current block: dynamic trees, static\n * trees or store, and output the encoded block to the zip file.\n */\nfunction _tr_flush_block(s, buf, stored_len, last)\n//DeflateState *s;\n//charf *buf;       /* input block, or NULL if too old */\n//ulg stored_len;   /* length of input block */\n//int last;         /* one if this is the last block for a file */\n{\n  var opt_lenb, static_lenb;  /* opt_len and static_len in bytes */\n  var max_blindex = 0;        /* index of last bit length code of non zero freq */\n\n  /* Build the Huffman trees unless a stored block is forced */\n  if (s.level > 0) {\n\n    /* Check if the file is binary or text */\n    if (s.strm.data_type === Z_UNKNOWN) {\n      s.strm.data_type = detect_data_type(s);\n    }\n\n    /* Construct the literal and distance trees */\n    build_tree(s, s.l_desc);\n    // Tracev((stderr, \"\\nlit data: dyn %ld, stat %ld\", s->opt_len,\n    //        s->static_len));\n\n    build_tree(s, s.d_desc);\n    // Tracev((stderr, \"\\ndist data: dyn %ld, stat %ld\", s->opt_len,\n    //        s->static_len));\n    /* At this point, opt_len and static_len are the total bit lengths of\n     * the compressed block data, excluding the tree representations.\n     */\n\n    /* Build the bit length tree for the above two trees, and get the index\n     * in bl_order of the last bit length code to send.\n     */\n    max_blindex = build_bl_tree(s);\n\n    /* Determine the best encoding. Compute the block lengths in bytes. */\n    opt_lenb = (s.opt_len + 3 + 7) >>> 3;\n    static_lenb = (s.static_len + 3 + 7) >>> 3;\n\n    // Tracev((stderr, \"\\nopt %lu(%lu) stat %lu(%lu) stored %lu lit %u \",\n    //        opt_lenb, s->opt_len, static_lenb, s->static_len, stored_len,\n    //        s->last_lit));\n\n    if (static_lenb <= opt_lenb) { opt_lenb = static_lenb; }\n\n  } else {\n    // Assert(buf != (char*)0, \"lost buf\");\n    opt_lenb = static_lenb = stored_len + 5; /* force a stored block */\n  }\n\n  if ((stored_len + 4 <= opt_lenb) && (buf !== -1)) {\n    /* 4: two words for the lengths */\n\n    /* The test buf != NULL is only necessary if LIT_BUFSIZE > WSIZE.\n     * Otherwise we can't have processed more than WSIZE input bytes since\n     * the last block flush, because compression would have been\n     * successful. If LIT_BUFSIZE <= WSIZE, it is never too late to\n     * transform a block into a stored block.\n     */\n    _tr_stored_block(s, buf, stored_len, last);\n\n  } else if (s.strategy === Z_FIXED || static_lenb === opt_lenb) {\n\n    send_bits(s, (STATIC_TREES << 1) + (last ? 1 : 0), 3);\n    compress_block(s, static_ltree, static_dtree);\n\n  } else {\n    send_bits(s, (DYN_TREES << 1) + (last ? 1 : 0), 3);\n    send_all_trees(s, s.l_desc.max_code + 1, s.d_desc.max_code + 1, max_blindex + 1);\n    compress_block(s, s.dyn_ltree, s.dyn_dtree);\n  }\n  // Assert (s->compressed_len == s->bits_sent, \"bad compressed size\");\n  /* The above check is made mod 2^32, for files larger than 512 MB\n   * and uLong implemented on 32 bits.\n   */\n  init_block(s);\n\n  if (last) {\n    bi_windup(s);\n  }\n  // Tracev((stderr,\"\\ncomprlen %lu(%lu) \", s->compressed_len>>3,\n  //       s->compressed_len-7*last));\n}\n\n/* ===========================================================================\n * Save the match info and tally the frequency counts. Return true if\n * the current block must be flushed.\n */\nfunction _tr_tally(s, dist, lc)\n//    deflate_state *s;\n//    unsigned dist;  /* distance of matched string */\n//    unsigned lc;    /* match length-MIN_MATCH or unmatched char (if dist==0) */\n{\n  //var out_length, in_length, dcode;\n\n  s.pending_buf[s.d_buf + s.last_lit * 2]     = (dist >>> 8) & 0xff;\n  s.pending_buf[s.d_buf + s.last_lit * 2 + 1] = dist & 0xff;\n\n  s.pending_buf[s.l_buf + s.last_lit] = lc & 0xff;\n  s.last_lit++;\n\n  if (dist === 0) {\n    /* lc is the unmatched char */\n    s.dyn_ltree[lc * 2]/*.Freq*/++;\n  } else {\n    s.matches++;\n    /* Here, lc is the match length - MIN_MATCH */\n    dist--;             /* dist = match distance - 1 */\n    //Assert((ush)dist < (ush)MAX_DIST(s) &&\n    //       (ush)lc <= (ush)(MAX_MATCH-MIN_MATCH) &&\n    //       (ush)d_code(dist) < (ush)D_CODES,  \"_tr_tally: bad match\");\n\n    s.dyn_ltree[(_length_code[lc] + LITERALS + 1) * 2]/*.Freq*/++;\n    s.dyn_dtree[d_code(dist) * 2]/*.Freq*/++;\n  }\n\n// (!) This block is disabled in zlib defaults,\n// don't enable it for binary compatibility\n\n//#ifdef TRUNCATE_BLOCK\n//  /* Try to guess if it is profitable to stop the current block here */\n//  if ((s.last_lit & 0x1fff) === 0 && s.level > 2) {\n//    /* Compute an upper bound for the compressed length */\n//    out_length = s.last_lit*8;\n//    in_length = s.strstart - s.block_start;\n//\n//    for (dcode = 0; dcode < D_CODES; dcode++) {\n//      out_length += s.dyn_dtree[dcode*2]/*.Freq*/ * (5 + extra_dbits[dcode]);\n//    }\n//    out_length >>>= 3;\n//    //Tracev((stderr,\"\\nlast_lit %u, in %ld, out ~%ld(%ld%%) \",\n//    //       s->last_lit, in_length, out_length,\n//    //       100L - out_length*100L/in_length));\n//    if (s.matches < (s.last_lit>>1)/*int /2*/ && out_length < (in_length>>1)/*int /2*/) {\n//      return true;\n//    }\n//  }\n//#endif\n\n  return (s.last_lit === s.lit_bufsize - 1);\n  /* We avoid equality with lit_bufsize because of wraparound at 64K\n   * on 16 bit machines and because stored blocks are restricted to\n   * 64K-1 bytes.\n   */\n}\n\nexports._tr_init  = _tr_init;\nexports._tr_stored_block = _tr_stored_block;\nexports._tr_flush_block  = _tr_flush_block;\nexports._tr_tally = _tr_tally;\nexports._tr_align = _tr_align;\n\n};"],
"names":["shadow$provide","global","require","module","exports","zero","buf","len","length","StaticTreeDesc","static_tree","extra_bits","extra_base","elems","max_length","has_stree","TreeDesc","dyn_tree","stat_desc","max_code","put_short","s","w","pending_buf","pending","send_bits","value","bi_valid","Buf_size","bi_buf","send_code","c","tree","bi_reverse","code","res","gen_codes","bl_count","next_code","Array","bits","MAX_BITS","n","init_block","L_CODES","dyn_ltree","D_CODES","dyn_dtree","BL_CODES","bl_tree","opt_len","static_len","last_lit","matches","bi_windup","smaller","m","depth","_n2","_m2","pqdownheap","k","v","heap","j","heap_len","compress_block","ltree","dtree","lx","dist","d_buf","lc","l_buf","_length_code","LITERALS","extra","extra_lbits","base_length","_dist_code","extra_dbits","base_dist","END_BLOCK","build_tree","desc","stree","heap_max","HEAP_SIZE","node","base","overflow","h","xbits","f","scan_tree","prevlen","nextlen","count","max_count","min_count","curlen","send_tree","REP_3_6","REPZ_3_10","REPZ_11_138","detect_data_type","black_mask","Z_BINARY","Z_TEXT","_tr_stored_block","stored_len","last","utils","arraySet","window","extra_blbits","bl_order","static_ltree","static_dtree","DIST_CODE_LEN","LENGTH_CODES","static_l_desc","static_d_desc","static_bl_desc","static_init_done","_tr_init","MAX_BL_BITS","l_desc","d_desc","bl_desc","_tr_flush_block","max_blindex","level","Z_UNKNOWN","strm","data_type","opt_lenb","static_lenb","Z_FIXED","strategy","lcodes","dcodes","blcodes","rank","_tr_tally","lit_bufsize","_tr_align"]
}
