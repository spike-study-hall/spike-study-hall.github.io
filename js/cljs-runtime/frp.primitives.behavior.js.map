{"version":3,"sources":["frp/primitives/behavior.cljc"],"mappings":"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","names":["this__4385__auto__","k__4386__auto__","this__4387__auto__","k59904","else__4388__auto__","G__59917","cljs.core/Keyword","net-id","entity-id","cljs.core.get.cljs$core$IFn$_invoke$arity$3","__extmap","this__4404__auto__","f__4405__auto__","init__4406__auto__","cljs.core.reduce.cljs$core$IFn$_invoke$arity$3","ret__4407__auto__","p__59923","vec__59924","k__4408__auto__","cljs.core.nth.cljs$core$IFn$_invoke$arity$3","v__4409__auto__","this__4399__auto__","writer__4400__auto__","opts__4401__auto__","pr-pair__4402__auto__","keyval__4403__auto__","cljs.core/pr-sequential-writer","cljs.core.concat.cljs$core$IFn$_invoke$arity$2","cljs.core/PersistentVector","G__59903","cljs.core/RecordIter","cljs.core/-iterator","cljs.core/nil-iter","this__4383__auto__","__meta","this__4380__auto__","__hash","this__4389__auto__","cljs.core/count","this__4381__auto__","h__4243__auto__","fexpr__59927","coll__4382__auto__","cljs.core/hash-unordered-coll","this59905","other59906","cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2","this__4394__auto__","k__4395__auto__","cljs.core/contains?","cljs.core.dissoc.cljs$core$IFn$_invoke$arity$2","cljs.core/-with-meta","cljs.core.into.cljs$core$IFn$_invoke$arity$2","cljs.core/not-empty","this__4392__auto__","k__4393__auto__","pred__59932","cljs.core/keyword-identical?","expr__59933","G__59938","G__59939","G__59940","G__59941","cljs.core.assoc.cljs$core$IFn$_invoke$arity$3","this__4397__auto__","cljs.core/seq","cljs.core/MapEntry","cljs.core/PROTOCOL_SENTINEL","this__4384__auto__","this__4390__auto__","entry__4391__auto__","cljs.core/vector?","cljs.core._nth.cljs$core$IFn$_invoke$arity$2","cljs.core/-conj","frp.primitives.behavior/Behavior","this__4428__auto__","cljs.core/List","writer__4429__auto__","cljs.core/-write","G__59908","extmap__4424__auto__","G__59966","cljs.core.dissoc.cljs$core$IFn$_invoke$arity$variadic","cljs.core/record?","frp.primitives.behavior/->Behavior","frp.primitives.behavior/map->Behavior","_","frp.primitives.behavior/get-context","frp.primitives.net/universe-state","G__59954","G__59960","cljs.core/deref","fexpr__59953","G__59961","G__59962","cats.core/<*>","cljs.core.comp.cljs$core$IFn$_invoke$arity$2","cats.util/make-printable","frp.primitives.behavior/behavior**","f","cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$2","cljs.core.partial.cljs$core$IFn$_invoke$arity$3","com.rpl.specter/setval*","aid.core.curry.cljs$core$IFn$_invoke$arity$2","frp.primitives.behavior/behavior*","G__59967","G__59968","frp.primitives.net/get-id","frp.primitives.behavior/get-function","b","net","G__59970","fexpr__59969","frp.primitives.behavior/get-value","t","fexpr__59971","frp.primitives.behavior/get-universe-value","universe","fexpr__59972","frp.primitives.behavior/pure*","cljs.core/constantly","G__59973","G__59974","p1__59975#","frp.primitives.behavior/pure","frp.primitives.net/*net-id*","frp.primitives.behavior/join","G__59977","G__59978","p1__59976#","G__59980","fexpr__59979","G__59982","fexpr__59981","js/frp","js/frp.primitives","js/frp.primitives.behavior","js/frp.primitives.behavior.t_frp$primitives$behavior59985","frp.primitives.behavior/t_frp$primitives$behavior59985","_59987","meta59986","this__4374__auto__","writer__4375__auto__","opt__4376__auto__","frp.primitives.behavior/->t_frp$primitives$behavior59985","f!","fa","G__59988","G__59989","p1__59983#","G__59990","context*","a","fab","G__59997","G__59998","p1__59984#","G__60000","fexpr__59999","ma","cats.core/<$>","frp.primitives.behavior/stop","fexpr__60001","cljs.core/vals","cljs.core.apply.cljs$core$IFn$_invoke$arity$3","cljs.core/juxt","aid.core/nop","frp.primitives.behavior/rename-id","to","from","com.rpl.specter.impl/compiled-transform*","info__41236__auto__","frp.primitives.behavior/pathcache60008","info60009","com.rpl.specter.impl/magic-precompilation","com.rpl.specter.impl/->FnInvocation","com.rpl.specter.impl/->LocalSym","com.rpl.specter.impl/->VarUse","cljs.core/apply","com.rpl.specter/multi-path","cljs.core/map","com.rpl.specter/must","com.rpl.specter.impl/->SpecialFormUse","pred__60005","aid.core/call-pred","expr__60006","precompiled60010","com.rpl.specter.impl/cached-path-info-precompiled","dynamic?__41237__auto__","com.rpl.specter.impl/cached-path-info-dynamic?","G__60014","frp.primitives.event/event?","cljs.core.map.cljs$core$IFn$_invoke$arity$2","cljs.core.apply.cljs$core$IFn$_invoke$arity$2","cljs.core.partial.cljs$core$IFn$_invoke$arity$2","aid.core/flip","clojure.set/rename-keys","cljs.core/hash-map","frp.primitives.behavior/redef","cljs.core/swap!","frp.primitives.behavior/time","frp.primitives.net/initial-net-id","frp.primitives.behavior/registry","cljs.core.atom.cljs$core$IFn$_invoke$arity$1","frp.primitives.behavior/register!","fexpr__60015","com.rpl.specter/AFTER-ELEM","frp.primitives.behavior/start","cljs.core/reset!","frp.primitives.net/initial-universe","G__60016","G__60017","cljs.core/identity","cljs.core/run!","aid.core/funcall","frp.primitives.behavior/restart","cljs.core.juxt.cljs$core$IFn$_invoke$arity$2","frp.primitives.behavior/last-pred","default","pred","coll","cljs.core/reverse","cljs.core.drop_while.cljs$core$IFn$_invoke$arity$2","cljs.core/complement","cljs.core.take.cljs$core$IFn$_invoke$arity$2","cljs.core/cons","cljs.core/last","frp.primitives.behavior/get-stepper-value","e","fexpr__60018","frp.primitives.event/get-occs","frp.primitives.event/get-unit","cljs.core.comp.cljs$core$IFn$_invoke$arity$3","cljs.core/>","frp.tuple/fst","frp.tuple/snd","frp.primitives.behavior/stepper","G__60020","G__60021","p1__60019#"],"sourcesContent":["(ns frp.primitives.behavior\n  (:refer-clojure :exclude [stepper time])\n  (:require [clojure.set :as set]\n            [aid.core :as aid]\n            [cats.builtin]\n            [cats.core :as m]\n            [cats.protocols :as cats-protocols]\n            [cats.util :as util]\n            [com.rpl.specter :as s]\n            [frp.primitives.event :as event]\n            [frp.primitives.net :as net]\n            [frp.protocols :as entity-protocols]\n            [frp.tuple :as tuple])\n  #?(:clj (:import [clojure.lang IDeref])))\n\n(declare get-context)\n\n(defrecord Behavior\n  ;TODO rename id as behavior-id\n  [net-id entity-id]\n  cats-protocols/Contextual\n  (-get-context [_]\n    (get-context net-id))\n  entity-protocols/Entity\n  (-get-keyword [_]\n    :behavior)\n  IDeref\n  (#?(:clj  deref\n      :cljs -deref) [_]\n    (->> @net/universe-state\n         net-id\n         ((m/<*> (comp entity-id\n                       :function)\n                 :time))))\n  cats-protocols/Printable\n  (-repr [_]\n    (str \"#[behavior \" net-id \" \" entity-id \"]\")))\n\n(util/make-printable Behavior)\n\n(defn behavior**\n  [net-id entity-id f]\n  (swap! net/universe-state (partial s/setval* [net-id\n                                                :function\n                                                entity-id]\n                                     f))\n  (Behavior. net-id entity-id))\n\n(aid/defcurried behavior*\n  [net-id f]\n  (behavior** net-id\n              (->> @net/universe-state\n                   net-id\n                   :function\n                   net/get-id)\n              f))\n\n(defn get-function\n  [b net]\n  (->> net\n       :function\n       ((:entity-id b))))\n\n(defn get-value\n  [b t net]\n  ((get-function b net) t))\n\n(defn get-universe-value\n  [b t universe]\n  (->> universe\n       ((:net-id b))\n       (get-value b t)))\n\n(defn pure*\n  [net-id f]\n  (->> f\n       constantly\n       (behavior* net-id)))\n\n(def pure\n  #(pure* net/*net-id* %))\n\n(defn join\n  [b]\n  (behavior* (:net-id b)\n             #(-> b\n                  (get-value % ((:net-id b) @net/universe-state))\n                  (get-value % ((:net-id b) @net/universe-state)))))\n\n;Calling ap in -fapply is visibly slower.\n;(def context\n;  (helpers/reify-monad (fn [f fa]\n;                         (behavior* #(-> fa\n;                                         (get-value % @event/net-state)\n;                                         f)))\n;                       pure\n;                       (fn [f]\n;                         (behavior* #(-> f\n;                                         (get-value % @event/net-state)\n;                                         (get-value % @event/net-state))))))\n(defn get-context\n  [net-id]\n  (reify\n    entity-protocols/Entity\n    (-get-net-id [_]\n      net-id)\n    cats-protocols/Context\n    cats-protocols/Functor\n    (-fmap [_ f! fa]\n      (behavior* (:net-id fa)\n                 #(-> fa\n                      (get-universe-value % @net/universe-state)\n                      f!)))\n    cats-protocols/Applicative\n    (-pure [context* a]\n      (pure* (entity-protocols/-get-net-id context*) a))\n    (-fapply [_ fab fa]\n      (behavior* (:net-id fab)\n                 #((get-universe-value fab % @net/universe-state)\n                    (get-universe-value fa % @net/universe-state))))\n    cats-protocols/Monad\n    (-mreturn [context* a]\n      (cats-protocols/-pure context* a))\n    (-mbind [_ ma f!]\n      (join (m/<$> f! ma)))))\n\n(def stop\n  #((->> @net/universe-state\n         vals\n         :cancellations\n         (apply juxt aid/nop))))\n\n(aid/defcurried rename-id\n  [to from universe]\n  (s/transform [(:net-id to) (->> (aid/casep to\n                                    event/event? [:dependency\n                                                  :modifications\n                                                  :modified\n                                                  :occs]\n                                    [:function])\n                                  (map s/must)\n                                  (apply s/multi-path))]\n               (partial (aid/flip set/rename-keys)\n                        (apply hash-map (map :entity-id [from to])))\n               universe))\n\n(def redef\n  (comp (partial swap! net/universe-state)\n        rename-id))\n\n(def time\n  (Behavior. net/initial-net-id ::time))\n\n;TODO only use registry for debugging\n(def registry\n  (atom []))\n\n(def register!\n  (comp (partial swap! registry)\n        ((aid/curry 3 s/setval*) s/AFTER-ELEM)))\n\n(defn start\n  []\n  (reset! net/universe-state net/initial-universe)\n  (redef time\n         (behavior* net/initial-net-id identity))\n  (run! aid/funcall @registry))\n\n(def restart\n  (juxt stop\n        start))\n\n(defn last-pred\n  [default pred coll]\n  (->> coll\n       reverse\n       (drop-while (complement pred))\n       (take 1)\n       (cons default)\n       last))\n;last-pred can be O(log(n))\n;(defn get-middle\n;  [left right]\n;  (+ left (quot (- right left) 2)))\n;\n;(defn first-pred-index\n;  [pred left right coll]\n;  (if (= left right)\n;    left\n;    (if (->> (get-middle left right)\n;             (get coll)\n;             pred)\n;      (recur pred left (get-middle left right) coll)\n;      (recur pred (inc (get-middle left right)) right coll))))\n;\n;(defn last-pred\n;  [default pred coll]\n;  (nth coll\n;       (dec (first-pred-index (complement pred) 0 (count coll) coll))\n;       default))\n\n(defn get-stepper-value\n  [a e t universe]\n  (->> universe\n       ((:net-id e))\n       (event/get-occs (:entity-id e))\n       (last-pred (event/get-unit a) (comp (partial > @t)\n                                           deref\n                                           tuple/fst))\n       tuple/snd))\n\n(defn stepper\n  [a e]\n  (behavior* (:net-id e)\n             #(get-stepper-value a e % @net/universe-state)))\n\n(restart)\n"]}