{
"version":3,
"file":"module$node_modules$body_parser$lib$read.js",
"lineCount":5,
"mappings":"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",
"sources":["node_modules/body-parser/lib/read.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$body_parser$lib$read\"] = function(global,require,module,exports) {\n/*!\n * body-parser\n * Copyright(c) 2014-2015 Douglas Christopher Wilson\n * MIT Licensed\n */\n\n'use strict'\n\n/**\n * Module dependencies.\n * @private\n */\n\nvar createError = require('http-errors')\nvar getBody = require('raw-body')\nvar iconv = require('iconv-lite')\nvar onFinished = require('on-finished')\nvar zlib = require('zlib')\n\n/**\n * Module exports.\n */\n\nmodule.exports = read\n\n/**\n * Read a request into a buffer and parse.\n *\n * @param {object} req\n * @param {object} res\n * @param {function} next\n * @param {function} parse\n * @param {function} debug\n * @param {object} options\n * @private\n */\n\nfunction read (req, res, next, parse, debug, options) {\n  var length\n  var opts = options\n  var stream\n\n  // flag as parsed\n  req._body = true\n\n  // read options\n  var encoding = opts.encoding !== null\n    ? opts.encoding\n    : null\n  var verify = opts.verify\n\n  try {\n    // get the content stream\n    stream = contentstream(req, debug, opts.inflate)\n    length = stream.length\n    stream.length = undefined\n  } catch (err) {\n    return next(err)\n  }\n\n  // set raw-body options\n  opts.length = length\n  opts.encoding = verify\n    ? null\n    : encoding\n\n  // assert charset is supported\n  if (opts.encoding === null && encoding !== null && !iconv.encodingExists(encoding)) {\n    return next(createError(415, 'unsupported charset \"' + encoding.toUpperCase() + '\"', {\n      charset: encoding.toLowerCase(),\n      type: 'charset.unsupported'\n    }))\n  }\n\n  // read body\n  debug('read body')\n  getBody(stream, opts, function (error, body) {\n    if (error) {\n      var _error\n\n      if (error.type === 'encoding.unsupported') {\n        // echo back charset\n        _error = createError(415, 'unsupported charset \"' + encoding.toUpperCase() + '\"', {\n          charset: encoding.toLowerCase(),\n          type: 'charset.unsupported'\n        })\n      } else {\n        // set status code on error\n        _error = createError(400, error)\n      }\n\n      // read off entire request\n      stream.resume()\n      onFinished(req, function onfinished () {\n        next(createError(400, _error))\n      })\n      return\n    }\n\n    // verify\n    if (verify) {\n      try {\n        debug('verify body')\n        verify(req, res, body, encoding)\n      } catch (err) {\n        next(createError(403, err, {\n          body: body,\n          type: err.type || 'entity.verify.failed'\n        }))\n        return\n      }\n    }\n\n    // parse\n    var str = body\n    try {\n      debug('parse body')\n      str = typeof body !== 'string' && encoding !== null\n        ? iconv.decode(body, encoding)\n        : body\n      req.body = parse(str)\n    } catch (err) {\n      next(createError(400, err, {\n        body: str,\n        type: err.type || 'entity.parse.failed'\n      }))\n      return\n    }\n\n    next()\n  })\n}\n\n/**\n * Get the content stream of the request.\n *\n * @param {object} req\n * @param {function} debug\n * @param {boolean} [inflate=true]\n * @return {object}\n * @api private\n */\n\nfunction contentstream (req, debug, inflate) {\n  var encoding = (req.headers['content-encoding'] || 'identity').toLowerCase()\n  var length = req.headers['content-length']\n  var stream\n\n  debug('content-encoding \"%s\"', encoding)\n\n  if (inflate === false && encoding !== 'identity') {\n    throw createError(415, 'content encoding unsupported', {\n      encoding: encoding,\n      type: 'encoding.unsupported'\n    })\n  }\n\n  switch (encoding) {\n    case 'deflate':\n      stream = zlib.createInflate()\n      debug('inflate body')\n      req.pipe(stream)\n      break\n    case 'gzip':\n      stream = zlib.createGunzip()\n      debug('gunzip body')\n      req.pipe(stream)\n      break\n    case 'identity':\n      stream = req\n      stream.length = length\n      break\n    default:\n      throw createError(415, 'unsupported content encoding \"' + encoding + '\"', {\n        encoding: encoding,\n        type: 'encoding.unsupported'\n      })\n  }\n\n  return stream\n}\n\n};"],
"names":["shadow$provide","global","require","module","exports","contentstream","req","debug","inflate","encoding","toLowerCase","headers","length","createError","type","stream","zlib","createInflate","pipe","createGunzip","getBody","iconv","onFinished","read","res","next","parse","options","_body","verify","undefined","err","encodingExists","toUpperCase","charset","error","body","_error","resume","onfinished","str","decode"]
}
