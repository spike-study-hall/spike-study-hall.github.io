{
"version":3,
"file":"module$node_modules$finalhandler$index.js",
"lineCount":6,
"mappings":"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",
"sources":["node_modules/finalhandler/index.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$finalhandler$index\"] = function(global,require,module,exports) {\nvar process = require('process');\nvar Buffer = require('buffer').Buffer;\n/*!\n * finalhandler\n * Copyright(c) 2014-2017 Douglas Christopher Wilson\n * MIT Licensed\n */\n\n'use strict'\n\n/**\n * Module dependencies.\n * @private\n */\n\nvar debug = require('debug')('finalhandler')\nvar encodeUrl = require('encodeurl')\nvar escapeHtml = require('escape-html')\nvar onFinished = require('on-finished')\nvar parseUrl = require('parseurl')\nvar statuses = require('statuses')\nvar unpipe = require('unpipe')\n\n/**\n * Module variables.\n * @private\n */\n\nvar DOUBLE_SPACE_REGEXP = /\\x20{2}/g\nvar NEWLINE_REGEXP = /\\n/g\n\n/* istanbul ignore next */\nvar defer = typeof setImmediate === 'function'\n  ? setImmediate\n  : function (fn) { process.nextTick(fn.bind.apply(fn, arguments)) }\nvar isFinished = onFinished.isFinished\n\n/**\n * Create a minimal HTML document.\n *\n * @param {string} message\n * @private\n */\n\nfunction createHtmlDocument (message) {\n  var body = escapeHtml(message)\n    .replace(NEWLINE_REGEXP, '<br>')\n    .replace(DOUBLE_SPACE_REGEXP, ' &nbsp;')\n\n  return '<!DOCTYPE html>\\n' +\n    '<html lang=\"en\">\\n' +\n    '<head>\\n' +\n    '<meta charset=\"utf-8\">\\n' +\n    '<title>Error</title>\\n' +\n    '</head>\\n' +\n    '<body>\\n' +\n    '<pre>' + body + '</pre>\\n' +\n    '</body>\\n' +\n    '</html>\\n'\n}\n\n/**\n * Module exports.\n * @public\n */\n\nmodule.exports = finalhandler\n\n/**\n * Create a function to handle the final response.\n *\n * @param {Request} req\n * @param {Response} res\n * @param {Object} [options]\n * @return {Function}\n * @public\n */\n\nfunction finalhandler (req, res, options) {\n  var opts = options || {}\n\n  // get environment\n  var env = opts.env || process.env.NODE_ENV || 'development'\n\n  // get error callback\n  var onerror = opts.onerror\n\n  return function (err) {\n    var headers\n    var msg\n    var status\n\n    // ignore 404 on in-flight response\n    if (!err && headersSent(res)) {\n      debug('cannot 404 after headers sent')\n      return\n    }\n\n    // unhandled error\n    if (err) {\n      // respect status code from error\n      status = getErrorStatusCode(err)\n\n      if (status === undefined) {\n        // fallback to status code on response\n        status = getResponseStatusCode(res)\n      } else {\n        // respect headers from error\n        headers = getErrorHeaders(err)\n      }\n\n      // get error message\n      msg = getErrorMessage(err, status, env)\n    } else {\n      // not found\n      status = 404\n      msg = 'Cannot ' + req.method + ' ' + encodeUrl(getResourceName(req))\n    }\n\n    debug('default %s', status)\n\n    // schedule onerror callback\n    if (err && onerror) {\n      defer(onerror, err, req, res)\n    }\n\n    // cannot actually respond\n    if (headersSent(res)) {\n      debug('cannot %d after headers sent', status)\n      req.socket.destroy()\n      return\n    }\n\n    // send response\n    send(req, res, status, headers, msg)\n  }\n}\n\n/**\n * Get headers from Error object.\n *\n * @param {Error} err\n * @return {object}\n * @private\n */\n\nfunction getErrorHeaders (err) {\n  if (!err.headers || typeof err.headers !== 'object') {\n    return undefined\n  }\n\n  var headers = Object.create(null)\n  var keys = Object.keys(err.headers)\n\n  for (var i = 0; i < keys.length; i++) {\n    var key = keys[i]\n    headers[key] = err.headers[key]\n  }\n\n  return headers\n}\n\n/**\n * Get message from Error object, fallback to status message.\n *\n * @param {Error} err\n * @param {number} status\n * @param {string} env\n * @return {string}\n * @private\n */\n\nfunction getErrorMessage (err, status, env) {\n  var msg\n\n  if (env !== 'production') {\n    // use err.stack, which typically includes err.message\n    msg = err.stack\n\n    // fallback to err.toString() when possible\n    if (!msg && typeof err.toString === 'function') {\n      msg = err.toString()\n    }\n  }\n\n  return msg || statuses[status]\n}\n\n/**\n * Get status code from Error object.\n *\n * @param {Error} err\n * @return {number}\n * @private\n */\n\nfunction getErrorStatusCode (err) {\n  // check err.status\n  if (typeof err.status === 'number' && err.status >= 400 && err.status < 600) {\n    return err.status\n  }\n\n  // check err.statusCode\n  if (typeof err.statusCode === 'number' && err.statusCode >= 400 && err.statusCode < 600) {\n    return err.statusCode\n  }\n\n  return undefined\n}\n\n/**\n * Get resource name for the request.\n *\n * This is typically just the original pathname of the request\n * but will fallback to \"resource\" is that cannot be determined.\n *\n * @param {IncomingMessage} req\n * @return {string}\n * @private\n */\n\nfunction getResourceName (req) {\n  try {\n    return parseUrl.original(req).pathname\n  } catch (e) {\n    return 'resource'\n  }\n}\n\n/**\n * Get status code from response.\n *\n * @param {OutgoingMessage} res\n * @return {number}\n * @private\n */\n\nfunction getResponseStatusCode (res) {\n  var status = res.statusCode\n\n  // default status code to 500 if outside valid range\n  if (typeof status !== 'number' || status < 400 || status > 599) {\n    status = 500\n  }\n\n  return status\n}\n\n/**\n * Determine if the response headers have been sent.\n *\n * @param {object} res\n * @returns {boolean}\n * @private\n */\n\nfunction headersSent (res) {\n  return typeof res.headersSent !== 'boolean'\n    ? Boolean(res._header)\n    : res.headersSent\n}\n\n/**\n * Send response.\n *\n * @param {IncomingMessage} req\n * @param {OutgoingMessage} res\n * @param {number} status\n * @param {object} headers\n * @param {string} message\n * @private\n */\n\nfunction send (req, res, status, headers, message) {\n  function write () {\n    // response body\n    var body = createHtmlDocument(message)\n\n    // response status\n    res.statusCode = status\n    res.statusMessage = statuses[status]\n\n    // response headers\n    setHeaders(res, headers)\n\n    // security headers\n    res.setHeader('Content-Security-Policy', \"default-src 'none'\")\n    res.setHeader('X-Content-Type-Options', 'nosniff')\n\n    // standard headers\n    res.setHeader('Content-Type', 'text/html; charset=utf-8')\n    res.setHeader('Content-Length', Buffer.byteLength(body, 'utf8'))\n\n    if (req.method === 'HEAD') {\n      res.end()\n      return\n    }\n\n    res.end(body, 'utf8')\n  }\n\n  if (isFinished(req)) {\n    write()\n    return\n  }\n\n  // unpipe everything from the request\n  unpipe(req)\n\n  // flush the request\n  onFinished(req, write)\n  req.resume()\n}\n\n/**\n * Set response headers from an object.\n *\n * @param {OutgoingMessage} res\n * @param {object} headers\n * @private\n */\n\nfunction setHeaders (res, headers) {\n  if (!headers) {\n    return\n  }\n\n  var keys = Object.keys(headers)\n  for (var i = 0; i < keys.length; i++) {\n    var key = keys[i]\n    res.setHeader(key, headers[key])\n  }\n}\n\n};"],
"names":["shadow$provide","global","require","module","exports","headersSent","res","_header","send","req","status","headers","message","write","escapeHtml","replace","NEWLINE_REGEXP","body","DOUBLE_SPACE_REGEXP","statusCode","statusMessage","statuses","keys","Object","i","length","key","setHeader","Buffer","byteLength","method","end","isFinished","unpipe","onFinished","resume","process","debug","encodeUrl","parseUrl","defer","setImmediate","fn","nextTick","bind","apply","arguments","finalhandler","options","opts","env","NODE_ENV","onerror","err","msg","undefined","create","stack","toString","original","pathname","e","socket","destroy"]
}
