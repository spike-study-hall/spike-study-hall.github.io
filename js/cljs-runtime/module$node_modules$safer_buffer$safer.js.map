{
"version":3,
"file":"module$node_modules$safer_buffer$safer.js",
"lineCount":4,
"mappings":"AAAAA,cAAA,uCAAA,CAA2D,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CAC/FC,MAAAA,CAAUH,OAAA,CAAQ,qCAAR,CAGd,aAEII,QAAAA,CAASJ,OAAA,CAAQ,kCAAR,CACb,KAAIK,OAASD,OAAAC,OAETC,QAAAA,CAAQ,EAIZ,KAFAC,IAAIA,GAEJ,GAAYH,QAAZ,CACOA,OAAAI,eAAA,CAAsBD,GAAtB,CAAL,EACY,YADZ,GACIA,GADJ,EACoC,QADpC,GAC4BA,GAD5B,GAEAD,OAAA,CAAMC,GAAN,CAFA,CAEaH,OAAA,CAAOG,GAAP,CAFb,CAKEE,QAAAA,CAAQH,OAAAD,OAARI,CAAuB,EAC3B,KAAKF,GAAL,GAAYF,OAAZ,CACOA,MAAAG,eAAA,CAAsBD,GAAtB,CAAL,EACY,aADZ,GACIA,GADJ,EACqC,iBADrC,GAC6BA,GAD7B,GAEAE,OAAA,CAAMF,GAAN,CAFA,CAEaF,MAAA,CAAOE,GAAP,CAFb,CAKFD;OAAAD,OAAAK,UAAA,CAAyBL,MAAAK,UAEpBD,QAAAE,KAAL,EAAmBF,OAAAE,KAAnB,GAAkCC,UAAAD,KAAlC,GACEF,OAAAE,KADF,CACeE,QAAS,CAACC,KAAD,CAAQC,gBAAR,CAA0BC,MAA1B,CAAkC,CACtD,GAAqB,QAArB,GAAI,MAAOF,MAAX,CACE,KAAM,KAAIG,SAAJ,CAAc,iEAAd,CAAkF,MAAOH,MAAzF,CAAN,CAEF,GAAIA,KAAJ,EAAqC,WAArC,GAAa,MAAOA,MAAAE,OAApB,CACE,KAAM,KAAIC,SAAJ,CAAc,iHAAd,CAAkI,MAAOH,MAAzI,CAAN,CAEF,MAAOT,OAAA,CAAOS,KAAP,CAAcC,gBAAd,CAAgCC,MAAhC,CAP+C,CAD1D,CAYKP;OAAAS,MAAL,GACET,OAAAS,MADF,CACgBC,QAAS,CAACC,IAAD,CAAOC,IAAP,CAAaC,QAAb,CAAuB,CAC5C,GAAoB,QAApB,GAAI,MAAOF,KAAX,CACE,KAAM,KAAIH,SAAJ,CAAc,4DAAd,CAA6E,MAAOG,KAApF,CAAN,CAEF,GAAW,CAAX,CAAIA,IAAJ,EAAwB,UAAxB,EAAgBA,IAAhB,CACE,KAAM,KAAIG,UAAJ,CAAe,aAAf,CAA+BH,IAA/B,CAAsC,gCAAtC,CAAN,CAEEI,IAAAA,CAAMnB,MAAA,CAAOe,IAAP,CACLC,KAAL,EAA6B,CAA7B,GAAaA,IAAAL,OAAb,CAE+B,QAAxB,GAAI,MAAOM,SAAX,CACLE,IAAAH,KAAA,CAASA,IAAT,CAAeC,QAAf,CADK,CAGLE,IAAAH,KAAA,CAASA,IAAT,CALF,CACEG,IAAAH,KAAA,CAAS,CAAT,CAMF,OAAOG,KAfqC,CADhD,CAoBA,IAAI,CAAClB,OAAAmB,iBAAL,CACE,GAAI,CACFnB,OAAAmB,iBAAA,CAAyBtB,MAAAuB,QAAA,CAAgB,QAAhB,CAAAD,iBADvB,CAEF,MAAOE,CAAP,CAAU,EAMTrB,OAAAsB,UAAL;CACEtB,OAAAsB,UAGA,CAHkB,CAChBC,WAAYvB,OAAAwB,WADI,CAGlB,CAAIxB,OAAAmB,iBAAJ,GACEnB,OAAAsB,UAAAG,kBADF,CACsCzB,OAAAmB,iBADtC,CAJF,CASAxB,OAAAC,QAAA,CAAiBI,OA9EkF;",
"sources":["node_modules/safer-buffer/safer.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$safer_buffer$safer\"] = function(global,require,module,exports) {\nvar process = require('process');\n/* eslint-disable node/no-deprecated-api */\n\n'use strict'\n\nvar buffer = require('buffer')\nvar Buffer = buffer.Buffer\n\nvar safer = {}\n\nvar key\n\nfor (key in buffer) {\n  if (!buffer.hasOwnProperty(key)) continue\n  if (key === 'SlowBuffer' || key === 'Buffer') continue\n  safer[key] = buffer[key]\n}\n\nvar Safer = safer.Buffer = {}\nfor (key in Buffer) {\n  if (!Buffer.hasOwnProperty(key)) continue\n  if (key === 'allocUnsafe' || key === 'allocUnsafeSlow') continue\n  Safer[key] = Buffer[key]\n}\n\nsafer.Buffer.prototype = Buffer.prototype\n\nif (!Safer.from || Safer.from === Uint8Array.from) {\n  Safer.from = function (value, encodingOrOffset, length) {\n    if (typeof value === 'number') {\n      throw new TypeError('The \"value\" argument must not be of type number. Received type ' + typeof value)\n    }\n    if (value && typeof value.length === 'undefined') {\n      throw new TypeError('The first argument must be one of type string, Buffer, ArrayBuffer, Array, or Array-like Object. Received type ' + typeof value)\n    }\n    return Buffer(value, encodingOrOffset, length)\n  }\n}\n\nif (!Safer.alloc) {\n  Safer.alloc = function (size, fill, encoding) {\n    if (typeof size !== 'number') {\n      throw new TypeError('The \"size\" argument must be of type number. Received type ' + typeof size)\n    }\n    if (size < 0 || size >= 2 * (1 << 30)) {\n      throw new RangeError('The value \"' + size + '\" is invalid for option \"size\"')\n    }\n    var buf = Buffer(size)\n    if (!fill || fill.length === 0) {\n      buf.fill(0)\n    } else if (typeof encoding === 'string') {\n      buf.fill(fill, encoding)\n    } else {\n      buf.fill(fill)\n    }\n    return buf\n  }\n}\n\nif (!safer.kStringMaxLength) {\n  try {\n    safer.kStringMaxLength = process.binding('buffer').kStringMaxLength\n  } catch (e) {\n    // we can't determine kStringMaxLength in environments where process.binding\n    // is unsupported, so let's not set it\n  }\n}\n\nif (!safer.constants) {\n  safer.constants = {\n    MAX_LENGTH: safer.kMaxLength\n  }\n  if (safer.kStringMaxLength) {\n    safer.constants.MAX_STRING_LENGTH = safer.kStringMaxLength\n  }\n}\n\nmodule.exports = safer\n\n};"],
"names":["shadow$provide","global","require","module","exports","process","buffer","Buffer","safer","key","hasOwnProperty","Safer","prototype","from","Uint8Array","Safer.from","value","encodingOrOffset","length","TypeError","alloc","Safer.alloc","size","fill","encoding","RangeError","buf","kStringMaxLength","binding","e","constants","MAX_LENGTH","kMaxLength","MAX_STRING_LENGTH"]
}
