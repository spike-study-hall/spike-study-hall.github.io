shadow$provide.module$node_modules$safer_buffer$safer=function(global,require,module,exports){global=require("module$node_modules$process$browser");"use strict";exports=require("module$node_modules$buffer$index");var Buffer=exports.Buffer;require={};for(var key in exports)exports.hasOwnProperty(key)&&"SlowBuffer"!==key&&"Buffer"!==key&&(require[key]=exports[key]);exports=require.Buffer={};for(key in Buffer)Buffer.hasOwnProperty(key)&&"allocUnsafe"!==key&&"allocUnsafeSlow"!==key&&(exports[key]=Buffer[key]);
require.Buffer.prototype=Buffer.prototype;exports.from&&exports.from!==Uint8Array.from||(exports.from=function(value,encodingOrOffset,length){if("number"===typeof value)throw new TypeError('The "value" argument must not be of type number. Received type '+typeof value);if(value&&"undefined"===typeof value.length)throw new TypeError("The first argument must be one of type string, Buffer, ArrayBuffer, Array, or Array-like Object. Received type "+typeof value);return Buffer(value,encodingOrOffset,length)});
exports.alloc||(exports.alloc=function(size,fill,encoding){if("number"!==typeof size)throw new TypeError('The "size" argument must be of type number. Received type '+typeof size);if(0>size||2147483648<=size)throw new RangeError('The value "'+size+'" is invalid for option "size"');size=Buffer(size);fill&&0!==fill.length?"string"===typeof encoding?size.fill(fill,encoding):size.fill(fill):size.fill(0);return size});if(!require.kStringMaxLength)try{require.kStringMaxLength=global.binding("buffer").kStringMaxLength}catch(e){}require.constants||
(require.constants={MAX_LENGTH:require.kMaxLength},require.kStringMaxLength&&(require.constants.MAX_STRING_LENGTH=require.kStringMaxLength));module.exports=require}
//# sourceMappingURL=module$node_modules$safer_buffer$safer.js.map
