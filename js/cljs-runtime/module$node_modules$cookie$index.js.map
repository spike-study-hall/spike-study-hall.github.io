{
"version":3,
"file":"module$node_modules$cookie$index.js",
"lineCount":5,
"mappings":"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",
"sources":["node_modules/cookie/index.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$cookie$index\"] = function(global,require,module,exports) {\n/*!\n * cookie\n * Copyright(c) 2012-2014 Roman Shtylman\n * Copyright(c) 2015 Douglas Christopher Wilson\n * MIT Licensed\n */\n\n'use strict';\n\n/**\n * Module exports.\n * @public\n */\n\nexports.parse = parse;\nexports.serialize = serialize;\n\n/**\n * Module variables.\n * @private\n */\n\nvar decode = decodeURIComponent;\nvar encode = encodeURIComponent;\nvar pairSplitRegExp = /; */;\n\n/**\n * RegExp to match field-content in RFC 7230 sec 3.2\n *\n * field-content = field-vchar [ 1*( SP / HTAB ) field-vchar ]\n * field-vchar   = VCHAR / obs-text\n * obs-text      = %x80-FF\n */\n\nvar fieldContentRegExp = /^[\\u0009\\u0020-\\u007e\\u0080-\\u00ff]+$/;\n\n/**\n * Parse a cookie header.\n *\n * Parse the given cookie header string into an object\n * The object has the various cookies as keys(names) => values\n *\n * @param {string} str\n * @param {object} [options]\n * @return {object}\n * @public\n */\n\nfunction parse(str, options) {\n  if (typeof str !== 'string') {\n    throw new TypeError('argument str must be a string');\n  }\n\n  var obj = {}\n  var opt = options || {};\n  var pairs = str.split(pairSplitRegExp);\n  var dec = opt.decode || decode;\n\n  for (var i = 0; i < pairs.length; i++) {\n    var pair = pairs[i];\n    var eq_idx = pair.indexOf('=');\n\n    // skip things that don't look like key=value\n    if (eq_idx < 0) {\n      continue;\n    }\n\n    var key = pair.substr(0, eq_idx).trim()\n    var val = pair.substr(++eq_idx, pair.length).trim();\n\n    // quoted values\n    if ('\"' == val[0]) {\n      val = val.slice(1, -1);\n    }\n\n    // only assign once\n    if (undefined == obj[key]) {\n      obj[key] = tryDecode(val, dec);\n    }\n  }\n\n  return obj;\n}\n\n/**\n * Serialize data into a cookie header.\n *\n * Serialize the a name value pair into a cookie string suitable for\n * http headers. An optional options object specified cookie parameters.\n *\n * serialize('foo', 'bar', { httpOnly: true })\n *   => \"foo=bar; httpOnly\"\n *\n * @param {string} name\n * @param {string} val\n * @param {object} [options]\n * @return {string}\n * @public\n */\n\nfunction serialize(name, val, options) {\n  var opt = options || {};\n  var enc = opt.encode || encode;\n\n  if (typeof enc !== 'function') {\n    throw new TypeError('option encode is invalid');\n  }\n\n  if (!fieldContentRegExp.test(name)) {\n    throw new TypeError('argument name is invalid');\n  }\n\n  var value = enc(val);\n\n  if (value && !fieldContentRegExp.test(value)) {\n    throw new TypeError('argument val is invalid');\n  }\n\n  var str = name + '=' + value;\n\n  if (null != opt.maxAge) {\n    var maxAge = opt.maxAge - 0;\n    if (isNaN(maxAge)) throw new Error('maxAge should be a Number');\n    str += '; Max-Age=' + Math.floor(maxAge);\n  }\n\n  if (opt.domain) {\n    if (!fieldContentRegExp.test(opt.domain)) {\n      throw new TypeError('option domain is invalid');\n    }\n\n    str += '; Domain=' + opt.domain;\n  }\n\n  if (opt.path) {\n    if (!fieldContentRegExp.test(opt.path)) {\n      throw new TypeError('option path is invalid');\n    }\n\n    str += '; Path=' + opt.path;\n  }\n\n  if (opt.expires) {\n    if (typeof opt.expires.toUTCString !== 'function') {\n      throw new TypeError('option expires is invalid');\n    }\n\n    str += '; Expires=' + opt.expires.toUTCString();\n  }\n\n  if (opt.httpOnly) {\n    str += '; HttpOnly';\n  }\n\n  if (opt.secure) {\n    str += '; Secure';\n  }\n\n  if (opt.sameSite) {\n    var sameSite = typeof opt.sameSite === 'string'\n      ? opt.sameSite.toLowerCase() : opt.sameSite;\n\n    switch (sameSite) {\n      case true:\n        str += '; SameSite=Strict';\n        break;\n      case 'lax':\n        str += '; SameSite=Lax';\n        break;\n      case 'strict':\n        str += '; SameSite=Strict';\n        break;\n      case 'none':\n        str += '; SameSite=None';\n        break;\n      default:\n        throw new TypeError('option sameSite is invalid');\n    }\n  }\n\n  return str;\n}\n\n/**\n * Try decoding a string using a decoding function.\n *\n * @param {string} str\n * @param {function} decode\n * @private\n */\n\nfunction tryDecode(str, decode) {\n  try {\n    return decode(str);\n  } catch (e) {\n    return str;\n  }\n}\n\n};"],
"names":["shadow$provide","global","require","module","exports","parse","str","options","TypeError","obj","opt","pairs","split","pairSplitRegExp","dec","decode","i","length","pair","eq_idx","indexOf","key","substr","trim","val","slice","undefined","e","serialize","name","enc","encode","fieldContentRegExp","test","value","maxAge","isNaN","Error","Math","floor","domain","path","expires","toUTCString","httpOnly","secure","sameSite","toLowerCase","decodeURIComponent","encodeURIComponent"]
}
