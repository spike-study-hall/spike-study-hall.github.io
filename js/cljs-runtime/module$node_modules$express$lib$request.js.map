{
"version":3,
"file":"module$node_modules$express$lib$request.js",
"lineCount":9,
"mappings":"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",
"sources":["node_modules/express/lib/request.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$express$lib$request\"] = function(global,require,module,exports) {\n/*!\n * express\n * Copyright(c) 2009-2013 TJ Holowaychuk\n * Copyright(c) 2013 Roman Shtylman\n * Copyright(c) 2014-2015 Douglas Christopher Wilson\n * MIT Licensed\n */\n\n'use strict';\n\n/**\n * Module dependencies.\n * @private\n */\n\nvar accepts = require('accepts');\nvar deprecate = require('depd')('express');\nvar isIP = require('net').isIP;\nvar typeis = require('type-is');\nvar http = require('http');\nvar fresh = require('fresh');\nvar parseRange = require('range-parser');\nvar parse = require('parseurl');\nvar proxyaddr = require('proxy-addr');\n\n/**\n * Request prototype.\n * @public\n */\n\nvar req = Object.create(http.IncomingMessage.prototype)\n\n/**\n * Module exports.\n * @public\n */\n\nmodule.exports = req\n\n/**\n * Return request header.\n *\n * The `Referrer` header field is special-cased,\n * both `Referrer` and `Referer` are interchangeable.\n *\n * Examples:\n *\n *     req.get('Content-Type');\n *     // => \"text/plain\"\n *\n *     req.get('content-type');\n *     // => \"text/plain\"\n *\n *     req.get('Something');\n *     // => undefined\n *\n * Aliased as `req.header()`.\n *\n * @param {String} name\n * @return {String}\n * @public\n */\n\nreq.get =\nreq.header = function header(name) {\n  if (!name) {\n    throw new TypeError('name argument is required to req.get');\n  }\n\n  if (typeof name !== 'string') {\n    throw new TypeError('name must be a string to req.get');\n  }\n\n  var lc = name.toLowerCase();\n\n  switch (lc) {\n    case 'referer':\n    case 'referrer':\n      return this.headers.referrer\n        || this.headers.referer;\n    default:\n      return this.headers[lc];\n  }\n};\n\n/**\n * To do: update docs.\n *\n * Check if the given `type(s)` is acceptable, returning\n * the best match when true, otherwise `undefined`, in which\n * case you should respond with 406 \"Not Acceptable\".\n *\n * The `type` value may be a single MIME type string\n * such as \"application/json\", an extension name\n * such as \"json\", a comma-delimited list such as \"json, html, text/plain\",\n * an argument list such as `\"json\", \"html\", \"text/plain\"`,\n * or an array `[\"json\", \"html\", \"text/plain\"]`. When a list\n * or array is given, the _best_ match, if any is returned.\n *\n * Examples:\n *\n *     // Accept: text/html\n *     req.accepts('html');\n *     // => \"html\"\n *\n *     // Accept: text/*, application/json\n *     req.accepts('html');\n *     // => \"html\"\n *     req.accepts('text/html');\n *     // => \"text/html\"\n *     req.accepts('json, text');\n *     // => \"json\"\n *     req.accepts('application/json');\n *     // => \"application/json\"\n *\n *     // Accept: text/*, application/json\n *     req.accepts('image/png');\n *     req.accepts('png');\n *     // => undefined\n *\n *     // Accept: text/*;q=.5, application/json\n *     req.accepts(['html', 'json']);\n *     req.accepts('html', 'json');\n *     req.accepts('html, json');\n *     // => \"json\"\n *\n * @param {String|Array} type(s)\n * @return {String|Array|Boolean}\n * @public\n */\n\nreq.accepts = function(){\n  var accept = accepts(this);\n  return accept.types.apply(accept, arguments);\n};\n\n/**\n * Check if the given `encoding`s are accepted.\n *\n * @param {String} ...encoding\n * @return {String|Array}\n * @public\n */\n\nreq.acceptsEncodings = function(){\n  var accept = accepts(this);\n  return accept.encodings.apply(accept, arguments);\n};\n\nreq.acceptsEncoding = deprecate.function(req.acceptsEncodings,\n  'req.acceptsEncoding: Use acceptsEncodings instead');\n\n/**\n * Check if the given `charset`s are acceptable,\n * otherwise you should respond with 406 \"Not Acceptable\".\n *\n * @param {String} ...charset\n * @return {String|Array}\n * @public\n */\n\nreq.acceptsCharsets = function(){\n  var accept = accepts(this);\n  return accept.charsets.apply(accept, arguments);\n};\n\nreq.acceptsCharset = deprecate.function(req.acceptsCharsets,\n  'req.acceptsCharset: Use acceptsCharsets instead');\n\n/**\n * Check if the given `lang`s are acceptable,\n * otherwise you should respond with 406 \"Not Acceptable\".\n *\n * @param {String} ...lang\n * @return {String|Array}\n * @public\n */\n\nreq.acceptsLanguages = function(){\n  var accept = accepts(this);\n  return accept.languages.apply(accept, arguments);\n};\n\nreq.acceptsLanguage = deprecate.function(req.acceptsLanguages,\n  'req.acceptsLanguage: Use acceptsLanguages instead');\n\n/**\n * Parse Range header field, capping to the given `size`.\n *\n * Unspecified ranges such as \"0-\" require knowledge of your resource length. In\n * the case of a byte range this is of course the total number of bytes. If the\n * Range header field is not given `undefined` is returned, `-1` when unsatisfiable,\n * and `-2` when syntactically invalid.\n *\n * When ranges are returned, the array has a \"type\" property which is the type of\n * range that is required (most commonly, \"bytes\"). Each array element is an object\n * with a \"start\" and \"end\" property for the portion of the range.\n *\n * The \"combine\" option can be set to `true` and overlapping & adjacent ranges\n * will be combined into a single range.\n *\n * NOTE: remember that ranges are inclusive, so for example \"Range: users=0-3\"\n * should respond with 4 users when available, not 3.\n *\n * @param {number} size\n * @param {object} [options]\n * @param {boolean} [options.combine=false]\n * @return {number|array}\n * @public\n */\n\nreq.range = function range(size, options) {\n  var range = this.get('Range');\n  if (!range) return;\n  return parseRange(size, range, options);\n};\n\n/**\n * Return the value of param `name` when present or `defaultValue`.\n *\n *  - Checks route placeholders, ex: _/user/:id_\n *  - Checks body params, ex: id=12, {\"id\":12}\n *  - Checks query string params, ex: ?id=12\n *\n * To utilize request bodies, `req.body`\n * should be an object. This can be done by using\n * the `bodyParser()` middleware.\n *\n * @param {String} name\n * @param {Mixed} [defaultValue]\n * @return {String}\n * @public\n */\n\nreq.param = function param(name, defaultValue) {\n  var params = this.params || {};\n  var body = this.body || {};\n  var query = this.query || {};\n\n  var args = arguments.length === 1\n    ? 'name'\n    : 'name, default';\n  deprecate('req.param(' + args + '): Use req.params, req.body, or req.query instead');\n\n  if (null != params[name] && params.hasOwnProperty(name)) return params[name];\n  if (null != body[name]) return body[name];\n  if (null != query[name]) return query[name];\n\n  return defaultValue;\n};\n\n/**\n * Check if the incoming request contains the \"Content-Type\"\n * header field, and it contains the give mime `type`.\n *\n * Examples:\n *\n *      // With Content-Type: text/html; charset=utf-8\n *      req.is('html');\n *      req.is('text/html');\n *      req.is('text/*');\n *      // => true\n *\n *      // When Content-Type is application/json\n *      req.is('json');\n *      req.is('application/json');\n *      req.is('application/*');\n *      // => true\n *\n *      req.is('html');\n *      // => false\n *\n * @param {String|Array} types...\n * @return {String|false|null}\n * @public\n */\n\nreq.is = function is(types) {\n  var arr = types;\n\n  // support flattened arguments\n  if (!Array.isArray(types)) {\n    arr = new Array(arguments.length);\n    for (var i = 0; i < arr.length; i++) {\n      arr[i] = arguments[i];\n    }\n  }\n\n  return typeis(this, arr);\n};\n\n/**\n * Return the protocol string \"http\" or \"https\"\n * when requested with TLS. When the \"trust proxy\"\n * setting trusts the socket address, the\n * \"X-Forwarded-Proto\" header field will be trusted\n * and used if present.\n *\n * If you're running behind a reverse proxy that\n * supplies https for you this may be enabled.\n *\n * @return {String}\n * @public\n */\n\ndefineGetter(req, 'protocol', function protocol(){\n  var proto = this.connection.encrypted\n    ? 'https'\n    : 'http';\n  var trust = this.app.get('trust proxy fn');\n\n  if (!trust(this.connection.remoteAddress, 0)) {\n    return proto;\n  }\n\n  // Note: X-Forwarded-Proto is normally only ever a\n  //       single value, but this is to be safe.\n  var header = this.get('X-Forwarded-Proto') || proto\n  var index = header.indexOf(',')\n\n  return index !== -1\n    ? header.substring(0, index).trim()\n    : header.trim()\n});\n\n/**\n * Short-hand for:\n *\n *    req.protocol === 'https'\n *\n * @return {Boolean}\n * @public\n */\n\ndefineGetter(req, 'secure', function secure(){\n  return this.protocol === 'https';\n});\n\n/**\n * Return the remote address from the trusted proxy.\n *\n * The is the remote address on the socket unless\n * \"trust proxy\" is set.\n *\n * @return {String}\n * @public\n */\n\ndefineGetter(req, 'ip', function ip(){\n  var trust = this.app.get('trust proxy fn');\n  return proxyaddr(this, trust);\n});\n\n/**\n * When \"trust proxy\" is set, trusted proxy addresses + client.\n *\n * For example if the value were \"client, proxy1, proxy2\"\n * you would receive the array `[\"client\", \"proxy1\", \"proxy2\"]`\n * where \"proxy2\" is the furthest down-stream and \"proxy1\" and\n * \"proxy2\" were trusted.\n *\n * @return {Array}\n * @public\n */\n\ndefineGetter(req, 'ips', function ips() {\n  var trust = this.app.get('trust proxy fn');\n  var addrs = proxyaddr.all(this, trust);\n\n  // reverse the order (to farthest -> closest)\n  // and remove socket address\n  addrs.reverse().pop()\n\n  return addrs\n});\n\n/**\n * Return subdomains as an array.\n *\n * Subdomains are the dot-separated parts of the host before the main domain of\n * the app. By default, the domain of the app is assumed to be the last two\n * parts of the host. This can be changed by setting \"subdomain offset\".\n *\n * For example, if the domain is \"tobi.ferrets.example.com\":\n * If \"subdomain offset\" is not set, req.subdomains is `[\"ferrets\", \"tobi\"]`.\n * If \"subdomain offset\" is 3, req.subdomains is `[\"tobi\"]`.\n *\n * @return {Array}\n * @public\n */\n\ndefineGetter(req, 'subdomains', function subdomains() {\n  var hostname = this.hostname;\n\n  if (!hostname) return [];\n\n  var offset = this.app.get('subdomain offset');\n  var subdomains = !isIP(hostname)\n    ? hostname.split('.').reverse()\n    : [hostname];\n\n  return subdomains.slice(offset);\n});\n\n/**\n * Short-hand for `url.parse(req.url).pathname`.\n *\n * @return {String}\n * @public\n */\n\ndefineGetter(req, 'path', function path() {\n  return parse(this).pathname;\n});\n\n/**\n * Parse the \"Host\" header field to a hostname.\n *\n * When the \"trust proxy\" setting trusts the socket\n * address, the \"X-Forwarded-Host\" header field will\n * be trusted.\n *\n * @return {String}\n * @public\n */\n\ndefineGetter(req, 'hostname', function hostname(){\n  var trust = this.app.get('trust proxy fn');\n  var host = this.get('X-Forwarded-Host');\n\n  if (!host || !trust(this.connection.remoteAddress, 0)) {\n    host = this.get('Host');\n  } else if (host.indexOf(',') !== -1) {\n    // Note: X-Forwarded-Host is normally only ever a\n    //       single value, but this is to be safe.\n    host = host.substring(0, host.indexOf(',')).trimRight()\n  }\n\n  if (!host) return;\n\n  // IPv6 literal support\n  var offset = host[0] === '['\n    ? host.indexOf(']') + 1\n    : 0;\n  var index = host.indexOf(':', offset);\n\n  return index !== -1\n    ? host.substring(0, index)\n    : host;\n});\n\n// TODO: change req.host to return host in next major\n\ndefineGetter(req, 'host', deprecate.function(function host(){\n  return this.hostname;\n}, 'req.host: Use req.hostname instead'));\n\n/**\n * Check if the request is fresh, aka\n * Last-Modified and/or the ETag\n * still match.\n *\n * @return {Boolean}\n * @public\n */\n\ndefineGetter(req, 'fresh', function(){\n  var method = this.method;\n  var res = this.res\n  var status = res.statusCode\n\n  // GET or HEAD for weak freshness validation only\n  if ('GET' !== method && 'HEAD' !== method) return false;\n\n  // 2xx or 304 as per rfc2616 14.26\n  if ((status >= 200 && status < 300) || 304 === status) {\n    return fresh(this.headers, {\n      'etag': res.get('ETag'),\n      'last-modified': res.get('Last-Modified')\n    })\n  }\n\n  return false;\n});\n\n/**\n * Check if the request is stale, aka\n * \"Last-Modified\" and / or the \"ETag\" for the\n * resource has changed.\n *\n * @return {Boolean}\n * @public\n */\n\ndefineGetter(req, 'stale', function stale(){\n  return !this.fresh;\n});\n\n/**\n * Check if the request was an _XMLHttpRequest_.\n *\n * @return {Boolean}\n * @public\n */\n\ndefineGetter(req, 'xhr', function xhr(){\n  var val = this.get('X-Requested-With') || '';\n  return val.toLowerCase() === 'xmlhttprequest';\n});\n\n/**\n * Helper function for creating a getter on an object.\n *\n * @param {Object} obj\n * @param {String} name\n * @param {Function} getter\n * @private\n */\nfunction defineGetter(obj, name, getter) {\n  Object.defineProperty(obj, name, {\n    configurable: true,\n    enumerable: true,\n    get: getter\n  });\n}\n\n};"],
"names":["shadow$provide","global","require","module","exports","defineGetter","obj","name","getter","Object","defineProperty","configurable","enumerable","get","accepts","deprecate","isIP","typeis","http","fresh","parseRange","parse","proxyaddr","req","create","IncomingMessage","prototype","header","req.header","TypeError","lc","toLowerCase","headers","referrer","referer","req.accepts","accept","types","apply","arguments","acceptsEncodings","req.acceptsEncodings","encodings","acceptsEncoding","function","acceptsCharsets","req.acceptsCharsets","charsets","acceptsCharset","acceptsLanguages","req.acceptsLanguages","languages","acceptsLanguage","range","req.range","size","options","param","req.param","defaultValue","params","body","query","args","length","hasOwnProperty","is","req.is","arr","Array","isArray","i","protocol","proto","connection","encrypted","app","trust","remoteAddress","index","indexOf","substring","trim","secure","ip","ips","addrs","all","reverse","pop","subdomains","hostname","offset","slice","split","path","pathname","host","trimRight","method","res","status","statusCode","stale","xhr"]
}
