{
"version":3,
"file":"module$node_modules$negotiator$lib$charset.js",
"lineCount":4,
"mappings":"AAAAA,cAAA,2CAAA,CAA+D,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CA+BvGC,QAASA,mBAAkB,CAACC,MAAD,CAAS,CAC9BC,MAAAA,CAAUD,MAAAE,MAAA,CAAa,GAAb,CAEd,KAHkC,IAGzBC,EAAI,CAHqB,CAGlBC,EAAI,CAApB,CAAuBD,CAAvB,CAA2BF,MAAAI,OAA3B,CAA2CF,CAAA,EAA3C,CAAgD,CACnB,IAAA,IAAAF,MAAA,CAAQE,CAAR,CAAAG,KAAA,EAAmBH,KAAAA,QAAAA,CAmBhD,KAAII,MAAQC,mBAAAC,KAAA,CAAyBC,GAAzB,CACZ,IAAKH,KAAL,CAAA,CAEII,GAAAA,CAAUJ,KAAA,CAAM,CAAN,CACd,KAAIK,EAAI,CACR,IAAIL,KAAA,CAAM,CAAN,CAAJ,CAAc,CACRM,KAAAA,CAASN,KAAA,CAAM,CAAN,CAAAL,MAAA,CAAe,GAAf,CACb,KAAK,IAAIE,WAAI,CAAb,CAAgBA,UAAhB,CAAoBS,KAAAR,OAApB,CAAmCD,UAAA,EAAnC,CAAwC,CACtC,IAAIU,EAAID,KAAA,CAAOT,UAAP,CAAAE,KAAA,EAAAJ,MAAA,CAAuB,MAAvB,CACR,IAAa,GAAb,GAAIY,CAAA,CAAE,CAAF,CAAJ,CAAkB,CAChBF,CAAA,CAAIG,UAAA,CAAWD,CAAA,CAAE,CAAF,CAAX,CACJ,MAFgB,CAFoB,CAF5B,CAWd,OAAA,CAAO,CACLH,QAASA,GADJ;AAELC,EAAGA,CAFE,CAGLT,EAAGA,OAHE,CAfP,CAAA,IAAY,QAAA,CAAO,IAlBbQ,QAAJ,GACEV,MAAA,CAAQG,CAAA,EAAR,CADF,CACiBO,OADjB,CAH8C,CAShDV,MAAAI,OAAA,CAAiBD,CAEjB,OAAOH,OAd2B,CA2FpCe,QAASA,kBAAiB,CAAChB,MAAD,CAASiB,QAAT,CAAmB,CAE3C,IAAIhB,QAAUF,kBAAA,CAA8BmB,IAAAA,EAAX,GAAAlB,MAAA,CAAuB,GAAvB,CAA6BA,MAA7B,EAAuC,EAA1D,CAEd,IAAI,CAACiB,QAAL,CAEE,MAAOhB,QAAAkB,OAAA,CACGC,SADH,CAAAC,KAAA,CAECC,YAFD,CAAAC,IAAA,CAGAC,cAHA,CAMT,KAAIC,WAAaR,QAAAM,IAAA,CAAaG,QAAoB,CAACC,IAAD,CAAOC,cAAP,CAAc,CAjDhE,IAFA,IAAIC,SAAW,CAACC,EAAG,EAAJ,CAAQlB,EAAG,CAAX,CAAcmB,EAAG,CAAjB,CAAf,CAES5B,EAAI,CAAb,CAAgBA,CAAhB,CAkDkCF,OAlDdI,OAApB,CAAqCF,CAAA,EAArC,CAA0C,CAgBL,CAAA,CAAA,CAkCTwB,IAAAA,KAAAA,IAjDE,KAAA,cAiDI1B,OAjDJ,CAASE,CAAT,CAAA,CAiDayB,MAAAA,cAjDb,CAgB1BG,EAAI,CACR,IAAGC,aAAArB,QAAAsB,YAAA,EAAH;AAAkCtB,IAAAsB,YAAA,EAAlC,CACEF,CAAA,EAAK,CADP,KAEO,IAAqB,GAArB,GAAIC,aAAArB,QAAJ,CAA2B,CAChC,IAAA,CAAO,IAAP,OAAA,CADgC,CAIlC,IAAA,CAAO,CACLR,EAAGyB,KADE,CAELE,EAAGE,aAAA7B,EAFE,CAGLS,EAAGoB,aAAApB,EAHE,CAILmB,EAAGA,CAJE,CAR8B,CAb/BC,IAAJ,EAAkF,CAAlF,EAAaH,QAAAE,EAAb,CAA0BC,IAAAD,EAA1B,EAAoCF,QAAAjB,EAApC,CAAiDoB,IAAApB,EAAjD,EAA2DiB,QAAAC,EAA3D,CAAwEE,IAAAF,EAAxE,IACED,QADF,CACaG,IADb,CAHwC,CAkDxC,MA1CKH,SAyCyD,CAA/C,CAKjB,OAAOJ,WAAAN,OAAA,CAAkBC,SAAlB,CAAAC,KAAA,CAAkCC,YAAlC,CAAAC,IAAA,CAAoDW,QAAmB,CAACL,QAAD,CAAW,CACvF,MAAOZ,SAAA,CAASQ,UAAAU,QAAA,CAAmBN,QAAnB,CAAT,CADgF,CAAlF,CAjBoC,CA2B7CP,QAASA,aAAY,CAACc,CAAD,CAAIC,CAAJ,CAAO,CAC1B,MAAQA,EAAAzB,EAAR,CAAcwB,CAAAxB,EAAd,EAAuByB,CAAAN,EAAvB,CAA6BK,CAAAL,EAA7B,EAAsCK,CAAAN,EAAtC,CAA4CO,CAAAP,EAA5C,EAAqDM,CAAAjC,EAArD,CAA2DkC,CAAAlC,EAA3D,EAAmE,CADzC,CAS5BqB,QAASA,eAAc,CAACQ,IAAD,CAAO,CAC5B,MAAOA,KAAArB,QADqB,CAS9BS,QAASA,UAAS,CAACY,IAAD,CAAO,CACvB,MAAgB,EAAhB;AAAOA,IAAApB,EADgB,CAvJzBf,MAAAC,QAAA,CAAiBkB,iBACjBnB,OAAAC,QAAAkB,kBAAA,CAAmCA,iBAOnC,KAAIR,oBAAsB,6BAxB6E;",
"sources":["node_modules/negotiator/lib/charset.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$negotiator$lib$charset\"] = function(global,require,module,exports) {\n/**\n * negotiator\n * Copyright(c) 2012 Isaac Z. Schlueter\n * Copyright(c) 2014 Federico Romero\n * Copyright(c) 2014-2015 Douglas Christopher Wilson\n * MIT Licensed\n */\n\n'use strict';\n\n/**\n * Module exports.\n * @public\n */\n\nmodule.exports = preferredCharsets;\nmodule.exports.preferredCharsets = preferredCharsets;\n\n/**\n * Module variables.\n * @private\n */\n\nvar simpleCharsetRegExp = /^\\s*([^\\s;]+)\\s*(?:;(.*))?$/;\n\n/**\n * Parse the Accept-Charset header.\n * @private\n */\n\nfunction parseAcceptCharset(accept) {\n  var accepts = accept.split(',');\n\n  for (var i = 0, j = 0; i < accepts.length; i++) {\n    var charset = parseCharset(accepts[i].trim(), i);\n\n    if (charset) {\n      accepts[j++] = charset;\n    }\n  }\n\n  // trim accepts\n  accepts.length = j;\n\n  return accepts;\n}\n\n/**\n * Parse a charset from the Accept-Charset header.\n * @private\n */\n\nfunction parseCharset(str, i) {\n  var match = simpleCharsetRegExp.exec(str);\n  if (!match) return null;\n\n  var charset = match[1];\n  var q = 1;\n  if (match[2]) {\n    var params = match[2].split(';')\n    for (var j = 0; j < params.length; j++) {\n      var p = params[j].trim().split('=');\n      if (p[0] === 'q') {\n        q = parseFloat(p[1]);\n        break;\n      }\n    }\n  }\n\n  return {\n    charset: charset,\n    q: q,\n    i: i\n  };\n}\n\n/**\n * Get the priority of a charset.\n * @private\n */\n\nfunction getCharsetPriority(charset, accepted, index) {\n  var priority = {o: -1, q: 0, s: 0};\n\n  for (var i = 0; i < accepted.length; i++) {\n    var spec = specify(charset, accepted[i], index);\n\n    if (spec && (priority.s - spec.s || priority.q - spec.q || priority.o - spec.o) < 0) {\n      priority = spec;\n    }\n  }\n\n  return priority;\n}\n\n/**\n * Get the specificity of the charset.\n * @private\n */\n\nfunction specify(charset, spec, index) {\n  var s = 0;\n  if(spec.charset.toLowerCase() === charset.toLowerCase()){\n    s |= 1;\n  } else if (spec.charset !== '*' ) {\n    return null\n  }\n\n  return {\n    i: index,\n    o: spec.i,\n    q: spec.q,\n    s: s\n  }\n}\n\n/**\n * Get the preferred charsets from an Accept-Charset header.\n * @public\n */\n\nfunction preferredCharsets(accept, provided) {\n  // RFC 2616 sec 14.2: no header = *\n  var accepts = parseAcceptCharset(accept === undefined ? '*' : accept || '');\n\n  if (!provided) {\n    // sorted list of all charsets\n    return accepts\n      .filter(isQuality)\n      .sort(compareSpecs)\n      .map(getFullCharset);\n  }\n\n  var priorities = provided.map(function getPriority(type, index) {\n    return getCharsetPriority(type, accepts, index);\n  });\n\n  // sorted list of accepted charsets\n  return priorities.filter(isQuality).sort(compareSpecs).map(function getCharset(priority) {\n    return provided[priorities.indexOf(priority)];\n  });\n}\n\n/**\n * Compare two specs.\n * @private\n */\n\nfunction compareSpecs(a, b) {\n  return (b.q - a.q) || (b.s - a.s) || (a.o - b.o) || (a.i - b.i) || 0;\n}\n\n/**\n * Get full charset string.\n * @private\n */\n\nfunction getFullCharset(spec) {\n  return spec.charset;\n}\n\n/**\n * Check if a spec has any quality.\n * @private\n */\n\nfunction isQuality(spec) {\n  return spec.q > 0;\n}\n\n};"],
"names":["shadow$provide","global","require","module","exports","parseAcceptCharset","accept","accepts","split","i","j","length","trim","match","simpleCharsetRegExp","exec","str","charset","q","params","p","parseFloat","preferredCharsets","provided","undefined","filter","isQuality","sort","compareSpecs","map","getFullCharset","priorities","getPriority","type","index","priority","o","s","spec","toLowerCase","getCharset","indexOf","a","b"]
}
