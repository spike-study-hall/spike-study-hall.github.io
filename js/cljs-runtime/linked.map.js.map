{"version":3,"sources":["linked/map.cljc"],"mappings":"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","names":["this__4385__auto__","k__4386__auto__","this__4387__auto__","k58739","else__4388__auto__","G__58743","cljs.core/Keyword","value","left","right","cljs.core.get.cljs$core$IFn$_invoke$arity$3","__extmap","this__4404__auto__","f__4405__auto__","init__4406__auto__","cljs.core.reduce.cljs$core$IFn$_invoke$arity$3","ret__4407__auto__","p__58744","vec__58745","k__4408__auto__","cljs.core.nth.cljs$core$IFn$_invoke$arity$3","v__4409__auto__","this__4399__auto__","writer__4400__auto__","opts__4401__auto__","pr-pair__4402__auto__","keyval__4403__auto__","cljs.core/pr-sequential-writer","cljs.core.concat.cljs$core$IFn$_invoke$arity$2","cljs.core/PersistentVector","G__58738","cljs.core/RecordIter","cljs.core/-iterator","cljs.core/nil-iter","this__4383__auto__","__meta","this__4380__auto__","__hash","this__4389__auto__","cljs.core/count","this__4381__auto__","h__4243__auto__","fexpr__58748","coll__4382__auto__","cljs.core/hash-unordered-coll","this58740","other58741","cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2","this__4394__auto__","k__4395__auto__","cljs.core/contains?","cljs.core.dissoc.cljs$core$IFn$_invoke$arity$2","cljs.core/-with-meta","cljs.core.into.cljs$core$IFn$_invoke$arity$2","cljs.core/not-empty","this__4392__auto__","k__4393__auto__","pred__58764","cljs.core/keyword-identical?","expr__58765","G__58767","G__58768","G__58769","G__58770","G__58771","G__58772","cljs.core.assoc.cljs$core$IFn$_invoke$arity$3","this__4397__auto__","cljs.core/seq","cljs.core/MapEntry","this__4384__auto__","this__4390__auto__","entry__4391__auto__","cljs.core/vector?","cljs.core._nth.cljs$core$IFn$_invoke$arity$2","cljs.core/-conj","linked.map/Node","this__4428__auto__","cljs.core/List","writer__4429__auto__","cljs.core/-write","G__58742","extmap__4424__auto__","G__58774","cljs.core.dissoc.cljs$core$IFn$_invoke$arity$variadic","cljs.core/record?","linked.map/->Node","linked.map/map->Node","self__","args58778","cljs.core/aclone","this__4374__auto__","writer__4375__auto__","opt__4376__auto__","linked.map/LinkedMap","linked.map/->LinkedMap","head","delegate-map","coll","clojure.string.join.cljs$core$IFn$_invoke$arity$2","iter__4523__auto__","s__58790","cljs.core/LazySeq","temp__5735__auto__","cljs.core/chunked-seq?","c__4521__auto__","size__4522__auto__","b__58792","cljs.core/chunk-buffer","i__58791","vec__58793","cljs.core/chunk-append","cljs.core/chunk-cons","cljs.core/chunk","iter__58789","cljs.core/chunk-rest","vec__58796","cljs.core/first","cljs.core/cons","cljs.core/rest","k","v","this","other","_","meta","cljs.core/with-meta","cljs.core/meta","entry","ret","es","e","cljs.core/-assoc","cljs.core/next","js/Error","linked.map/empty-linked-map","cljs.core/equiv-map","cljs.core/hash","linked.map/seq*","linked.map/rseq*","not-found","temp__5733__auto__","cljs.core/find","cljs.core/val","linked.map/assoc*","linked.map/dissoc*","f","init","p1__58776#","p2__58777#","cljs.core.apply.cljs$core$IFn$_invoke$arity$2","cljs.core.partial.cljs$core$IFn$_invoke$arity$2","writer","opts","cljs.core/assoc-in","cljs.core/empty?","tail","cljs.core.get_in.cljs$core$IFn$_invoke$arity$2","cljs.core/empty","rk","lk","linked.map/map-entry","linked.map/visit-node","current","last","direction","vec__58823","node","next","cljs.core/PersistentHashMap","linked.map/->linked-map","cljs.core/into","cljs.reader/register-tag-parser!","cljs.core/chunk-first"],"sourcesContent":["(ns linked.map\n  (:require [clojure.string :as string]\n    #?(:cljs [cljs.reader :as reader]))\n  #?(:clj\n     (:import (clojure.lang Associative\n                            Counted\n                            IObj\n                            IFn\n                            IHashEq\n                            ILookup\n                            IPersistentCollection\n                            IPersistentVector\n                            IPersistentMap\n                            MapEntry\n                            MapEquivalence\n                            Reversible\n                            Seqable\n                            SeqIterator)\n              (java.util Map\n                         Map$Entry)\n              (java.lang Iterable))))\n\n(declare empty-linked-map)\n\n(defrecord Node [value left right])\n\n(declare assoc*)\n(declare dissoc*)\n(declare seq*)\n(declare rseq*)\n\n(deftype LinkedMap [head delegate-map]\n  #?@(:clj\n      [IPersistentMap\n       (assoc [this k v]\n         (assoc* this k v))\n       (assocEx [this k v]\n         (if (.containsKey this k)\n           (throw (RuntimeException. \"Key already present\"))\n           (assoc this k v)))\n       (without [this k]\n         (dissoc* this k))\n\n       MapEquivalence\n\n       Map\n       (get [this k]\n         (.valAt this k))\n       (containsValue [this v]\n         (boolean (seq (filter #(= % v) (.values this)))))\n       (values [this]\n         (map val (.seq this)))\n       (size [_]\n         (count delegate-map))\n\n       Counted\n\n       IPersistentCollection\n       (count [this]\n         (.size this))\n       (cons [this o]\n         (condp instance? o\n           Map$Entry (let [^Map$Entry e o]\n                       (.assoc this (.getKey e) (.getValue e)))\n           IPersistentVector (if (= 2 (count o))\n                               (.assoc this (nth o 0) (nth o 1))\n                               (throw (IllegalArgumentException. \"Vector arg to map conj must be a pair\")))\n           ;; TODO support for transient to speed up multiple assoc?\n           (reduce (fn [^IPersistentMap m ^Map$Entry e]\n                     (.assoc m (.getKey e) (.getValue e)))\n                   this\n                   o)))\n       (empty [_]\n         (with-meta empty-linked-map (meta delegate-map)))\n       (equiv [this o]\n         (and (instance? Map o)\n              (= (.count this) (count o))\n              (every? (fn [[k v :as kv]]\n                        (= kv (find o k)))\n                      (.seq this))))\n\n       Seqable\n       (seq [this]\n         (seq* this))\n\n       Reversible\n       (rseq [this]\n         (rseq* this))\n\n       Iterable\n       (iterator [this]\n         (SeqIterator. (.seq this)))\n\n       Associative\n       (containsKey [_ k]\n         (contains? delegate-map k))\n       (entryAt [this k]\n         (when (.containsKey this k)\n           (MapEntry. k (.valAt this k))))\n\n       ILookup\n       (valAt [this k]\n         (.valAt this k nil))\n       (valAt [_ k not-found]\n         (if-let [entry (find delegate-map k)]\n           (-> entry val :value)\n           not-found))\n\n       IFn\n       (invoke [this k]\n         (.valAt this k))\n       (invoke [this k not-found]\n         (.valAt this k not-found))\n\n       IObj\n       (meta [this]\n         (.meta ^IObj delegate-map))\n       (withMeta [this m]\n         (LinkedMap. head (.withMeta ^IObj delegate-map m)))\n\n       ;; IEditableCollection\n\n       IHashEq\n       (hasheq [this] (.hasheq ^IHashEq (into {} this)))\n\n       Object\n       (toString [this]\n         (str \"{\" (string/join \", \" (for [[k v] this] (str k \" \" v))) \"}\"))\n       (equals [this other]\n         (.equiv this other))\n       (hashCode [this]\n         (.hashCode ^Object (into {} this)))]\n      :cljs\n      [Object\n       (toString [coll]\n                 (str \"{\" (string/join \", \" (for [[k v] coll] (str k \" \" v))) \"}\"))\n       (equiv [this other]\n              (-equiv this other))\n\n       ICloneable\n       (-clone [_]\n               (LinkedMap. head delegate-map))\n\n       IWithMeta\n       (-with-meta [coll meta]\n                   (LinkedMap. head (with-meta delegate-map meta)))\n\n       IMeta\n       (-meta [coll] (meta delegate-map))\n\n       ICollection\n       (-conj [coll entry]\n              (if (vector? entry)\n                (-assoc coll (-nth entry 0) (-nth entry 1))\n                (loop [ret coll es (seq entry)]\n                      (if (nil? es)\n                        ret\n                        (let [e (first es)]\n                             (if (vector? e)\n                               (recur (-assoc ret (-nth e 0) (-nth e 1))\n                                      (next es))\n                               (throw (js/Error. \"conj on a map takes map entries or seqables of map entries\"))))))))\n\n       IEmptyableCollection\n       (-empty [coll] (-with-meta empty-linked-map (meta delegate-map)))\n\n       IEquiv\n       (-equiv [coll other] (equiv-map coll other))\n\n       IHash\n       (-hash [coll] (hash (into {} coll)))\n\n       ISequential\n\n       ISeqable\n       (-seq [coll] (seq* coll))\n\n       IReversible\n       (-rseq [coll] (rseq* coll))\n\n       ICounted\n       (-count [coll]\n               (count delegate-map))\n\n       ILookup\n       (-lookup [coll k]\n                (-lookup coll k nil))\n\n       (-lookup [coll k not-found]\n                (if-let [entry (find delegate-map k)]\n                        (-> entry val :value)\n                        not-found))\n\n       IAssociative\n       (-assoc [coll k v]\n               (assoc* coll k v))\n\n       (-contains-key? [coll k]\n                       (contains? delegate-map k))\n\n       IMap\n       (-dissoc [coll k]\n                (dissoc* coll k))\n\n       IKVReduce\n       (-kv-reduce [coll f init]\n                   (reduce #(apply (partial f %1) %2) init (seq coll)))\n\n       IFn\n       (-invoke [coll k]\n                (-lookup coll k))\n\n       (-invoke [coll k not-found]\n                (-lookup coll k not-found))\n\n       ;; IEditableCollection\n\n       IPrintWithWriter\n       (-pr-writer [coll writer opts] (-write writer (str \"#linked/map \" (into [] coll))))]))\n\n#?(:clj\n   (defmethod print-method LinkedMap [o ^java.io.Writer w]\n     (.write w \"#linked/map \")\n     (.write w (pr-str (into [] o)))))\n\n(defn- assoc* [^LinkedMap this k v]\n  (let [head (.-head this)\n        delegate-map (.-delegate-map this)]\n    (if-let [entry (find delegate-map k)]\n      (LinkedMap. head (assoc-in delegate-map [k :value] v))\n      (if (empty? delegate-map)\n        (LinkedMap. k (assoc delegate-map k (Node. v k k)))\n        (let [tail (get-in delegate-map [head :left])]\n          (LinkedMap. head (-> delegate-map\n                               (assoc k (Node. v tail head))\n                               (assoc-in [head :left] k)\n                               (assoc-in [tail :right] k))))))))\n\n(defn- dissoc* [^LinkedMap this k]\n  (let [head (.-head this)\n        delegate-map (.-delegate-map this)]\n    (if-let [entry (find delegate-map k)]\n      (if (= 1 (count delegate-map))\n        (empty this)\n        (let [rk (-> entry val :right)\n              lk (-> entry val :left)\n              head (if (= k head) rk head)]\n          (LinkedMap. head (-> delegate-map\n                               (dissoc k)\n                               (assoc-in [rk :left] lk)\n                               (assoc-in [lk :right] rk)))))\n      this)))\n\n\n;;;; seq and rseq impl\n\n(defn- map-entry [k v]\n  #?(:clj  (MapEntry. k v)\n     :cljs (MapEntry. k v nil)))\n\n(defn- visit-node [delegate-map current last direction]\n  (let [[k node] (find delegate-map current)\n        entry (map-entry k (:value node))\n        next (direction node)]\n    (if (= current last)\n      (list entry)\n      (cons entry (lazy-seq (visit-node delegate-map next last direction))))))\n\n(defn- seq* [^LinkedMap this]\n  (let [delegate-map (.-delegate-map this)\n        head (.-head this)\n        tail (get-in delegate-map [head :left])]\n    (when (seq delegate-map)\n      (visit-node delegate-map head tail :right))))\n\n(defn- rseq* [^LinkedMap this]\n  (let [delegate-map (.-delegate-map this)\n        head (.-head this)\n        tail (get-in delegate-map [head :left])]\n    (when (seq delegate-map)\n      (visit-node delegate-map tail head :left))))\n\n(def ^{:tag LinkedMap} empty-linked-map\n  (LinkedMap. nil (hash-map)))\n\n(def ->linked-map (partial into empty-linked-map))\n\n#?(:cljs (reader/register-tag-parser! 'linked/map ->linked-map))\n"]}