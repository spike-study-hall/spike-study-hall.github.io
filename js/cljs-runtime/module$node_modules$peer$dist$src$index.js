shadow$provide.module$node_modules$peer$dist$src$index=function(global,require,module,exports){function ExpressPeerServer(server,options){var app=express_1.default(),newOptions=Object.assign(Object.assign({},config_1.default),options);newOptions.proxied&&app.set("trust proxy","false"===newOptions.proxied?!1:!!newOptions.proxied);app.on("mount",function(){if(!server)throw Error("Server is not passed to constructor - can't start PeerServer");instance_1.createInstance({app:app,server:server,options:newOptions})});
return app}global=this&&this.__importDefault||function(mod){return mod&&mod.__esModule?mod:{"default":mod}};Object.defineProperty(exports,"__esModule",{value:!0});var express_1=global(require("module$node_modules$express$index")),http_1=global(require("module$node_modules$stream_http$index")),https_1=global(require("module$node_modules$https_browserify$index")),config_1=global(require("module$node_modules$peer$dist$src$config$index")),instance_1=require("module$node_modules$peer$dist$src$instance");
exports.ExpressPeerServer=ExpressPeerServer;exports.PeerServer=function(options,callback){options=void 0===options?{}:options;var app=express_1.default(),newOptions=Object.assign(Object.assign({},config_1.default),options),port=newOptions.port;if(newOptions.ssl&&newOptions.ssl.key&&newOptions.ssl.cert){var server=https_1.default.createServer(options.ssl,app);delete newOptions.ssl}else server=http_1.default.createServer(app);options=ExpressPeerServer(server,newOptions);app.use(options);server.listen(port,
function(){return null===callback||void 0===callback?void 0:callback(server)});return options}}
//# sourceMappingURL=module$node_modules$peer$dist$src$index.js.map
