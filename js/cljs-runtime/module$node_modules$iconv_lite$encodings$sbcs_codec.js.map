{
"version":3,
"file":"module$node_modules$iconv_lite$encodings$sbcs_codec.js",
"lineCount":4,
"mappings":"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",
"sources":["node_modules/iconv-lite/encodings/sbcs-codec.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$iconv_lite$encodings$sbcs_codec\"] = function(global,require,module,exports) {\n\"use strict\";\nvar Buffer = require(\"safer-buffer\").Buffer;\n\n// Single-byte codec. Needs a 'chars' string parameter that contains 256 or 128 chars that\n// correspond to encoded bytes (if 128 - then lower half is ASCII). \n\nexports._sbcs = SBCSCodec;\nfunction SBCSCodec(codecOptions, iconv) {\n    if (!codecOptions)\n        throw new Error(\"SBCS codec is called without the data.\")\n    \n    // Prepare char buffer for decoding.\n    if (!codecOptions.chars || (codecOptions.chars.length !== 128 && codecOptions.chars.length !== 256))\n        throw new Error(\"Encoding '\"+codecOptions.type+\"' has incorrect 'chars' (must be of len 128 or 256)\");\n    \n    if (codecOptions.chars.length === 128) {\n        var asciiString = \"\";\n        for (var i = 0; i < 128; i++)\n            asciiString += String.fromCharCode(i);\n        codecOptions.chars = asciiString + codecOptions.chars;\n    }\n\n    this.decodeBuf = Buffer.from(codecOptions.chars, 'ucs2');\n    \n    // Encoding buffer.\n    var encodeBuf = Buffer.alloc(65536, iconv.defaultCharSingleByte.charCodeAt(0));\n\n    for (var i = 0; i < codecOptions.chars.length; i++)\n        encodeBuf[codecOptions.chars.charCodeAt(i)] = i;\n\n    this.encodeBuf = encodeBuf;\n}\n\nSBCSCodec.prototype.encoder = SBCSEncoder;\nSBCSCodec.prototype.decoder = SBCSDecoder;\n\n\nfunction SBCSEncoder(options, codec) {\n    this.encodeBuf = codec.encodeBuf;\n}\n\nSBCSEncoder.prototype.write = function(str) {\n    var buf = Buffer.alloc(str.length);\n    for (var i = 0; i < str.length; i++)\n        buf[i] = this.encodeBuf[str.charCodeAt(i)];\n    \n    return buf;\n}\n\nSBCSEncoder.prototype.end = function() {\n}\n\n\nfunction SBCSDecoder(options, codec) {\n    this.decodeBuf = codec.decodeBuf;\n}\n\nSBCSDecoder.prototype.write = function(buf) {\n    // Strings are immutable in JS -> we use ucs2 buffer to speed up computations.\n    var decodeBuf = this.decodeBuf;\n    var newBuf = Buffer.alloc(buf.length*2);\n    var idx1 = 0, idx2 = 0;\n    for (var i = 0; i < buf.length; i++) {\n        idx1 = buf[i]*2; idx2 = i*2;\n        newBuf[idx2] = decodeBuf[idx1];\n        newBuf[idx2+1] = decodeBuf[idx1+1];\n    }\n    return newBuf.toString('ucs2');\n}\n\nSBCSDecoder.prototype.end = function() {\n}\n\n};"],
"names":["shadow$provide","global","require","module","exports","SBCSCodec","codecOptions","iconv","Error","chars","length","type","asciiString","i","String","fromCharCode","decodeBuf","Buffer","from","encodeBuf","alloc","defaultCharSingleByte","charCodeAt","SBCSEncoder","options","codec","SBCSDecoder","_sbcs","prototype","encoder","decoder","write","SBCSEncoder.prototype.write","str","buf","end","SBCSEncoder.prototype.end","SBCSDecoder.prototype.write","newBuf","idx1","idx2","toString","SBCSDecoder.prototype.end"]
}
