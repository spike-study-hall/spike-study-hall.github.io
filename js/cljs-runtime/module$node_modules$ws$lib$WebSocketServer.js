shadow$provide.module$node_modules$ws$lib$WebSocketServer=function(global,require,module,exports){function socketError(){this.destroy()}function abortConnection(socket,code,message){socket.writable&&(message=message||http.STATUS_CODES[code],socket.write("HTTP/1.1 "+code+" "+http.STATUS_CODES[code]+"\r\nConnection: close\r\nContent-type: text/html\r\nContent-Length: "+(Buffer.byteLength(message)+"\r\n\r\n")+message));socket.removeListener("error",socketError);socket.destroy()}global=require("module$node_modules$safe_buffer$index");
var EventEmitter=require("module$node_modules$events$events"),crypto=require("module$node_modules$crypto_browserify$index"),Ultron=require("module$node_modules$ultron$index"),http=require("module$node_modules$stream_http$index"),url=require("module$node_modules$url$url"),PerMessageDeflate=require("module$node_modules$ws$lib$PerMessageDeflate"),Extensions=require("module$node_modules$ws$lib$Extensions"),constants=require("module$node_modules$ws$lib$Constants"),WebSocket=require("module$node_modules$ws$lib$WebSocket"),
Buffer=global.Buffer;require=function(options,callback){var $jscomp$super$this=EventEmitter.call(this)||this;options=Object.assign({maxPayload:104857600,perMessageDeflate:!1,handleProtocols:null,clientTracking:!0,verifyClient:null,noServer:!1,backlog:null,server:null,host:null,path:null,port:null},options);if(null==options.port&&!options.server&&!options.noServer)throw new TypeError("missing or invalid options");null!=options.port?($jscomp$super$this._server=http.createServer(function(req,res){req=
http.STATUS_CODES[426];res.writeHead(426,{"Content-Length":req.length,"Content-Type":"text/plain"});res.end(req)}),$jscomp$super$this._server.listen(options.port,options.host,options.backlog,callback)):options.server&&($jscomp$super$this._server=options.server);$jscomp$super$this._server&&($jscomp$super$this._ultron=new Ultron($jscomp$super$this._server),$jscomp$super$this._ultron.on("listening",function(){return $jscomp$super$this.emit("listening")}),$jscomp$super$this._ultron.on("error",function(err){return $jscomp$super$this.emit("error",
err)}),$jscomp$super$this._ultron.on("upgrade",function(req,socket,head){$jscomp$super$this.handleUpgrade(req,socket,head,function(client){$jscomp$super$this.emit("connection",client,req)})}));!0===options.perMessageDeflate&&(options.perMessageDeflate={});options.clientTracking&&($jscomp$super$this.clients=new Set);$jscomp$super$this.options=options;return $jscomp$super$this};$jscomp.inherits(require,EventEmitter);require.prototype.close=function(cb){if(this.clients)for(var $jscomp$iter$2=$jscomp.makeIterator(this.clients),
$jscomp$key$client=$jscomp$iter$2.next();!$jscomp$key$client.done;$jscomp$key$client=$jscomp$iter$2.next())$jscomp$key$client.value.terminate();if($jscomp$iter$2=this._server)if(this._ultron.destroy(),this._ultron=this._server=null,null!=this.options.port)return $jscomp$iter$2.close(cb);cb&&cb()};require.prototype.shouldHandle=function(req){return this.options.path&&url.parse(req.url).pathname!==this.options.path?!1:!0};require.prototype.handleUpgrade=function(req,socket,head,cb){var $jscomp$this=
this;socket.on("error",socketError);var version=+req.headers["sec-websocket-version"],extensions={};if("GET"!==req.method||"websocket"!==req.headers.upgrade.toLowerCase()||!req.headers["sec-websocket-key"]||8!==version&&13!==version||!this.shouldHandle(req))return abortConnection(socket,400);if(this.options.perMessageDeflate){var perMessageDeflate=new PerMessageDeflate(this.options.perMessageDeflate,!0,this.options.maxPayload);try{var offers=Extensions.parse(req.headers["sec-websocket-extensions"]);
offers[PerMessageDeflate.extensionName]&&(perMessageDeflate.accept(offers[PerMessageDeflate.extensionName]),extensions[PerMessageDeflate.extensionName]=perMessageDeflate)}catch(err){return abortConnection(socket,400)}}var protocol=(req.headers["sec-websocket-protocol"]||"").split(/, */);if(this.options.handleProtocols){if(protocol=this.options.handleProtocols(protocol,req),!1===protocol)return abortConnection(socket,401)}else protocol=protocol[0];if(this.options.verifyClient){perMessageDeflate={origin:req.headers[8===
version?"sec-websocket-origin":"origin"],secure:!(!req.connection.authorized&&!req.connection.encrypted),req:req};if(2===this.options.verifyClient.length){this.options.verifyClient(perMessageDeflate,function(verified,code,message){if(!verified)return abortConnection(socket,code||401,message);$jscomp$this.completeUpgrade(protocol,extensions,version,req,socket,head,cb)});return}if(!this.options.verifyClient(perMessageDeflate))return abortConnection(socket,401)}this.completeUpgrade(protocol,extensions,
version,req,socket,head,cb)};require.prototype.completeUpgrade=function(protocol,extensions,version,req,socket,head,cb){var $jscomp$this=this;if(!socket.readable||!socket.writable)return socket.destroy();var headers=["HTTP/1.1 101 Switching Protocols","Upgrade: websocket","Connection: Upgrade","Sec-WebSocket-Accept: "+crypto.createHash("sha1").update(req.headers["sec-websocket-key"]+constants.GUID,"binary").digest("base64")];protocol&&headers.push("Sec-WebSocket-Protocol: "+protocol);if(extensions[PerMessageDeflate.extensionName]){var $jscomp$compprop1=
{};$jscomp$compprop1=Extensions.format(($jscomp$compprop1[PerMessageDeflate.extensionName]=[extensions[PerMessageDeflate.extensionName].params],$jscomp$compprop1));headers.push("Sec-WebSocket-Extensions: "+$jscomp$compprop1)}this.emit("headers",headers,req);socket.write(headers.concat("\r\n").join("\r\n"));var client=new WebSocket([socket,head],null,{maxPayload:this.options.maxPayload,protocolVersion:version,extensions:extensions,protocol:protocol});this.clients&&(this.clients.add(client),client.on("close",
function(){return $jscomp$this.clients.delete(client)}));socket.removeListener("error",socketError);cb(client)};module.exports=require}
//# sourceMappingURL=module$node_modules$ws$lib$WebSocketServer.js.map
