{
"version":3,
"file":"module$node_modules$forwarded$index.js",
"lineCount":2,
"mappings":"AAAAA,cAAA,oCAAA,CAAwD,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CAchGD,MAAAC,QAAA,CAUAC,QAAmB,CAACC,GAAD,CAAM,CACvB,GAAI,CAACA,GAAL,CACE,KAAM,KAAIC,SAAJ,CAAc,0BAAd,CAAN,CAyBF,IArBuB,IAAA,OAAAD,GAAAE,QAAA,CAAY,iBAAZ,CAAA,EAAkC,EAAlC,CAgBnBC,IAAMC,MAAAC,OAhBa,CAiBnBC,KAAO,EAjBY,CAkBnBC,MAAQH,MAAAC,OAlBW,CAqBdG,EAAIJ,MAAAC,OAAJG,CAAoB,CAA7B,CAAqC,CAArC,EAAgCA,CAAhC,CAAwCA,CAAA,EAAxC,CACE,OAAQJ,MAAAK,WAAA,CAAkBD,CAAlB,CAAR,EACE,KAAK,EAAL,CACMD,KAAJ,GAAcJ,GAAd,GACEI,KADF,CACUJ,GADV,CACgBK,CADhB,CAGA,MACF,MAAK,EAAL,CACMD,KAAJ,GAAcJ,GAAd,EACEG,IAAAI,KAAA,CAAUN,MAAAO,UAAA,CAAiBJ,KAAjB,CAAwBJ,GAAxB,CAAV,CAEFI,MAAA,CAAQJ,GAAR,CAAcK,CACd,MACF,SACED,KAAA,CAAQC,CAbZ,CAmBED,KAAJ,GAAcJ,GAAd,EACEG,IAAAI,KAAA,CAAUN,MAAAO,UAAA,CAAiBJ,KAAjB;AAAwBJ,GAAxB,CAAV,CArCF,OAHY,CADKH,GAAAY,WAAAC,cACL,CAAAC,OAAAC,CA2CLT,IA3CKS,CARW,CAxBuE;",
"sources":["node_modules/forwarded/index.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$forwarded$index\"] = function(global,require,module,exports) {\n/*!\n * forwarded\n * Copyright(c) 2014-2017 Douglas Christopher Wilson\n * MIT Licensed\n */\n\n'use strict'\n\n/**\n * Module exports.\n * @public\n */\n\nmodule.exports = forwarded\n\n/**\n * Get all addresses in the request, using the `X-Forwarded-For` header.\n *\n * @param {object} req\n * @return {array}\n * @public\n */\n\nfunction forwarded (req) {\n  if (!req) {\n    throw new TypeError('argument req is required')\n  }\n\n  // simple header parsing\n  var proxyAddrs = parse(req.headers['x-forwarded-for'] || '')\n  var socketAddr = req.connection.remoteAddress\n  var addrs = [socketAddr].concat(proxyAddrs)\n\n  // return all addresses\n  return addrs\n}\n\n/**\n * Parse the X-Forwarded-For header.\n *\n * @param {string} header\n * @private\n */\n\nfunction parse (header) {\n  var end = header.length\n  var list = []\n  var start = header.length\n\n  // gather addresses, backwards\n  for (var i = header.length - 1; i >= 0; i--) {\n    switch (header.charCodeAt(i)) {\n      case 0x20: /*   */\n        if (start === end) {\n          start = end = i\n        }\n        break\n      case 0x2c: /* , */\n        if (start !== end) {\n          list.push(header.substring(start, end))\n        }\n        start = end = i\n        break\n      default:\n        start = i\n        break\n    }\n  }\n\n  // final address\n  if (start !== end) {\n    list.push(header.substring(start, end))\n  }\n\n  return list\n}\n\n};"],
"names":["shadow$provide","global","require","module","exports","forwarded","req","TypeError","headers","end","header","length","list","start","i","charCodeAt","push","substring","connection","remoteAddress","concat","addrs"]
}
