{
"version":3,
"file":"module$node_modules$iconv_lite$encodings$utf16.js",
"lineCount":6,
"mappings":"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",
"sources":["node_modules/iconv-lite/encodings/utf16.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$iconv_lite$encodings$utf16\"] = function(global,require,module,exports) {\n\"use strict\";\nvar Buffer = require(\"safer-buffer\").Buffer;\n\n// Note: UTF16-LE (or UCS2) codec is Node.js native. See encodings/internal.js\n\n// == UTF16-BE codec. ==========================================================\n\nexports.utf16be = Utf16BECodec;\nfunction Utf16BECodec() {\n}\n\nUtf16BECodec.prototype.encoder = Utf16BEEncoder;\nUtf16BECodec.prototype.decoder = Utf16BEDecoder;\nUtf16BECodec.prototype.bomAware = true;\n\n\n// -- Encoding\n\nfunction Utf16BEEncoder() {\n}\n\nUtf16BEEncoder.prototype.write = function(str) {\n    var buf = Buffer.from(str, 'ucs2');\n    for (var i = 0; i < buf.length; i += 2) {\n        var tmp = buf[i]; buf[i] = buf[i+1]; buf[i+1] = tmp;\n    }\n    return buf;\n}\n\nUtf16BEEncoder.prototype.end = function() {\n}\n\n\n// -- Decoding\n\nfunction Utf16BEDecoder() {\n    this.overflowByte = -1;\n}\n\nUtf16BEDecoder.prototype.write = function(buf) {\n    if (buf.length == 0)\n        return '';\n\n    var buf2 = Buffer.alloc(buf.length + 1),\n        i = 0, j = 0;\n\n    if (this.overflowByte !== -1) {\n        buf2[0] = buf[0];\n        buf2[1] = this.overflowByte;\n        i = 1; j = 2;\n    }\n\n    for (; i < buf.length-1; i += 2, j+= 2) {\n        buf2[j] = buf[i+1];\n        buf2[j+1] = buf[i];\n    }\n\n    this.overflowByte = (i == buf.length-1) ? buf[buf.length-1] : -1;\n\n    return buf2.slice(0, j).toString('ucs2');\n}\n\nUtf16BEDecoder.prototype.end = function() {\n}\n\n\n// == UTF-16 codec =============================================================\n// Decoder chooses automatically from UTF-16LE and UTF-16BE using BOM and space-based heuristic.\n// Defaults to UTF-16LE, as it's prevalent and default in Node.\n// http://en.wikipedia.org/wiki/UTF-16 and http://encoding.spec.whatwg.org/#utf-16le\n// Decoder default can be changed: iconv.decode(buf, 'utf16', {defaultEncoding: 'utf-16be'});\n\n// Encoder uses UTF-16LE and prepends BOM (which can be overridden with addBOM: false).\n\nexports.utf16 = Utf16Codec;\nfunction Utf16Codec(codecOptions, iconv) {\n    this.iconv = iconv;\n}\n\nUtf16Codec.prototype.encoder = Utf16Encoder;\nUtf16Codec.prototype.decoder = Utf16Decoder;\n\n\n// -- Encoding (pass-through)\n\nfunction Utf16Encoder(options, codec) {\n    options = options || {};\n    if (options.addBOM === undefined)\n        options.addBOM = true;\n    this.encoder = codec.iconv.getEncoder('utf-16le', options);\n}\n\nUtf16Encoder.prototype.write = function(str) {\n    return this.encoder.write(str);\n}\n\nUtf16Encoder.prototype.end = function() {\n    return this.encoder.end();\n}\n\n\n// -- Decoding\n\nfunction Utf16Decoder(options, codec) {\n    this.decoder = null;\n    this.initialBytes = [];\n    this.initialBytesLen = 0;\n\n    this.options = options || {};\n    this.iconv = codec.iconv;\n}\n\nUtf16Decoder.prototype.write = function(buf) {\n    if (!this.decoder) {\n        // Codec is not chosen yet. Accumulate initial bytes.\n        this.initialBytes.push(buf);\n        this.initialBytesLen += buf.length;\n        \n        if (this.initialBytesLen < 16) // We need more bytes to use space heuristic (see below)\n            return '';\n\n        // We have enough bytes -> detect endianness.\n        var buf = Buffer.concat(this.initialBytes),\n            encoding = detectEncoding(buf, this.options.defaultEncoding);\n        this.decoder = this.iconv.getDecoder(encoding, this.options);\n        this.initialBytes.length = this.initialBytesLen = 0;\n    }\n\n    return this.decoder.write(buf);\n}\n\nUtf16Decoder.prototype.end = function() {\n    if (!this.decoder) {\n        var buf = Buffer.concat(this.initialBytes),\n            encoding = detectEncoding(buf, this.options.defaultEncoding);\n        this.decoder = this.iconv.getDecoder(encoding, this.options);\n\n        var res = this.decoder.write(buf),\n            trail = this.decoder.end();\n\n        return trail ? (res + trail) : res;\n    }\n    return this.decoder.end();\n}\n\nfunction detectEncoding(buf, defaultEncoding) {\n    var enc = defaultEncoding || 'utf-16le';\n\n    if (buf.length >= 2) {\n        // Check BOM.\n        if (buf[0] == 0xFE && buf[1] == 0xFF) // UTF-16BE BOM\n            enc = 'utf-16be';\n        else if (buf[0] == 0xFF && buf[1] == 0xFE) // UTF-16LE BOM\n            enc = 'utf-16le';\n        else {\n            // No BOM found. Try to deduce encoding from initial content.\n            // Most of the time, the content has ASCII chars (U+00**), but the opposite (U+**00) is uncommon.\n            // So, we count ASCII as if it was LE or BE, and decide from that.\n            var asciiCharsLE = 0, asciiCharsBE = 0, // Counts of chars in both positions\n                _len = Math.min(buf.length - (buf.length % 2), 64); // Len is always even.\n\n            for (var i = 0; i < _len; i += 2) {\n                if (buf[i] === 0 && buf[i+1] !== 0) asciiCharsBE++;\n                if (buf[i] !== 0 && buf[i+1] === 0) asciiCharsLE++;\n            }\n\n            if (asciiCharsBE > asciiCharsLE)\n                enc = 'utf-16be';\n            else if (asciiCharsBE < asciiCharsLE)\n                enc = 'utf-16le';\n        }\n    }\n\n    return enc;\n}\n\n\n\n};"],
"names":["shadow$provide","global","require","module","exports","Utf16BECodec","Utf16BEEncoder","Utf16BEDecoder","overflowByte","Utf16Codec","codecOptions","iconv","Utf16Encoder","options","codec","undefined","addBOM","encoder","getEncoder","Utf16Decoder","decoder","initialBytes","initialBytesLen","detectEncoding","buf","defaultEncoding","enc","length","asciiCharsLE","asciiCharsBE","_len","Math","min","i","Buffer","utf16be","prototype","bomAware","write","Utf16BEEncoder.prototype.write","str","from","tmp","end","Utf16BEEncoder.prototype.end","Utf16BEDecoder.prototype.write","buf2","alloc","j","slice","toString","Utf16BEDecoder.prototype.end","utf16","Utf16Encoder.prototype.write","Utf16Encoder.prototype.end","Utf16Decoder.prototype.write","push","concat","encoding","getDecoder","Utf16Decoder.prototype.end","res","trail"]
}
