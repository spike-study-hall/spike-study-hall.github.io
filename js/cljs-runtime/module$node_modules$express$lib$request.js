shadow$provide.module$node_modules$express$lib$request=function(global,require,module,exports){function defineGetter(obj,name,getter){Object.defineProperty(obj,name,{configurable:!0,enumerable:!0,get:getter})}var accepts=require("module$node_modules$accepts$index"),deprecate=require("module$node_modules$depd$lib$browser$index")("express"),isIP=require("shadow$empty").isIP,typeis=require("module$node_modules$type_is$index");global=require("module$node_modules$stream_http$index");var fresh=require("module$node_modules$fresh$index"),
parseRange=require("module$node_modules$range_parser$index"),parse=require("module$node_modules$parseurl$index"),proxyaddr=require("module$node_modules$proxy_addr$index");require=Object.create(global.IncomingMessage.prototype);module.exports=require;require.get=require.header=function(name){if(!name)throw new TypeError("name argument is required to req.get");if("string"!==typeof name)throw new TypeError("name must be a string to req.get");name=name.toLowerCase();switch(name){case "referer":case "referrer":return this.headers.referrer||
this.headers.referer;default:return this.headers[name]}};require.accepts=function(){var accept=accepts(this);return accept.types.apply(accept,arguments)};require.acceptsEncodings=function(){var accept=accepts(this);return accept.encodings.apply(accept,arguments)};require.acceptsEncoding=deprecate.function(require.acceptsEncodings,"req.acceptsEncoding: Use acceptsEncodings instead");require.acceptsCharsets=function(){var accept=accepts(this);return accept.charsets.apply(accept,arguments)};require.acceptsCharset=
deprecate.function(require.acceptsCharsets,"req.acceptsCharset: Use acceptsCharsets instead");require.acceptsLanguages=function(){var accept=accepts(this);return accept.languages.apply(accept,arguments)};require.acceptsLanguage=deprecate.function(require.acceptsLanguages,"req.acceptsLanguage: Use acceptsLanguages instead");require.range=function(size,options){var range=this.get("Range");if(range)return parseRange(size,range,options)};require.param=function(name,defaultValue){var params=this.params||
{},body=this.body||{},query=this.query||{};deprecate("req.param("+(1===arguments.length?"name":"name, default")+"): Use req.params, req.body, or req.query instead");return null!=params[name]&&params.hasOwnProperty(name)?params[name]:null!=body[name]?body[name]:null!=query[name]?query[name]:defaultValue};require.is=function(types){var arr=types;if(!Array.isArray(types)){arr=Array(arguments.length);for(var i=0;i<arr.length;i++)arr[i]=arguments[i]}return typeis(this,arr)};defineGetter(require,"protocol",
function(){var proto=this.connection.encrypted?"https":"http";if(!this.app.get("trust proxy fn")(this.connection.remoteAddress,0))return proto;proto=this.get("X-Forwarded-Proto")||proto;var index=proto.indexOf(",");return-1!==index?proto.substring(0,index).trim():proto.trim()});defineGetter(require,"secure",function(){return"https"===this.protocol});defineGetter(require,"ip",function(){var trust=this.app.get("trust proxy fn");return proxyaddr(this,trust)});defineGetter(require,"ips",function(){var trust=
this.app.get("trust proxy fn");trust=proxyaddr.all(this,trust);trust.reverse().pop();return trust});defineGetter(require,"subdomains",function(){var hostname=this.hostname;if(!hostname)return[];var offset=this.app.get("subdomain offset");return(isIP(hostname)?[hostname]:hostname.split(".").reverse()).slice(offset)});defineGetter(require,"path",function(){return parse(this).pathname});defineGetter(require,"hostname",function(){var trust=this.app.get("trust proxy fn"),host=this.get("X-Forwarded-Host");
host&&trust(this.connection.remoteAddress,0)?-1!==host.indexOf(",")&&(host=host.substring(0,host.indexOf(",")).trimRight()):host=this.get("Host");if(host)return trust="["===host[0]?host.indexOf("]")+1:0,trust=host.indexOf(":",trust),-1!==trust?host.substring(0,trust):host});defineGetter(require,"host",deprecate.function(function(){return this.hostname},"req.host: Use req.hostname instead"));defineGetter(require,"fresh",function(){var method=this.method,res=this.res,status=res.statusCode;return"GET"!==
method&&"HEAD"!==method?!1:200<=status&&300>status||304===status?fresh(this.headers,{etag:res.get("ETag"),"last-modified":res.get("Last-Modified")}):!1});defineGetter(require,"stale",function(){return!this.fresh});defineGetter(require,"xhr",function(){return"xmlhttprequest"===(this.get("X-Requested-With")||"").toLowerCase()})}
//# sourceMappingURL=module$node_modules$express$lib$request.js.map
