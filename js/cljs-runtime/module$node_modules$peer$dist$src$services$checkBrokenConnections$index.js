shadow$provide.module$node_modules$peer$dist$src$services$checkBrokenConnections$index=function(global,require,module,exports){Object.defineProperty(exports,"__esModule",{value:!0});global=function($jscomp$destructuring$var0){var realm=$jscomp$destructuring$var0.realm,config=$jscomp$destructuring$var0.config,checkInterval=void 0===$jscomp$destructuring$var0.checkInterval?300:$jscomp$destructuring$var0.checkInterval;$jscomp$destructuring$var0=$jscomp$destructuring$var0.onClose;this.timeoutId=null;
this.realm=realm;this.config=config;this.onClose=$jscomp$destructuring$var0;this.checkInterval=checkInterval};global.prototype.start=function(){var $jscomp$this=this;this.timeoutId&&clearTimeout(this.timeoutId);this.timeoutId=setTimeout(function(){$jscomp$this.checkConnections();$jscomp$this.timeoutId=null;$jscomp$this.start()},this.checkInterval)};global.prototype.stop=function(){this.timeoutId&&(clearTimeout(this.timeoutId),this.timeoutId=null)};global.prototype.checkConnections=function(){var _a,
_b,clientsIds=this.realm.getClientsIds(),now=(new Date).getTime(),aliveTimeout=this.config.alive_timeout;clientsIds=$jscomp.makeIterator(clientsIds);for(var $jscomp$key$clientId=clientsIds.next();!$jscomp$key$clientId.done;$jscomp$key$clientId=clientsIds.next()){$jscomp$key$clientId=$jscomp$key$clientId.value;var client=this.realm.getClientById($jscomp$key$clientId);if(!(now-client.getLastPing()<aliveTimeout))try{null===(_a=client.getSocket())||void 0===_a?void 0:_a.close()}finally{this.realm.clearMessageQueue($jscomp$key$clientId),
this.realm.removeClientById($jscomp$key$clientId),client.setSocket(null),null===(_b=this.onClose)||void 0===_b?void 0:_b.call(this,client)}}};exports.CheckBrokenConnections=global}
//# sourceMappingURL=module$node_modules$peer$dist$src$services$checkBrokenConnections$index.js.map
