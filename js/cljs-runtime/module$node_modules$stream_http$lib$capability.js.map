{
"version":3,
"file":"module$node_modules$stream_http$lib$capability.js",
"lineCount":3,
"mappings":"AAAAA,cAAA,+CAAA,CAAmE,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CAiB3GC,QAASA,OAAO,EAAG,CAElB,GAAYC,IAAAA,EAAZ,GAAIC,GAAJ,CAAuB,MAAOA,IAE9B,IAAIN,MAAAO,eAAJ,CAA2B,CAC1BD,GAAA,CAAM,IAAIN,MAAAO,eAIV,IAAI,CACHD,GAAAE,KAAA,CAAS,KAAT,CAAgBR,MAAAS,eAAA,CAAwB,GAAxB,CAA8B,qBAA9C,CADG,CAEF,MAAMC,GAAN,CAAS,CACVJ,GAAA,CAAM,IADI,CAPe,CAA3B,IAYCA,IAAA,CAAM,IAEP,OAAOA,IAlBW,CAqBnBK,QAASA,iBAAiB,CAACC,IAAD,CAAO,CAChC,IAAIN,IAAMF,MAAA,EACV,IAAI,CAACE,GAAL,CAAU,MAAO,CAAA,CACjB,IAAI,CAEH,MADAA,IAAAO,aACO,CADYD,IACZ,CAAAN,GAAAO,aAAA,GAAqBD,IAFzB,CAGF,MAAOF,GAAP,CAAU,EACZ,MAAO,CAAA,CAPyB,CA+BjCI,QAASA,WAAW,CAACC,KAAD,CAAQ,CAC3B,MAAwB,UAAxB;AAAO,MAAOA,MADa,CApE5BZ,OAAAa,MAAA,CAAgBF,UAAA,CAAWd,MAAAgB,MAAX,CAAhB,EAA4CF,UAAA,CAAWd,MAAAiB,eAAX,CAE5Cd,QAAAe,eAAA,CAAyBJ,UAAA,CAAWd,MAAAmB,eAAX,CAEzBhB,QAAAiB,gBAAA,CAA0BN,UAAA,CAAWd,MAAAqB,gBAAX,CAE1BlB,QAAAmB,gBAAA,CAA0B,CAAA,CAC1B,IAAI,CACH,IAAIC,IAAJ,CAAS,CAAC,IAAIC,WAAJ,CAAgB,CAAhB,CAAD,CAAT,CACA,CAAArB,OAAAmB,gBAAA,CAA0B,CAAA,CAFvB,CAGF,MAAOZ,CAAP,CAAU,EAwCRe,MAAAA,EADAC,OACAD,CADgD,WAChDA,GADkB,MAAOzB,OAAAwB,YACzBC,GAA+BX,UAAA,CAAWd,MAAAwB,YAAAG,UAAAC,MAAX,CAInCzB,QAAA0B,YAAA,CAAsB1B,OAAAa,MAAtB,EAAwCU,OAAxC,EAA2Df,gBAAA,CAAiB,aAAjB,CAI3DR,QAAA2B,SAAA,CAAmB,CAAC3B,OAAAa,MAApB;AAAqCS,MAArC,EAAkDd,gBAAA,CAAiB,WAAjB,CAClDR,QAAA4B,sBAAA,CAAgC,CAAC5B,OAAAa,MAAjC,EAAkDU,OAAlD,EACCf,gBAAA,CAAiB,yBAAjB,CAIDR,QAAA6B,iBAAA,CAA2B7B,OAAAa,MAA3B,GAA6CZ,MAAA,EAAA,CAAWU,UAAA,CAAWV,MAAA,EAAA4B,iBAAX,CAAX,CAAmD,CAAA,CAAhG,CAEA7B,QAAA8B,QAAA,CAAkBnB,UAAA,CAAWd,MAAAkC,QAAX,CAMlB,KAAA5B,IAAM,IAzEqG;",
"sources":["node_modules/stream-http/lib/capability.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$stream_http$lib$capability\"] = function(global,require,module,exports) {\nexports.fetch = isFunction(global.fetch) && isFunction(global.ReadableStream)\n\nexports.writableStream = isFunction(global.WritableStream)\n\nexports.abortController = isFunction(global.AbortController)\n\nexports.blobConstructor = false\ntry {\n\tnew Blob([new ArrayBuffer(1)])\n\texports.blobConstructor = true\n} catch (e) {}\n\n// The xhr request to example.com may violate some restrictive CSP configurations,\n// so if we're running in a browser that supports `fetch`, avoid calling getXHR()\n// and assume support for certain features below.\nvar xhr\nfunction getXHR () {\n\t// Cache the xhr value\n\tif (xhr !== undefined) return xhr\n\n\tif (global.XMLHttpRequest) {\n\t\txhr = new global.XMLHttpRequest()\n\t\t// If XDomainRequest is available (ie only, where xhr might not work\n\t\t// cross domain), use the page location. Otherwise use example.com\n\t\t// Note: this doesn't actually make an http request.\n\t\ttry {\n\t\t\txhr.open('GET', global.XDomainRequest ? '/' : 'https://example.com')\n\t\t} catch(e) {\n\t\t\txhr = null\n\t\t}\n\t} else {\n\t\t// Service workers don't have XHR\n\t\txhr = null\n\t}\n\treturn xhr\n}\n\nfunction checkTypeSupport (type) {\n\tvar xhr = getXHR()\n\tif (!xhr) return false\n\ttry {\n\t\txhr.responseType = type\n\t\treturn xhr.responseType === type\n\t} catch (e) {}\n\treturn false\n}\n\n// For some strange reason, Safari 7.0 reports typeof global.ArrayBuffer === 'object'.\n// Safari 7.1 appears to have fixed this bug.\nvar haveArrayBuffer = typeof global.ArrayBuffer !== 'undefined'\nvar haveSlice = haveArrayBuffer && isFunction(global.ArrayBuffer.prototype.slice)\n\n// If fetch is supported, then arraybuffer will be supported too. Skip calling\n// checkTypeSupport(), since that calls getXHR().\nexports.arraybuffer = exports.fetch || (haveArrayBuffer && checkTypeSupport('arraybuffer'))\n\n// These next two tests unavoidably show warnings in Chrome. Since fetch will always\n// be used if it's available, just return false for these to avoid the warnings.\nexports.msstream = !exports.fetch && haveSlice && checkTypeSupport('ms-stream')\nexports.mozchunkedarraybuffer = !exports.fetch && haveArrayBuffer &&\n\tcheckTypeSupport('moz-chunked-arraybuffer')\n\n// If fetch is supported, then overrideMimeType will be supported too. Skip calling\n// getXHR().\nexports.overrideMimeType = exports.fetch || (getXHR() ? isFunction(getXHR().overrideMimeType) : false)\n\nexports.vbArray = isFunction(global.VBArray)\n\nfunction isFunction (value) {\n\treturn typeof value === 'function'\n}\n\nxhr = null // Help gc\n\n};"],
"names":["shadow$provide","global","require","module","exports","getXHR","undefined","xhr","XMLHttpRequest","open","XDomainRequest","e","checkTypeSupport","type","responseType","isFunction","value","fetch","ReadableStream","writableStream","WritableStream","abortController","AbortController","blobConstructor","Blob","ArrayBuffer","haveSlice","haveArrayBuffer","prototype","slice","arraybuffer","msstream","mozchunkedarraybuffer","overrideMimeType","vbArray","VBArray"]
}
