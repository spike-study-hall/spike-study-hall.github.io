shadow$provide.module$node_modules$body_parser$lib$types$urlencoded=function(global,require,module,exports){function extendedparser(options){var parameterLimit=void 0!==options.parameterLimit?options.parameterLimit:1E3,parse=parser("qs");if(isNaN(parameterLimit)||1>parameterLimit)throw new TypeError("option parameterLimit must be a positive number");isFinite(parameterLimit)&&(parameterLimit|=0);return function(body){var paramCount=parameterCount(body,parameterLimit);if(void 0===paramCount)throw debug("too many parameters"),
createError(413,"too many parameters",{type:"parameters.too.many"});paramCount=Math.max(100,paramCount);debug("parse extended urlencoding");return parse(body,{allowPrototypes:!0,arrayLimit:paramCount,depth:Infinity,parameterLimit:parameterLimit})}}function parameterCount(body,limit){for(var count=0,index=0;-1!==(index=body.indexOf("\x26",index));)if(count++,index++,count===limit)return;return count}function parser(name){var mod=parsers[name];if(void 0!==mod)return mod.parse;switch(name){case "qs":mod=
require("module$node_modules$qs$lib$index");break;case "querystring":mod=require("module$node_modules$querystring_es3$index")}parsers[name]=mod;return mod.parse}function simpleparser(options){var parameterLimit=void 0!==options.parameterLimit?options.parameterLimit:1E3,parse=parser("querystring");if(isNaN(parameterLimit)||1>parameterLimit)throw new TypeError("option parameterLimit must be a positive number");isFinite(parameterLimit)&&(parameterLimit|=0);return function(body){if(void 0===parameterCount(body,
parameterLimit))throw debug("too many parameters"),createError(413,"too many parameters",{type:"parameters.too.many"});debug("parse urlencoding");return parse(body,void 0,void 0,{maxKeys:parameterLimit})}}function typeChecker(type){return function(req){return!!typeis(req,type)}}var bytes=require("module$node_modules$bytes$index"),contentType=require("module$node_modules$content_type$index"),createError=require("module$node_modules$http_errors$index"),debug=require("module$node_modules$debug$src$browser")("body-parser:urlencoded"),
deprecate=require("module$node_modules$depd$lib$browser$index")("body-parser"),read=require("module$node_modules$body_parser$lib$read"),typeis=require("module$node_modules$type_is$index");module.exports=function(options){function parse(body){return body.length?queryparse(body):{}}options=options||{};void 0===options.extended&&deprecate("undefined extended: provide extended option");var extended=!1!==options.extended,inflate=!1!==options.inflate,limit="number"!==typeof options.limit?bytes.parse(options.limit||
"100kb"):options.limit,type=options.type||"application/x-www-form-urlencoded",verify=options.verify||!1;if(!1!==verify&&"function"!==typeof verify)throw new TypeError("option verify must be function");var queryparse=extended?extendedparser(options):simpleparser(options),shouldParse="function"!==typeof type?typeChecker(type):type;return function(req,res,next){if(req._body)debug("body already parsed"),next();else if(req.body=req.body||{},typeis.hasBody(req))if(debug("content-type %j",req.headers["content-type"]),
shouldParse(req)){try{var JSCompiler_inline_result=(contentType.parse(req).parameters.charset||"").toLowerCase()}catch(e){JSCompiler_inline_result=void 0}JSCompiler_inline_result=JSCompiler_inline_result||"utf-8";"utf-8"!==JSCompiler_inline_result?(debug("invalid charset"),next(createError(415,'unsupported charset "'+JSCompiler_inline_result.toUpperCase()+'"',{charset:JSCompiler_inline_result,type:"charset.unsupported"}))):read(req,res,next,parse,debug,{debug:debug,encoding:JSCompiler_inline_result,
inflate:inflate,limit:limit,verify:verify})}else debug("skip parsing"),next();else debug("skip empty body"),next()}};var parsers=Object.create(null)}
//# sourceMappingURL=module$node_modules$body_parser$lib$types$urlencoded.js.map
