{
"version":3,
"file":"module$node_modules$statuses$index.js",
"lineCount":2,
"mappings":"AAAAA,cAAA,mCAAA,CAAuD,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CA6F/FC,QAASA,OAAO,CAACC,IAAD,CAAO,CACrB,GAAoB,QAApB,GAAI,MAAOA,KAAX,CAA8B,CAC5B,GAAI,CAACD,MAAA,CAAOC,IAAP,CAAL,CAAmB,KAAUC,MAAJ,CAAU,uBAAV,CAAoCD,IAApC,CAAN,CACnB,MAAOA,KAFqB,CAK9B,GAAoB,QAApB,GAAI,MAAOA,KAAX,CACE,KAAM,KAAIE,SAAJ,CAAc,iCAAd,CAAN,CAIF,IAAIC,EAAIC,QAAA,CAASJ,IAAT,CAAe,EAAf,CACR,IAAI,CAACK,KAAA,CAAMF,CAAN,CAAL,CAAe,CACb,GAAI,CAACJ,MAAA,CAAOI,CAAP,CAAL,CAAgB,KAAUF,MAAJ,CAAU,uBAAV,CAAoCE,CAApC,CAAN,CAChB,MAAOA,EAFM,CAKfA,CAAA,CAAIJ,MAAA,CAAOC,IAAAM,YAAA,EAAP,CACJ,IAAI,CAACH,CAAL,CAAQ,KAAUF,MAAJ,CAAU,2BAAV,CAAwCD,IAAxC,CAA+C,GAA/C,CAAN,CACR,MAAOG,EAnBc,CA9EnBI,MAAAA,CAAQX,OAAA,CAAQ,yCAAR,CAOZC;MAAAC,QAAA,CAAiBC,MAGjBA,OAAAS,aAAA,CAAsBD,MAGtBR,OAAAQ,MAAA,CAgCAE,QAA6B,CAACC,QAAD,CAAWH,KAAX,CAAkB,CAC7C,IAAII,IAAM,EAEVC,OAAAC,KAAA,CAAYN,KAAZ,CAAAO,QAAA,CAA2BC,QAAqB,CAACf,IAAD,CAAO,CACrD,IAAIgB,QAAUT,KAAA,CAAMP,IAAN,CACVD,KAAAA,CAASkB,MAAA,CAAOjB,IAAP,CAGbU,SAAA,CAASX,IAAT,CAAA,CAAmBiB,OACnBN,SAAA,CAASM,OAAT,CAAA,CAAoBjB,IACpBW,SAAA,CAASM,OAAAV,YAAA,EAAT,CAAA,CAAkCP,IAGlCY,IAAAO,KAAA,CAASnB,IAAT,CAVqD,CAAvD,CAaA,OAAOY,IAhBsC,CAhChC,CAAoBZ,MAApB,CAA4BQ,MAA5B,CAGfR,OAAAoB,SAAA,CAAkB,CAChB,IAAK,CAAA,CADW,CAEhB,IAAK,CAAA,CAFW,CAGhB,IAAK,CAAA,CAHW,CAIhB,IAAK,CAAA,CAJW,CAKhB,IAAK,CAAA,CALW,CAMhB,IAAK,CAAA,CANW,CAOhB,IAAK,CAAA,CAPW,CAWlBpB,OAAAqB,MAAA,CAAe,CACb,IAAK,CAAA,CADQ,CAEb,IAAK,CAAA,CAFQ,CAGb,IAAK,CAAA,CAHQ,CAOfrB,OAAAsB,MAAA,CAAe,CACb,IAAK,CAAA,CADQ,CAEb,IAAK,CAAA,CAFQ,CAGb,IAAK,CAAA,CAHQ,CAjDgF;",
"sources":["node_modules/statuses/index.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$statuses$index\"] = function(global,require,module,exports) {\n/*!\n * statuses\n * Copyright(c) 2014 Jonathan Ong\n * Copyright(c) 2016 Douglas Christopher Wilson\n * MIT Licensed\n */\n\n'use strict'\n\n/**\n * Module dependencies.\n * @private\n */\n\nvar codes = require('./codes.json')\n\n/**\n * Module exports.\n * @public\n */\n\nmodule.exports = status\n\n// status code to message map\nstatus.STATUS_CODES = codes\n\n// array of status codes\nstatus.codes = populateStatusesMap(status, codes)\n\n// status codes for redirects\nstatus.redirect = {\n  300: true,\n  301: true,\n  302: true,\n  303: true,\n  305: true,\n  307: true,\n  308: true\n}\n\n// status codes for empty bodies\nstatus.empty = {\n  204: true,\n  205: true,\n  304: true\n}\n\n// status codes for when you should retry the request\nstatus.retry = {\n  502: true,\n  503: true,\n  504: true\n}\n\n/**\n * Populate the statuses map for given codes.\n * @private\n */\n\nfunction populateStatusesMap (statuses, codes) {\n  var arr = []\n\n  Object.keys(codes).forEach(function forEachCode (code) {\n    var message = codes[code]\n    var status = Number(code)\n\n    // Populate properties\n    statuses[status] = message\n    statuses[message] = status\n    statuses[message.toLowerCase()] = status\n\n    // Add to array\n    arr.push(status)\n  })\n\n  return arr\n}\n\n/**\n * Get the status code.\n *\n * Given a number, this will throw if it is not a known status\n * code, otherwise the code will be returned. Given a string,\n * the string will be parsed for a number and return the code\n * if valid, otherwise will lookup the code assuming this is\n * the status message.\n *\n * @param {string|number} code\n * @returns {number}\n * @public\n */\n\nfunction status (code) {\n  if (typeof code === 'number') {\n    if (!status[code]) throw new Error('invalid status code: ' + code)\n    return code\n  }\n\n  if (typeof code !== 'string') {\n    throw new TypeError('code must be a number or string')\n  }\n\n  // '403'\n  var n = parseInt(code, 10)\n  if (!isNaN(n)) {\n    if (!status[n]) throw new Error('invalid status code: ' + n)\n    return n\n  }\n\n  n = status[code.toLowerCase()]\n  if (!n) throw new Error('invalid status message: \"' + code + '\"')\n  return n\n}\n\n};"],
"names":["shadow$provide","global","require","module","exports","status","code","Error","TypeError","n","parseInt","isNaN","toLowerCase","codes","STATUS_CODES","populateStatusesMap","statuses","arr","Object","keys","forEach","forEachCode","message","Number","push","redirect","empty","retry"]
}
