{
"version":3,
"file":"module$node_modules$body_parser$index.js",
"lineCount":4,
"mappings":"AAAAA,cAAA,sCAAA,CAA0D,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CAyHlGC,QAASA,mBAAmB,CAACC,IAAD,CAAO,CACjC,MAAOC,SAAa,EAAG,CAWnBC,IAAAA,yBAASC,OAAA,CAVOH,IAUP,CAEb,IAAeI,IAAAA,EAAf,GAAIF,wBAAJ,CAAA,CAKA,OAjBoBF,IAiBpB,EACE,KAAK,MAAL,CACEE,wBAAA,CAASN,OAAA,CAAQ,gDAAR,CACT,MACF,MAAK,KAAL,CACEM,wBAAA,CAASN,OAAA,CAAQ,+CAAR,CACT,MACF,MAAK,MAAL,CACEM,wBAAA,CAASN,OAAA,CAAQ,gDAAR,CACT;KACF,MAAK,YAAL,CACEM,wBAAA,CAASN,OAAA,CAAQ,sDAAR,CAXb,CAgBA,wBAAA,CAAQO,OAAA,CAjCYH,IAiCZ,CAAR,CAA8BE,wBArB9B,CAZE,MAAO,yBADc,CADU,CA3G/BG,MAAAA,CAAYT,OAAA,CAAQ,4CAAR,CAAA,CAAgB,aAAhB,CAOhB,KAAIO,QAAUG,MAAAC,OAAA,CAAc,IAAd,CAgBdT,QAAA,CAAUD,MAAAC,QAAV,CAA2BO,MAAAG,SAAA,CAwD3BC,QAAoB,CAACC,OAAD,CAAU,CAC5B,IAAIC,KAAO,EAGX,IAAID,OAAJ,CACE,IAAKE,IAAIA,IAAT,GAAiBF,QAAjB,CACe,MAAb,GAAIE,IAAJ,GACED,IAAA,CAAKC,IAAL,CADF,CACeF,OAAA,CAAQE,IAAR,CADf,CAMJ,KAAIC,YAAcf,OAAAgB,WAAA,CAAmBH,IAAnB,CAAlB;AACII,MAAQjB,OAAAkB,KAAA,CAAaL,IAAb,CAEZ,OAAOF,SAAoB,CAACQ,GAAD,CAAMC,GAAN,CAAWC,IAAX,CAAiB,CAC1CJ,KAAA,CAAME,GAAN,CAAWC,GAAX,CAAgB,QAAS,CAACE,GAAD,CAAM,CAC7B,GAAIA,GAAJ,CAAS,MAAOD,KAAA,CAAKC,GAAL,CAChBP,YAAA,CAAYI,GAAZ,CAAiBC,GAAjB,CAAsBC,IAAtB,CAF6B,CAA/B,CAD0C,CAfhB,CAxDH,CACzB,wDADyB,CAQ3Bb,OAAAe,eAAA,CAAsBvB,OAAtB,CAA+B,MAA/B,CAAuC,CACrCwB,aAAc,CAAA,CADuB,CAErCC,WAAY,CAAA,CAFyB,CAGrCtB,IAAKF,kBAAA,CAAmB,MAAnB,CAHgC,CAAvC,CAWAO,OAAAe,eAAA,CAAsBvB,OAAtB,CAA+B,KAA/B,CAAsC,CACpCwB,aAAc,CAAA,CADsB,CAEpCC,WAAY,CAAA,CAFwB,CAGpCtB,IAAKF,kBAAA,CAAmB,KAAnB,CAH+B,CAAtC,CAWAO,OAAAe,eAAA,CAAsBvB,OAAtB,CAA+B,MAA/B,CAAuC,CACrCwB,aAAc,CAAA,CADuB,CAErCC,WAAY,CAAA,CAFyB,CAGrCtB,IAAKF,kBAAA,CAAmB,MAAnB,CAHgC,CAAvC,CAWAO,OAAAe,eAAA,CAAsBvB,OAAtB;AAA+B,YAA/B,CAA6C,CAC3CwB,aAAc,CAAA,CAD6B,CAE3CC,WAAY,CAAA,CAF+B,CAG3CtB,IAAKF,kBAAA,CAAmB,YAAnB,CAHsC,CAA7C,CA9EkG;",
"sources":["node_modules/body-parser/index.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$body_parser$index\"] = function(global,require,module,exports) {\n/*!\n * body-parser\n * Copyright(c) 2014-2015 Douglas Christopher Wilson\n * MIT Licensed\n */\n\n'use strict'\n\n/**\n * Module dependencies.\n * @private\n */\n\nvar deprecate = require('depd')('body-parser')\n\n/**\n * Cache of loaded parsers.\n * @private\n */\n\nvar parsers = Object.create(null)\n\n/**\n * @typedef Parsers\n * @type {function}\n * @property {function} json\n * @property {function} raw\n * @property {function} text\n * @property {function} urlencoded\n */\n\n/**\n * Module exports.\n * @type {Parsers}\n */\n\nexports = module.exports = deprecate.function(bodyParser,\n  'bodyParser: use individual json/urlencoded middlewares')\n\n/**\n * JSON parser.\n * @public\n */\n\nObject.defineProperty(exports, 'json', {\n  configurable: true,\n  enumerable: true,\n  get: createParserGetter('json')\n})\n\n/**\n * Raw parser.\n * @public\n */\n\nObject.defineProperty(exports, 'raw', {\n  configurable: true,\n  enumerable: true,\n  get: createParserGetter('raw')\n})\n\n/**\n * Text parser.\n * @public\n */\n\nObject.defineProperty(exports, 'text', {\n  configurable: true,\n  enumerable: true,\n  get: createParserGetter('text')\n})\n\n/**\n * URL-encoded parser.\n * @public\n */\n\nObject.defineProperty(exports, 'urlencoded', {\n  configurable: true,\n  enumerable: true,\n  get: createParserGetter('urlencoded')\n})\n\n/**\n * Create a middleware to parse json and urlencoded bodies.\n *\n * @param {object} [options]\n * @return {function}\n * @deprecated\n * @public\n */\n\nfunction bodyParser (options) {\n  var opts = {}\n\n  // exclude type option\n  if (options) {\n    for (var prop in options) {\n      if (prop !== 'type') {\n        opts[prop] = options[prop]\n      }\n    }\n  }\n\n  var _urlencoded = exports.urlencoded(opts)\n  var _json = exports.json(opts)\n\n  return function bodyParser (req, res, next) {\n    _json(req, res, function (err) {\n      if (err) return next(err)\n      _urlencoded(req, res, next)\n    })\n  }\n}\n\n/**\n * Create a getter for loading a parser.\n * @private\n */\n\nfunction createParserGetter (name) {\n  return function get () {\n    return loadParser(name)\n  }\n}\n\n/**\n * Load a parser module.\n * @private\n */\n\nfunction loadParser (parserName) {\n  var parser = parsers[parserName]\n\n  if (parser !== undefined) {\n    return parser\n  }\n\n  // this uses a switch for static require analysis\n  switch (parserName) {\n    case 'json':\n      parser = require('./lib/types/json')\n      break\n    case 'raw':\n      parser = require('./lib/types/raw')\n      break\n    case 'text':\n      parser = require('./lib/types/text')\n      break\n    case 'urlencoded':\n      parser = require('./lib/types/urlencoded')\n      break\n  }\n\n  // store to prevent invoking require()\n  return (parsers[parserName] = parser)\n}\n\n};"],
"names":["shadow$provide","global","require","module","exports","createParserGetter","name","get","parser","parsers","undefined","deprecate","Object","create","function","bodyParser","options","opts","prop","_urlencoded","urlencoded","_json","json","req","res","next","err","defineProperty","configurable","enumerable"]
}
