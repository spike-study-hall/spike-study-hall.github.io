{"version":3,"sources":["cats/monad/exception.cljc"],"mappings":"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","names":["cats.monad.exception/throw-exception","message","js/Error","cats.monad.exception/throwable?","e","this__4385__auto__","k__4386__auto__","this__4387__auto__","k50071","else__4388__auto__","G__50088","cljs.core/Keyword","success","cljs.core.get.cljs$core$IFn$_invoke$arity$3","__extmap","this__4404__auto__","f__4405__auto__","init__4406__auto__","cljs.core.reduce.cljs$core$IFn$_invoke$arity$3","ret__4407__auto__","p__50089","vec__50090","k__4408__auto__","cljs.core.nth.cljs$core$IFn$_invoke$arity$3","v__4409__auto__","this__4399__auto__","writer__4400__auto__","opts__4401__auto__","pr-pair__4402__auto__","keyval__4403__auto__","cljs.core/pr-sequential-writer","cljs.core.concat.cljs$core$IFn$_invoke$arity$2","cljs.core/PersistentVector","G__50070","cljs.core/RecordIter","cljs.core/-iterator","cljs.core/nil-iter","cljs.core/PROTOCOL_SENTINEL","this__4383__auto__","__meta","this__4380__auto__","__hash","this__4389__auto__","cljs.core/count","this__4381__auto__","h__4243__auto__","fexpr__50094","coll__4382__auto__","cljs.core/hash-unordered-coll","this50072","other50073","cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2","this__4394__auto__","k__4395__auto__","cljs.core/contains?","cljs.core.dissoc.cljs$core$IFn$_invoke$arity$2","cljs.core/-with-meta","cljs.core.into.cljs$core$IFn$_invoke$arity$2","cljs.core/not-empty","this__4392__auto__","k__4393__auto__","pred__50095","cljs.core/keyword-identical?","expr__50096","G__50098","G__50099","cljs.core.assoc.cljs$core$IFn$_invoke$arity$3","this__4397__auto__","cljs.core/seq","cljs.core/MapEntry","this__4384__auto__","this__4390__auto__","entry__4391__auto__","cljs.core/vector?","cljs.core._nth.cljs$core$IFn$_invoke$arity$2","cljs.core/-conj","cats.monad.exception/Success","this__4428__auto__","cljs.core/List","writer__4429__auto__","cljs.core/-write","G__50075","extmap__4424__auto__","G__50104","cljs.core/record?","cats.monad.exception/->Success","cats.monad.exception/map->Success","_","cats.monad.exception/context","cljs.core.pr_str.cljs$core$IFn$_invoke$arity$variadic","k50107","G__50112","failure","p__50115","vec__50116","G__50106","fexpr__50130","this50108","other50109","pred__50136","expr__50137","G__50139","G__50140","cats.monad.exception/Failure","G__50110","G__50149","cats.monad.exception/->Failure","cats.monad.exception/map->Failure","cljs.core.alter_meta_BANG_.cljs$core$IFn$_invoke$arity$variadic","cljs.core/assoc","cats.util/make-printable","cats.monad.exception/success","v","var_args","G__50156","cats.monad.exception/failure","cats.monad.exception.failure.cljs$core$IFn$_invoke$arity$2","cljs.core.ex_info.cljs$core$IFn$_invoke$arity$2","cats.monad.exception/success?","cats.monad.exception/failure?","cats.monad.exception/exception?","cljs.core/native-satisfies?","cats.protocols/Contextual","cats.protocols/-get-context","G__50169","cats.monad.exception/extract","mv","cats.protocols/-extract","default","cats.monad.exception/exec-try-on","func","e50173","result","cats.monad.exception.failure.cljs$core$IFn$_invoke$arity$1","cats.monad.exception/exec-try-or-else","defaultvalue","cats.monad.exception/exec-try-or-recover","recoverfn","cats.context/context?","cats.context/throw-illegal-argument","*context*-orig-val__50175","cats.context/*context*","*context*-temp-val__50176","G__50177","cats.monad.exception/wrap","metadata","cljs.core/meta","args","func__49986__auto__","cljs.core.apply.cljs$core$IFn$_invoke$arity$2","cljs.core/with-meta","js/cats","js/cats.monad","js/cats.monad.exception","js/cats.monad.exception.t_cats$monad$exception50192","cats.monad.exception/t_cats$monad$exception50192","_50194","meta50193","this__4374__auto__","writer__4375__auto__","opt__4376__auto__","cats.monad.exception/->t_cats$monad$exception50192","f","s","G__50195","m","af","av","cats.protocols/-repr","G__50196","cljs.core/type"],"sourcesContent":[";; Copyright (c) 2014-2016 Andrey Antukh <niwi@niwi.nz>\n;; Copyright (c) 2014-2016 Alejandro G\u00f3mez <alejandro@dialelo.com>\n;; All rights reserved.\n;;\n;; Redistribution and use in source and binary forms, with or without\n;; modification, are permitted provided that the following conditions\n;; are met:\n;;\n;; 1. Redistributions of source code must retain the above copyright\n;;    notice, this list of conditions and the following disclaimer.\n;; 2. Redistributions in binary form must reproduce the above copyright\n;;    notice, this list of conditions and the following disclaimer in the\n;;    documentation and/or other materials provided with the distribution.\n;;\n;; THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR\n;; IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n;; OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n;; IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,\n;; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n;; NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n;; DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\n;; THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n;; (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF\n;; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n\n(ns cats.monad.exception\n  \"The Exception monad.\n\n  Also known as Try monad, popularized by Scala.\n\n  It represents a computation that may either result\n  in an exception or return a successfully computed\n  value. Is very similar to Either monad, but is\n  semantically different.\n\n  It consists in two types: Success and Failure. The\n  Success type is a simple wrapper like Right of Either\n  monad. But the Failure type is slightly different\n  from Left, because it is forced to wrap an instance\n  of Throwable (or Error in cljs).\n\n  The most common use case of this monad is for wrap\n  third party libraries that uses standard Exception\n  based error handling. In normal circumstances you\n  should use Either instead.\n\n  The types defined for Exception monad (Success and\n  Failure) also implementes the clojure IDeref interface\n  which facilitates libraries developing using monadic\n  composition without forcing a user of that library\n  to use or understand monads.\n\n  That is because when you will dereference the\n  failure instance, it will reraise the containing\n  exception.\"\n\n  (:require [cats.protocols :as p]\n            [cats.util :as util]\n            #?(:clj [cats.context :as ctx]\n               :cljs [cats.context :as ctx :include-macros true]))\n  #?(:cljs\n     (:require-macros [cats.monad.exception :refer (try-on)])))\n\n;; --- Helpers\n\n(defn throw-exception\n  [^String message]\n  (throw (#?(:clj IllegalArgumentException.\n             :cljs js/Error.)\n            message)))\n\n(defn throwable?\n  \"Return true if `v` is an instance of\n  the Throwable or js/Error type.\"\n  [e]\n  (instance? #?(:clj Exception :cljs js/Error) e))\n\n;; --- Types and implementations.\n\n(declare context)\n\n(defrecord Success [success]\n  p/Contextual\n  (-get-context [_] context)\n\n  p/Extract\n  (-extract [_] success)\n\n  p/Printable\n  (-repr [_]\n    (str \"#<Success \" (pr-str success) \">\"))\n\n  #?@(:cljs [cljs.core/IDeref\n             (-deref [_] success)]\n      :clj  [clojure.lang.IDeref\n             (deref [_] success)]))\n\n(defrecord Failure [failure]\n  p/Contextual\n  (-get-context [_] context)\n\n  p/Extract\n  (-extract [_] failure)\n\n  p/Printable\n  (-repr [_]\n    (str \"#<Failure \" (pr-str failure) \">\"))\n\n  #?@(:cljs [cljs.core/IDeref\n             (-deref [_] (throw failure))]\n      :clj  [clojure.lang.IDeref\n             (deref [_] (throw failure))]))\n\n(alter-meta! #'->Success assoc :private true)\n(alter-meta! #'->Failure assoc :private true)\n\n(util/make-printable Success)\n(util/make-printable Failure)\n\n(defn success\n  \"A Success type constructor.\n\n  It wraps any arbitrary value into\n  success type.\"\n  [v]\n  (Success. v))\n\n(defn failure\n  \"A failure type constructor.\n\n  If a provided parameter is an exception, it wraps\n  it in a `Failure` instance and return it. But if\n  a provided parameter is arbitrary data, it tries\n  create an exception from it using clojure `ex-info`\n  function.\n\n  Take care that `ex-info` function in clojurescript\n  differs a little bit from clojure.\"\n  ([e] (failure e \"\"))\n  ([e message]\n   (if (throwable? e)\n     (Failure. e)\n     (Failure. (ex-info message e)))))\n\n(defn success?\n  \"Return true if `v` is an instance of\n  the Success type.\"\n  [v]\n  (instance? Success v))\n\n(defn failure?\n  \"Return true if `v` is an instance of\n  the Failure type.\"\n  [v]\n  (instance? Failure v))\n\n(defn exception?\n  \"Return true in case of `v` is instance\n  of Exception monad.\"\n  [v]\n  (cond\n    (or (instance? Failure v)\n        (instance? Success v))\n    true\n\n    (satisfies? p/Contextual v)\n    (identical? (p/-get-context v) context)\n\n    :else false))\n\n(defn extract\n  \"Return inner value from exception monad.\n\n  This is a specialized version of `cats.core/extract`\n  for Exception monad types that allows set up\n  the default value.\n\n  If a provided `mv` is an instance of Failure type\n  it will re raise the inner exception. If you need\n  extract value without raising it, use `cats.core/extract`\n  function for it.\"\n  ([mv]\n   {:pre [(exception? mv)]}\n   (if (success? mv)\n     (p/-extract mv)\n     (throw (p/-extract mv))))\n  ([mv default]\n   {:pre [(exception? mv)]}\n   (if (success? mv)\n     (p/-extract mv)\n     default)))\n\n(defn ^{:no-doc true}\n  exec-try-on\n  [func]\n  (try\n    (let [result (func)]\n      (cond\n        (throwable? result) (failure result)\n        (exception? result) result\n        :else (success result)))\n    (catch #?(:clj Exception\n              :cljs js/Error) e (failure e))))\n\n(defn ^{:no-doc true}\n  exec-try-or-else\n  [func defaultvalue]\n  (let [result (exec-try-on func)]\n    (if (failure? result)\n      (success defaultvalue)\n      result)))\n\n(defn ^{:no-doc true}\n  exec-try-or-recover\n  [func recoverfn]\n  (let [result (exec-try-on func)]\n    (ctx/with-context context\n      (if (failure? result)\n        (recoverfn (.-failure ^Failure result))\n        result))))\n\n#?(:clj\n   (defmacro try-on\n    \"Wraps a computation and return success of failure.\"\n    [expr]\n    `(let [func# (fn [] ~expr)]\n       (exec-try-on func#))))\n\n#?(:clj\n   (defmacro try-or-else\n     [expr defaultvalue]\n     `(let [func# (fn [] ~expr)]\n        (exec-try-or-else func# ~defaultvalue))))\n\n#?(:clj\n   (defmacro try-or-recover\n     [expr func]\n     `(let [func# (fn [] ~expr)]\n        (exec-try-or-recover func# ~func))))\n\n(defn wrap\n  \"Wrap a function in a try monad.\n\n  Is a high order function that accept a function\n  as parameter and returns an other that returns\n  success or failure depending of result of the\n  first function.\"\n  [func]\n  (let [metadata (meta func)]\n    (-> (fn [& args] (try-on (apply func args)))\n        (with-meta metadata))))\n\n;; --- Monad definition\n\n(def ^{:no-doc true}\n  context\n  (reify\n    p/Context\n    p/Functor\n    (-fmap [_ f s]\n      (if (success? s)\n        (try-on (f (p/-extract s)))\n        s))\n\n    p/Applicative\n    (-pure [_ v]\n      (success v))\n\n    (-fapply [m af av]\n      (if (success? af)\n        (p/-fmap m (p/-extract af) av)\n        af))\n\n    p/Monad\n    (-mreturn [_ v]\n      (success v))\n\n    (-mbind [_ s f]\n      (assert (exception? s) (str \"Context mismatch: \" (p/-repr s)\n                                  \" is not allowed to use with exception context.\"))\n\n      (if (success? s)\n        (f (p/-extract s))\n        s))\n\n    p/Printable\n    (-repr [_]\n      \"#<Exception>\")))\n\n(util/make-printable (type context))\n"]}