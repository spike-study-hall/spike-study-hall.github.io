{"version":3,"sources":["cats/builtin.cljc"],"mappings":"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","names":["goog.object/set","cats.protocols/Contextual","G__63883","cats.protocols/-get-context","G__63884","G__63885","cats.protocols/Extract","G__63887","cats.protocols/-extract","G__63888","G__63889","_","cats.monad.maybe/context","cats.builtin/sequence-context","js/cats","js/cats.builtin","js/cats.builtin.t_cats$builtin63898","cats.builtin/t_cats$builtin63898","cljs.core/PROTOCOL_SENTINEL","_63900","meta63899","this__4374__auto__","writer__4375__auto__","opt__4376__auto__","cljs.core/-write","cats.builtin/->t_cats$builtin63898","sv","sv'","cljs.core.into.cljs$core$IFn$_invoke$arity$2","cljs.core/reverse","f","v","G__63947","vec__63949","seq__63950","cljs.core/seq","first__63951","cljs.core/first","cljs.core/next","vec__63956","seq__63957","first__63958","h","t","c","result","cljs.core/empty?","cljs.core/cons","cljs.core/List","self","av","G__63966","vec__63967","seq__63968","first__63969","vec__63986","seq__63987","first__63988","G__63992","vec__63994","seq__63995","first__63996","vec__64000","seq__64001","first__64002","h'","t'","c'","result'","p1__63891#","p2__63892#","cljs.core.reduce.cljs$core$IFn$_invoke$arity$3","G__63929","vec__63930","seq__63931","first__63932","vec__63941","seq__63942","first__63943","p1__63896#","p2__63897#","mv","mv'","ctx","z","xs","x","cljs.core/rest","G__63920","G__63921","tv","as","a","acc","cats.core.fapply.cljs$core$IFn$_invoke$arity$variadic","cats.core.fmap.cljs$core$IFn$_invoke$arity$2","cats.core.pure.cljs$core$IFn$_invoke$arity$1","cats.util/make-printable","cljs.core/type","cljs.core/EmptyList","cats.builtin/lazy-sequence-context","js/cats.builtin.t_cats$builtin64010","cats.builtin/t_cats$builtin64010","_64012","meta64011","cats.builtin/->t_cats$builtin64010","cljs.core.concat.cljs$core$IFn$_invoke$arity$2","cljs.core/LazySeq","cljs.core.map.cljs$core$IFn$_invoke$arity$2","iter__4523__auto__","s__64029","temp__5735__auto__","xs__6292__auto__","iterys__4519__auto__","s__64031","cljs.core/chunked-seq?","c__4521__auto__","size__4522__auto__","cljs.core/count","b__64033","cljs.core/chunk-buffer","i__64032","cljs.core._nth.cljs$core$IFn$_invoke$arity$2","cljs.core/chunk-append","cljs.core/chunk-cons","cljs.core/chunk","iter__64030","cljs.core/chunk-rest","fs__4520__auto__","iter__64028","cljs.core.apply.cljs$core$IFn$_invoke$arity$2","cljs.core/concat","G__64015","G__64016","cats.builtin/range-context","js/cats.builtin.t_cats$builtin64050","cats.builtin/t_cats$builtin64050","_64052","meta64051","cats.builtin/->t_cats$builtin64050","G__64056","G__64057","cljs.core/Range","cats.builtin/vector-context","js/cats.builtin.t_cats$builtin64063","cats.builtin/t_cats$builtin64063","_64065","meta64064","cats.builtin/->t_cats$builtin64063","cljs.core/vec","s__64081","s__64083","b__64085","i__64084","iter__64082","iter__64080","cljs.core.mapcat.cljs$core$IFn$_invoke$arity$variadic","rf","cljs.core.conj.cljs$core$IFn$_invoke$arity$2","cljs.core/PersistentVector","cats.builtin/map-context","js/cats.builtin.t_cats$builtin64104","cats.builtin/t_cats$builtin64104","_64106","meta64105","cats.builtin/->t_cats$builtin64104","cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic","p__64116","vec__64117","cljs.core.nth.cljs$core$IFn$_invoke$arity$3","key","value","cljs.core/PersistentArrayMap","cljs.core/PersistentHashMap","cljs.core/PersistentTreeMap","cats.builtin/set-context","js/cats.builtin.t_cats$builtin64141","cats.builtin/t_cats$builtin64141","_64143","meta64142","cats.builtin/->t_cats$builtin64141","clojure.set.union.cljs$core$IFn$_invoke$arity$2","cljs.core/set","s__64152","s__64154","b__64156","i__64155","iter__64153","iter__64151","clojure.set/union","cljs.core/PersistentHashSet","cats.builtin/function-context","js/cats.builtin.t_cats$builtin64184","cats.builtin/t_cats$builtin64184","_64186","meta64185","cats.builtin/->t_cats$builtin64184","g","cljs.core.comp.cljs$core$IFn$_invoke$arity$2","cljs.core/identity","cljs.core/constantly","G__64198","fexpr__64197","r","fexpr__64190","G__64192","cljs.core/IFn","G__64207","G__64208","G__64209","cats.builtin/any-monoid","js/cats.builtin.t_cats$builtin64210","cats.builtin/t_cats$builtin64210","_64212","meta64211","cats.builtin/->t_cats$builtin64210","or__4131__auto__","cats.builtin/all-monoid","js/cats.builtin.t_cats$builtin64222","cats.builtin/t_cats$builtin64222","_64224","meta64223","cats.builtin/->t_cats$builtin64222","and__4120__auto__","cats.builtin/sum-monoid","js/cats.builtin.t_cats$builtin64227","cats.builtin/t_cats$builtin64227","_64229","meta64228","cats.builtin/->t_cats$builtin64227","cats.builtin/prod-monoid","js/cats.builtin.t_cats$builtin64231","cats.builtin/t_cats$builtin64231","_64233","meta64232","cats.builtin/->t_cats$builtin64231","cats.builtin/string-monoid","js/cats.builtin.t_cats$builtin64239","cats.builtin/t_cats$builtin64239","_64241","meta64240","cats.builtin/->t_cats$builtin64239","G__64243","G__64244","G__64245","cljs.core/chunk-first"],"sourcesContent":[";; Copyright (c) 2014-2015 Andrey Antukh <niwi@niwi.nz>\n;; Copyright (c) 2014-2015 Alejandro G\u00f3mez <alejandro@dialelo.com>\n;; All rights reserved\n;;\n;; Redistribution and use in source and binary forms, with or without\n;; modification, are permitted provided that the following conditions\n;; are met:\n;;\n;; 1. Redistributions of source code must retain the above copyright\n;;    notice, this list of conditions and the following disclaimer.\n;; 2. Redistributions in binary form must reproduce the above copyright\n;;    notice, this list of conditions and the following disclaimer in the\n;;    documentation and/or other materials provided with the distribution.\n;;\n;; THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR\n;; IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n;; OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n;; IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,\n;; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n;; NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n;; DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\n;; THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n;; (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF\n;; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n\n(ns cats.builtin\n  \"Clojure(Script) built-in types extensions.\"\n  (:require [clojure.set :as s]\n            [cats.monad.maybe :as maybe]\n            [cats.protocols :as p]\n            [cats.context :as ctx]\n            [cats.core :as m]\n            [cats.util :as util]))\n\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n;; Nil as Nothing of Maybe monad\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n\n(extend-type nil\n  p/Contextual\n  (-get-context [_] maybe/context)\n\n  p/Extract\n  (-extract [_] nil))\n\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n;; Sequence Monad i.e. PersistentList\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n\n(def sequence-context\n  (reify\n    p/Context\n    p/Semigroup\n    (-mappend [_ sv sv']\n      (into sv' (reverse sv)))\n\n    p/Monoid\n    (-mempty [_] ())\n\n    p/Functor\n    (-fmap [_ f v]\n      (loop [[h & t :as c] v\n             result ()]\n        (if (empty? c)\n          (reverse result)\n          (recur t (cons (f h) result)))))\n\n    p/Applicative\n    (-pure [_ v] (list v))\n\n    (-fapply [_ self av]\n      ;; Each function (outer loop) applied to each value (inner loop).\n      (->> (loop [[h & t :as c] self\n                  result ()]\n             (if (empty? c)\n               result\n               (recur t\n                      (cons (loop [[h' & t' :as c'] av\n                                   result' ()]\n                              (if (empty? c')\n                                result'\n                                (recur t' (cons (h h') result'))))\n                            result))))\n           ;; Note that both `result` & `result'` above are\n           ;; in reverse order.\n           ;; Conjing elements of %2 into %1 below is done in\n           ;; in reverse order, so final result is correctly\n           ;; ordered.\n           (reduce #(into %1 %2) ())))\n\n\n    p/Monad\n    (-mreturn [_ v]\n      (list v))\n\n    (-mbind [_ self f]\n      (->> (loop [[h & t :as c] self\n                  result ()]\n             (if (empty? c)\n               result\n               (recur t (cons (f h) result))))\n           ;; Note that `result` above is in reverse order.\n           ;; Conjing elements of %2 into %1 below is done in\n           ;; in reverse order, so final result is correctly\n           ;; ordered.\n           (reduce #(into %1 %2) ())))\n\n    p/MonadZero\n    (-mzero [_] ())\n\n    p/MonadPlus\n    (-mplus [_ mv mv']\n      (into mv' (reverse mv)))\n\n    p/Foldable\n    (-foldr [ctx f z xs]\n      (let [x (first xs)]\n        (if (nil? x)\n          z\n          (let [xs (rest xs)]\n            (f x (p/-foldr ctx f z xs))))))\n\n    (-foldl [ctx f z xs]\n      (reduce f z xs))\n\n    p/Traversable\n    (-traverse [ctx f tv]\n      (let [as (p/-fmap ctx f tv)]\n        (p/-foldr ctx\n                  (fn [a acc]\n                    (m/alet [x a\n                             xs acc]\n                      (cons x xs)))\n                  (m/pure ())\n                  as)))\n\n    p/Printable\n    (-repr [_]\n      \"#<List>\")))\n\n(util/make-printable (type sequence-context))\n\n(extend-type #?(:clj  clojure.lang.PersistentList\n                :cljs cljs.core.List)\n  p/Contextual\n  (-get-context [_] sequence-context))\n\n(extend-type #?(:clj  clojure.lang.PersistentList$EmptyList\n                :cljs cljs.core.EmptyList)\n  p/Contextual\n  (-get-context [_] sequence-context))\n\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n;; Lazy Sequence Monad\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n\n(def lazy-sequence-context\n  (reify\n    p/Context\n    p/Semigroup\n    (-mappend [_ sv sv']\n      (concat sv sv'))\n\n    p/Monoid\n    (-mempty [_]\n      (lazy-seq []))\n\n    p/Functor\n    (-fmap [_ f v]\n      (map f v))\n\n    p/Applicative\n    (-pure [_ v]\n      (lazy-seq [v]))\n\n    (-fapply [_ self av]\n      (for [f self\n            v av]\n           (f v)))\n\n    p/Monad\n    (-mreturn [_ v]\n      (lazy-seq [v]))\n\n    (-mbind [_ self f]\n      (apply concat (map f self)))\n\n    p/MonadZero\n    (-mzero [_]\n      (lazy-seq []))\n\n    p/MonadPlus\n    (-mplus [_ mv mv']\n      (concat mv mv'))\n\n    p/Foldable\n    (-foldr [ctx f z xs]\n      (let [x (first xs)]\n        (if (nil? x)\n          z\n          (let [xs (rest xs)]\n            (f x (p/-foldr ctx f z xs))))))\n\n    (-foldl [ctx f z xs]\n      (reduce f z xs))\n\n    p/Traversable\n    (-traverse [ctx f tv]\n      (let [as (p/-fmap ctx f tv)]\n        (p/-foldr ctx\n                  (fn [a acc]\n                    (m/alet [x a\n                             xs acc]\n                      (cons x xs)))\n                  (m/pure (lazy-seq []))\n                  as)))\n\n    p/Printable\n    (-repr [_]\n      \"#<LazySequence>\")))\n\n(util/make-printable (type lazy-sequence-context))\n\n(extend-type #?(:clj  clojure.lang.LazySeq\n                :cljs cljs.core.LazySeq)\n  p/Contextual\n  (-get-context [_] lazy-sequence-context))\n\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n;; Range\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n\n(def range-context\n  (reify\n    p/Context\n    p/Foldable\n    (-foldr [ctx f z xs]\n      (let [x (first xs)]\n        (if (nil? x)\n          z\n          (let [xs (rest xs)]\n            (f x (p/-foldr ctx f z xs))))))\n\n    (-foldl [ctx f z xs]\n      (reduce f z xs))\n\n    p/Printable\n    (-repr [_]\n      \"#<Range>\")))\n\n(util/make-printable (type range-context))\n\n(extend-type #?(:clj  clojure.lang.LongRange\n                :cljs cljs.core.Range)\n  p/Contextual\n  (-get-context [_] range-context))\n\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n;; Vector Monad\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n\n(def vector-context\n  (reify\n    p/Context\n    p/Semigroup\n    (-mappend [_ sv sv']\n      (into sv sv'))\n\n    p/Monoid\n    (-mempty [_]\n      [])\n\n    p/Functor\n    (-fmap [_ f v]\n      (vec (map f v)))\n\n    p/Applicative\n    (-pure [_ v]\n      [v])\n\n    (-fapply [_ self av]\n      (vec (for [f self\n                 v av]\n             (f v))))\n\n    p/Monad\n    (-mreturn [_ v]\n      [v])\n\n    (-mbind [_ self f]\n      (vec (mapcat f self)))\n\n    p/MonadZero\n    (-mzero [_]\n      [])\n\n    p/MonadPlus\n    (-mplus [_ mv mv']\n      (into mv mv'))\n\n    p/Foldable\n    (-foldr [ctx f z xs]\n      (letfn [(rf [acc v] (f v acc))]\n        (reduce rf z (reverse xs))))\n\n    (-foldl [ctx f z xs]\n      (reduce f z xs))\n\n    p/Traversable\n    (-traverse [ctx f tv]\n      (let [as (p/-fmap ctx f tv)]\n        (p/-foldl ctx\n                  (fn [acc a]\n                    (m/alet [x a\n                             xs acc]\n                       (conj xs x)))\n                  (m/pure [])\n                  as)))\n\n    p/Printable\n    (-repr [_]\n      \"#<Vector>\")))\n\n(util/make-printable (type vector-context))\n\n(extend-type #?(:clj clojure.lang.PersistentVector\n                :cljs cljs.core.PersistentVector)\n  p/Contextual\n  (-get-context [_] vector-context))\n\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n;; Map Monad\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n\n(def map-context\n  (reify\n    p/Context\n    p/Semigroup\n    (-mappend [_ sv sv']\n      (merge sv sv'))\n\n    p/Monoid\n    (-mempty [_]\n      {})\n\n    p/Functor\n    (-fmap [_ f v]\n      (into {} (map (fn [[key value]] [key (f value)]) v)))\n\n    p/Foldable\n    (-foldr [ctx f z xs]\n      (letfn [(rf [acc v] (f v acc))]\n        (reduce rf z xs)))\n\n    (-foldl [ctx f z xs]\n      (reduce f z xs))\n\n    p/Printable\n    (-repr [_]\n      \"#<Map>\")))\n\n(util/make-printable (type map-context))\n\n(extend-type #?(:clj clojure.lang.PersistentArrayMap\n                :cljs cljs.core.PersistentArrayMap)\n  p/Contextual\n  (-get-context [_] map-context))\n\n(extend-type #?(:clj clojure.lang.PersistentHashMap\n                :cljs cljs.core.PersistentHashMap)\n  p/Contextual\n  (-get-context [_] map-context))\n\n(extend-type #?(:clj clojure.lang.PersistentTreeMap\n                :cljs cljs.core.PersistentTreeMap)\n  p/Contextual\n  (-get-context [_] map-context))\n\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n;; Set Monad\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n\n(def set-context\n  (reify\n    p/Context\n    p/Semigroup\n    (-mappend [_ sv sv']\n      (s/union sv (set sv')))\n\n    p/Monoid\n    (-mempty [_]\n      #{})\n\n    p/Functor\n    (-fmap [_ f self]\n      (set (map f self)))\n\n    p/Applicative\n    (-pure [_ v]\n      #{v})\n\n    (-fapply [_ self av]\n      (set (for [f self\n                 v av]\n             (f v))))\n\n    p/Monad\n    (-mreturn [_ v]\n      #{v})\n\n    (-mbind [_ self f]\n      (apply s/union (map f self)))\n\n    p/MonadZero\n    (-mzero [_]\n      #{})\n\n    p/MonadPlus\n    (-mplus [_ mv mv']\n      (s/union mv mv'))\n\n    p/Printable\n    (-repr [_]\n      \"#<Set>\")))\n\n(util/make-printable (type set-context))\n\n(extend-type #?(:clj clojure.lang.PersistentHashSet\n                :cljs cljs.core.PersistentHashSet)\n  p/Contextual\n  (-get-context [_] set-context))\n\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n;; Function Monad\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n\n(def function-context\n  (reify\n    p/Context\n    p/Semigroup\n    (-mappend [ctx f g] (comp f g))\n\n    p/Monoid\n    (-mempty [_] identity)\n\n    p/Functor\n    (-fmap [_ f self]\n      (comp f self))\n\n    p/Applicative\n    (-pure [_ v]\n      (constantly v))\n\n    (-fapply [_ self av]\n      (fn [x] ((self x) (av x))))\n\n    p/Monad\n    (-mreturn [_ v]\n      (constantly v))\n\n    (-mbind [_ self f]\n      (fn [r] ((f (self r)) r)))\n\n    p/Printable\n    (-repr [_]\n      \"#<Function>\")))\n\n(util/make-printable (type function-context))\n\n(extend-type #?(:clj clojure.lang.IFn\n                :cljs cljs.core.IFn)\n  p/Contextual\n  (-get-context [_] function-context))\n\n#?(:cljs\n   (extend-type function\n     p/Contextual\n     (-get-context [_] function-context)))\n\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n;; Monoids\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n\n(def any-monoid\n  (reify\n    p/Context\n    p/Semigroup\n    (-mappend [_ sv sv']\n      (or sv sv'))\n\n    p/Monoid\n    (-mempty [_]\n      false)\n\n    p/Printable\n    (-repr [_]\n      \"#<Any>\")))\n\n(util/make-printable (type any-monoid))\n\n(def all-monoid\n  (reify\n    p/Context\n    p/Semigroup\n    (-mappend [_ sv sv']\n      (and sv sv'))\n\n    p/Monoid\n    (-mempty [_]\n      true)\n\n    p/Printable\n    (-repr [_]\n      \"#<All>\")))\n\n(util/make-printable (type all-monoid))\n\n(def sum-monoid\n  (reify\n    p/Context\n    p/Semigroup\n    (-mappend [_ sv sv']\n      (+ sv sv'))\n\n    p/Monoid\n    (-mempty [_]\n      0)\n\n    p/Printable\n    (-repr [_]\n      \"#<Sum>\")))\n\n(util/make-printable (type sum-monoid))\n\n(def prod-monoid\n  (reify\n    p/Context\n    p/Semigroup\n    (-mappend [_ sv sv']\n      (* sv sv'))\n\n    p/Monoid\n    (-mempty [_]\n      1)\n\n    p/Printable\n    (-repr [_]\n      \"#<Product>\")))\n\n(util/make-printable (type prod-monoid))\n\n(def string-monoid\n  (reify\n    p/Context\n    p/Semigroup\n    (-mappend [_ sv sv']\n      (str sv sv'))\n\n    p/Monoid\n    (-mempty [_]\n      \"\")\n\n    p/Printable\n    (-repr [_]\n      \"#<String>\")))\n\n(util/make-printable (type string-monoid))\n\n(extend-type #?(:clj java.lang.String\n                :cljs string)\n  p/Contextual\n  (-get-context [_] string-monoid))\n"]}