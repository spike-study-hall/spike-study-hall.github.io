{
"version":3,
"file":"module$node_modules$accepts$index.js",
"lineCount":4,
"mappings":"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",
"sources":["node_modules/accepts/index.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$accepts$index\"] = function(global,require,module,exports) {\n/*!\n * accepts\n * Copyright(c) 2014 Jonathan Ong\n * Copyright(c) 2015 Douglas Christopher Wilson\n * MIT Licensed\n */\n\n'use strict'\n\n/**\n * Module dependencies.\n * @private\n */\n\nvar Negotiator = require('negotiator')\nvar mime = require('mime-types')\n\n/**\n * Module exports.\n * @public\n */\n\nmodule.exports = Accepts\n\n/**\n * Create a new Accepts object for the given req.\n *\n * @param {object} req\n * @public\n */\n\nfunction Accepts (req) {\n  if (!(this instanceof Accepts)) {\n    return new Accepts(req)\n  }\n\n  this.headers = req.headers\n  this.negotiator = new Negotiator(req)\n}\n\n/**\n * Check if the given `type(s)` is acceptable, returning\n * the best match when true, otherwise `undefined`, in which\n * case you should respond with 406 \"Not Acceptable\".\n *\n * The `type` value may be a single mime type string\n * such as \"application/json\", the extension name\n * such as \"json\" or an array `[\"json\", \"html\", \"text/plain\"]`. When a list\n * or array is given the _best_ match, if any is returned.\n *\n * Examples:\n *\n *     // Accept: text/html\n *     this.types('html');\n *     // => \"html\"\n *\n *     // Accept: text/*, application/json\n *     this.types('html');\n *     // => \"html\"\n *     this.types('text/html');\n *     // => \"text/html\"\n *     this.types('json', 'text');\n *     // => \"json\"\n *     this.types('application/json');\n *     // => \"application/json\"\n *\n *     // Accept: text/*, application/json\n *     this.types('image/png');\n *     this.types('png');\n *     // => undefined\n *\n *     // Accept: text/*;q=.5, application/json\n *     this.types(['html', 'json']);\n *     this.types('html', 'json');\n *     // => \"json\"\n *\n * @param {String|Array} types...\n * @return {String|Array|Boolean}\n * @public\n */\n\nAccepts.prototype.type =\nAccepts.prototype.types = function (types_) {\n  var types = types_\n\n  // support flattened arguments\n  if (types && !Array.isArray(types)) {\n    types = new Array(arguments.length)\n    for (var i = 0; i < types.length; i++) {\n      types[i] = arguments[i]\n    }\n  }\n\n  // no types, return all requested types\n  if (!types || types.length === 0) {\n    return this.negotiator.mediaTypes()\n  }\n\n  // no accept header, return first given type\n  if (!this.headers.accept) {\n    return types[0]\n  }\n\n  var mimes = types.map(extToMime)\n  var accepts = this.negotiator.mediaTypes(mimes.filter(validMime))\n  var first = accepts[0]\n\n  return first\n    ? types[mimes.indexOf(first)]\n    : false\n}\n\n/**\n * Return accepted encodings or best fit based on `encodings`.\n *\n * Given `Accept-Encoding: gzip, deflate`\n * an array sorted by quality is returned:\n *\n *     ['gzip', 'deflate']\n *\n * @param {String|Array} encodings...\n * @return {String|Array}\n * @public\n */\n\nAccepts.prototype.encoding =\nAccepts.prototype.encodings = function (encodings_) {\n  var encodings = encodings_\n\n  // support flattened arguments\n  if (encodings && !Array.isArray(encodings)) {\n    encodings = new Array(arguments.length)\n    for (var i = 0; i < encodings.length; i++) {\n      encodings[i] = arguments[i]\n    }\n  }\n\n  // no encodings, return all requested encodings\n  if (!encodings || encodings.length === 0) {\n    return this.negotiator.encodings()\n  }\n\n  return this.negotiator.encodings(encodings)[0] || false\n}\n\n/**\n * Return accepted charsets or best fit based on `charsets`.\n *\n * Given `Accept-Charset: utf-8, iso-8859-1;q=0.2, utf-7;q=0.5`\n * an array sorted by quality is returned:\n *\n *     ['utf-8', 'utf-7', 'iso-8859-1']\n *\n * @param {String|Array} charsets...\n * @return {String|Array}\n * @public\n */\n\nAccepts.prototype.charset =\nAccepts.prototype.charsets = function (charsets_) {\n  var charsets = charsets_\n\n  // support flattened arguments\n  if (charsets && !Array.isArray(charsets)) {\n    charsets = new Array(arguments.length)\n    for (var i = 0; i < charsets.length; i++) {\n      charsets[i] = arguments[i]\n    }\n  }\n\n  // no charsets, return all requested charsets\n  if (!charsets || charsets.length === 0) {\n    return this.negotiator.charsets()\n  }\n\n  return this.negotiator.charsets(charsets)[0] || false\n}\n\n/**\n * Return accepted languages or best fit based on `langs`.\n *\n * Given `Accept-Language: en;q=0.8, es, pt`\n * an array sorted by quality is returned:\n *\n *     ['es', 'pt', 'en']\n *\n * @param {String|Array} langs...\n * @return {Array|String}\n * @public\n */\n\nAccepts.prototype.lang =\nAccepts.prototype.langs =\nAccepts.prototype.language =\nAccepts.prototype.languages = function (languages_) {\n  var languages = languages_\n\n  // support flattened arguments\n  if (languages && !Array.isArray(languages)) {\n    languages = new Array(arguments.length)\n    for (var i = 0; i < languages.length; i++) {\n      languages[i] = arguments[i]\n    }\n  }\n\n  // no languages, return all requested languages\n  if (!languages || languages.length === 0) {\n    return this.negotiator.languages()\n  }\n\n  return this.negotiator.languages(languages)[0] || false\n}\n\n/**\n * Convert extnames to mime.\n *\n * @param {String} type\n * @return {String}\n * @private\n */\n\nfunction extToMime (type) {\n  return type.indexOf('/') === -1\n    ? mime.lookup(type)\n    : type\n}\n\n/**\n * Check if mime is valid.\n *\n * @param {String} type\n * @return {String}\n * @private\n */\n\nfunction validMime (type) {\n  return typeof type === 'string'\n}\n\n};"],
"names":["shadow$provide","global","require","module","exports","Accepts","req","headers","negotiator","Negotiator","extToMime","type","indexOf","mime","lookup","validMime","prototype","types","Accepts.prototype.types","types_","Array","isArray","arguments","length","i","mediaTypes","accept","mimes","map","first","accepts","filter","encoding","encodings","Accepts.prototype.encodings","encodings_","charset","charsets","Accepts.prototype.charsets","charsets_","lang","langs","language","languages","Accepts.prototype.languages","languages_"]
}
