{
"version":3,
"file":"module$node_modules$parseurl$index.js",
"lineCount":3,
"mappings":"AAAAA,cAAA,mCAAA,CAAuD,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CAmC/FC,QAASA,SAAS,CAACC,GAAD,CAAM,CACtB,IAAIC,IAAMD,GAAAC,IAEV,IAAYC,IAAAA,EAAZ,GAAID,GAAJ,CAAA,CAKA,IAAIE,OAASH,GAAAI,WAEb,IAAIC,KAAA,CAAMJ,GAAN,CAAWE,MAAX,CAAJ,CAEE,MAAOA,OAITA,OAAA,CAASG,SAAA,CAAUL,GAAV,CACTE,OAAAI,KAAA,CAAcN,GAEd,OAAQD,IAAAI,WAAR,CAAyBD,MAhBzB,CAHsB,CA4DxBG,QAASA,UAAU,CAACE,GAAD,CAAM,CACvB,GAAmB,QAAnB,GAAI,MAAOA,IAAX,EAAqD,EAArD,GAA+BA,GAAAC,WAAA,CAAe,CAAf,CAA/B,CACE,MAAOC,MAAA,CAAMF,GAAN,CAUT,KAPA,IAAIG,SAAWH,GAAf,CACII,MAAQ,IADZ,CAEIC,OAAS,IAFb,CAOSC,EAAI,CAAb,CAAgBA,CAAhB,CAAoBN,GAAAO,OAApB,CAAgCD,CAAA,EAAhC,CACE,OAAQN,GAAAC,WAAA,CAAeK,CAAf,CAAR,EACE,KAAK,EAAL,CACiB,IAAf,GAAID,MAAJ,GACEF,QAEA,CAFWH,GAAAQ,UAAA,CAAc,CAAd;AAAiBF,CAAjB,CAEX,CADAF,KACA,CADQJ,GAAAQ,UAAA,CAAcF,CAAd,CAAkB,CAAlB,CACR,CAAAD,MAAA,CAASL,GAAAQ,UAAA,CAAcF,CAAd,CAHX,CAKA,MACF,MAAK,CAAL,CACA,KAAK,EAAL,CACA,KAAK,EAAL,CACA,KAAK,EAAL,CACA,KAAK,EAAL,CACA,KAAK,EAAL,CACA,KAAK,GAAL,CACA,KAAK,KAAL,CACE,MAAOJ,MAAA,CAAMF,GAAN,CAhBX,CAoBEP,CAAAA,CAAcC,IAAAA,EAAR,GAAAe,GAAA,CACN,IAAIA,GADE,CAEN,EAEJhB,EAAAiB,KAAA,CAAWV,GACXP,EAAAkB,KAAA,CAAWX,GACXP,EAAAU,SAAA,CAAeA,QAEA,KAAf,GAAIE,MAAJ,GACEZ,CAAAW,MACA,CADYA,KACZ,CAAAX,CAAAY,OAAA,CAAaA,MAFf,CAKA,OAAOZ,EA9CgB,CA0DzBI,QAASA,MAAM,CAACJ,GAAD,CAAMmB,SAAN,CAAiB,CAC9B,MAA4B,QAA5B,GAAO,MAAOA,UAAd,EACgB,IADhB,GACEA,SADF,GAEWlB,IAAAA,EAFX,GAEGe,GAFH,EAEwBG,SAFxB,WAE6CH,IAF7C,GAGEG,SAAAb,KAHF,GAGqBN,GAJS,CA1I5BA,MAAAA,CAAML,OAAA,CAAQ,6BAAR,CACV,KAAIc,MAAQT,MAAAS,MAAZ,CACIO,IAAMhB,MAAAgB,IAOVpB,OAAAC,QAAA;AAAiBC,QACjBF,OAAAC,QAAAuB,SAAA,CAwCAC,QAAqB,CAACtB,GAAD,CAAM,CACzB,IAAIC,IAAMD,GAAAuB,YAEV,IAAmB,QAAnB,GAAI,MAAOtB,IAAX,CAEE,MAAOF,SAAA,CAASC,GAAT,CAGT,KAAIG,OAASH,GAAAwB,mBAEb,IAAInB,KAAA,CAAMJ,GAAN,CAAWE,MAAX,CAAJ,CAEE,MAAOA,OAITA,OAAA,CAASG,SAAA,CAAUL,GAAV,CACTE,OAAAI,KAAA,CAAcN,GAEd,OAAQD,IAAAwB,mBAAR,CAAiCrB,MAnBR,CAjEoE;",
"sources":["node_modules/parseurl/index.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$parseurl$index\"] = function(global,require,module,exports) {\n/*!\n * parseurl\n * Copyright(c) 2014 Jonathan Ong\n * Copyright(c) 2014-2017 Douglas Christopher Wilson\n * MIT Licensed\n */\n\n'use strict'\n\n/**\n * Module dependencies.\n * @private\n */\n\nvar url = require('url')\nvar parse = url.parse\nvar Url = url.Url\n\n/**\n * Module exports.\n * @public\n */\n\nmodule.exports = parseurl\nmodule.exports.original = originalurl\n\n/**\n * Parse the `req` url with memoization.\n *\n * @param {ServerRequest} req\n * @return {Object}\n * @public\n */\n\nfunction parseurl (req) {\n  var url = req.url\n\n  if (url === undefined) {\n    // URL is undefined\n    return undefined\n  }\n\n  var parsed = req._parsedUrl\n\n  if (fresh(url, parsed)) {\n    // Return cached URL parse\n    return parsed\n  }\n\n  // Parse the URL\n  parsed = fastparse(url)\n  parsed._raw = url\n\n  return (req._parsedUrl = parsed)\n};\n\n/**\n * Parse the `req` original url with fallback and memoization.\n *\n * @param {ServerRequest} req\n * @return {Object}\n * @public\n */\n\nfunction originalurl (req) {\n  var url = req.originalUrl\n\n  if (typeof url !== 'string') {\n    // Fallback\n    return parseurl(req)\n  }\n\n  var parsed = req._parsedOriginalUrl\n\n  if (fresh(url, parsed)) {\n    // Return cached URL parse\n    return parsed\n  }\n\n  // Parse the URL\n  parsed = fastparse(url)\n  parsed._raw = url\n\n  return (req._parsedOriginalUrl = parsed)\n};\n\n/**\n * Parse the `str` url with fast-path short-cut.\n *\n * @param {string} str\n * @return {Object}\n * @private\n */\n\nfunction fastparse (str) {\n  if (typeof str !== 'string' || str.charCodeAt(0) !== 0x2f /* / */) {\n    return parse(str)\n  }\n\n  var pathname = str\n  var query = null\n  var search = null\n\n  // This takes the regexp from https://github.com/joyent/node/pull/7878\n  // Which is /^(\\/[^?#\\s]*)(\\?[^#\\s]*)?$/\n  // And unrolls it into a for loop\n  for (var i = 1; i < str.length; i++) {\n    switch (str.charCodeAt(i)) {\n      case 0x3f: /* ?  */\n        if (search === null) {\n          pathname = str.substring(0, i)\n          query = str.substring(i + 1)\n          search = str.substring(i)\n        }\n        break\n      case 0x09: /* \\t */\n      case 0x0a: /* \\n */\n      case 0x0c: /* \\f */\n      case 0x0d: /* \\r */\n      case 0x20: /*    */\n      case 0x23: /* #  */\n      case 0xa0:\n      case 0xfeff:\n        return parse(str)\n    }\n  }\n\n  var url = Url !== undefined\n    ? new Url()\n    : {}\n\n  url.path = str\n  url.href = str\n  url.pathname = pathname\n\n  if (search !== null) {\n    url.query = query\n    url.search = search\n  }\n\n  return url\n}\n\n/**\n * Determine if parsed is still fresh for url.\n *\n * @param {string} url\n * @param {object} parsedUrl\n * @return {boolean}\n * @private\n */\n\nfunction fresh (url, parsedUrl) {\n  return typeof parsedUrl === 'object' &&\n    parsedUrl !== null &&\n    (Url === undefined || parsedUrl instanceof Url) &&\n    parsedUrl._raw === url\n}\n\n};"],
"names":["shadow$provide","global","require","module","exports","parseurl","req","url","undefined","parsed","_parsedUrl","fresh","fastparse","_raw","str","charCodeAt","parse","pathname","query","search","i","length","substring","Url","path","href","parsedUrl","original","originalurl","originalUrl","_parsedOriginalUrl"]
}
