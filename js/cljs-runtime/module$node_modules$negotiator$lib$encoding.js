shadow$provide.module$node_modules$negotiator$lib$encoding=function(global,require,module,exports){function parseAcceptEncoding(accept){accept=accept.split(",");for(var hasIdentity=!1,minQuality=1,i=0,j=0;i<accept.length;i++){var str=accept[i].trim();var encoding=i;var match=simpleEncodingRegExp.exec(str);if(match){str=match[1];var q=1;if(match[2]){match=match[2].split(";");for(var j$jscomp$0=0;j$jscomp$0<match.length;j$jscomp$0++){var p=match[j$jscomp$0].trim().split("\x3d");if("q"===p[0]){q=parseFloat(p[1]);
break}}}encoding={encoding:str,q:q,i:encoding}}else encoding=null;encoding&&(accept[j++]=encoding,hasIdentity=hasIdentity||specify("identity",encoding),minQuality=Math.min(minQuality,encoding.q||1))}hasIdentity||(accept[j++]={encoding:"identity",q:minQuality,i:i});accept.length=j;return accept}function specify(encoding,spec,index){var s=0;if(spec.encoding.toLowerCase()===encoding.toLowerCase())s|=1;else if("*"!==spec.encoding)return null;return{i:index,o:spec.i,q:spec.q,s:s}}function preferredEncodings(accept,
provided){var accepts=parseAcceptEncoding(accept||"");if(!provided)return accepts.filter(isQuality).sort(compareSpecs).map(getFullEncoding);var priorities=provided.map(function(type,index){for(var priority={o:-1,q:0,s:0},i=0;i<accepts.length;i++){var spec=specify(type,accepts[i],index);spec&&0>(priority.s-spec.s||priority.q-spec.q||priority.o-spec.o)&&(priority=spec)}return priority});return priorities.filter(isQuality).sort(compareSpecs).map(function(priority){return provided[priorities.indexOf(priority)]})}
function compareSpecs(a,b){return b.q-a.q||b.s-a.s||a.o-b.o||a.i-b.i||0}function getFullEncoding(spec){return spec.encoding}function isQuality(spec){return 0<spec.q}module.exports=preferredEncodings;module.exports.preferredEncodings=preferredEncodings;var simpleEncodingRegExp=/^\s*([^\s;]+)\s*(?:;(.*))?$/}
//# sourceMappingURL=module$node_modules$negotiator$lib$encoding.js.map
