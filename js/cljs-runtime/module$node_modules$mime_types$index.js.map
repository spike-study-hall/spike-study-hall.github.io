{
"version":3,
"file":"module$node_modules$mime_types$index.js",
"lineCount":4,
"mappings":"AAAAA,cAAA,qCAAA,CAAyD,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CAiDjGC,QAASA,QAAQ,CAACC,IAAD,CAAO,CACtB,GAAI,CAACA,IAAL,EAA6B,QAA7B,GAAa,MAAOA,KAApB,CACE,MAAO,CAAA,CAKT,KAAIC,MADAC,IACAD,CADQE,mBAAAC,KAAA,CAAyBJ,IAAzB,CACRC,GAAgBI,EAAA,CAAGH,IAAA,CAAM,CAAN,CAAAI,YAAA,EAAH,CAEpB,OAAIL,KAAJ,EAAYA,IAAAF,QAAZ,CACSE,IAAAF,QADT,CAKIG,IAAJ,EAAaK,gBAAAC,KAAA,CAAsBN,IAAA,CAAM,CAAN,CAAtB,CAAb,CACS,OADT,CAIO,CAAA,CAlBe,CAlCxB,IAAIG,GAAKT,OAAA,CAAQ,mCAAR,CAAT,CACIa,QAAUb,OAAA,CAAQ,2CAAR,CAAAa,QADd,CAQIN,oBAAsB,yBAR1B,CASII;AAAmB,UAOvBT,QAAAC,QAAA,CAAkBA,OAClBD,QAAAY,SAAA,CAAmB,CAAEC,OAAQZ,OAAV,CACnBD,QAAAc,YAAA,CA4CAA,QAAqB,CAACC,GAAD,CAAM,CAEzB,GAAI,CAACA,GAAL,EAA2B,QAA3B,GAAY,MAAOA,IAAnB,CACE,MAAO,CAAA,CAGLZ,IAAAA,CAA4B,EAArB,GAAAY,GAAAC,QAAA,CAAY,GAAZ,CAAA,CACPhB,OAAAa,OAAA,CAAeE,GAAf,CADO,CAEPA,GAEJ,IAAI,CAACZ,GAAL,CACE,MAAO,CAAA,CAIT,IAAgC,EAAhC,GAAIA,GAAAa,QAAA,CAAa,SAAb,CAAJ,CAAoC,CAClC,IAAIf,QAAUD,OAAAC,QAAA,CAAgBE,GAAhB,CACVF,QAAJ,GAAaE,GAAb,EAAqB,eAArB,CAAoCF,OAAAO,YAAA,EAApC,CAFkC,CAKpC,MAAOL,IApBkB,CA3C3BH,QAAAiB,UAAA,CAyEAA,QAAmB,CAACf,IAAD,CAAO,CACxB,MAAKA,KAAL,EAA6B,QAA7B,GAAa,MAAOA,KAApB,CAUA,CAFIgB,IAEJ,EALId,IAKJ,CALYC,mBAAAC,KAAA,CAAyBJ,IAAzB,CAKZ,GAFoBF,OAAAmB,WAAA,CAAmBf,IAAA,CAAM,CAAN,CAAAI,YAAA,EAAnB,CAEpB,GAAcU,IAAAE,OAAd;AAIOF,IAAA,CAAK,CAAL,CAJP,CACS,CAAA,CAXT,CACS,CAAA,CAFe,CAxE1BlB,QAAAmB,WAAA,CAAqBE,MAAAC,OAAA,CAAc,IAAd,CACrBtB,QAAAa,OAAA,CAgGAA,QAAgB,CAACU,IAAD,CAAO,CACrB,MAAKA,KAAL,EAA6B,QAA7B,GAAa,MAAOA,KAApB,CASA,CAJIN,IAIJ,CAJgBN,OAAA,CAAQ,IAAR,CAAeY,IAAf,CAAAf,YAAA,EAAAgB,OAAA,CAEN,CAFM,CAIhB,EAIOxB,OAAAyB,MAAA,CAAcR,IAAd,CAJP,EAImC,CAAA,CAJnC,CACS,CAAA,CAVT,CACS,CAAA,CAFY,CA/FvBjB,QAAAyB,MAAA,CAAgBJ,MAAAC,OAAA,CAAc,IAAd,CAqHhBI,UAAsB,CAACP,UAAD,CAAaM,KAAb,CAAoB,CAExC,IAAIE,WAAa,CAAC,OAAD,CAAU,QAAV,CAAoBC,IAAAA,EAApB,CAA+B,MAA/B,CAEjBP,OAAAQ,KAAA,CAAYtB,EAAZ,CAAAuB,QAAA,CAAwBC,QAAyB,CAAC7B,IAAD,CAAO,CACtD,IAAIC,KAAOI,EAAA,CAAGL,IAAH,CAAX,CACIgB,KAAOf,IAAAgB,WAEX,IAAKD,IAAL,EAAcA,IAAAE,OAAd,CAAA,CAKAD,UAAA,CAAWjB,IAAX,CAAA,CAAmBgB,IAGnB,KAAK,IAAIc,EAAI,CAAb,CAAgBA,CAAhB,CAAoBd,IAAAE,OAApB,CAAiCY,CAAA,EAAjC,CAAsC,CACpC,IAAIf,UAAYC,IAAA,CAAKc,CAAL,CAEhB,IAAIP,KAAA,CAAMR,SAAN,CAAJ,CAAsB,CACpB,IAAIgB;AAAON,UAAAX,QAAA,CAAmBT,EAAA,CAAGkB,KAAA,CAAMR,SAAN,CAAH,CAAAiB,OAAnB,CAAX,CACIC,GAAKR,UAAAX,QAAA,CAAmBb,IAAA+B,OAAnB,CAET,IAAyB,0BAAzB,GAAIT,KAAA,CAAMR,SAAN,CAAJ,GACGgB,IADH,CACUE,EADV,EACiBF,IADjB,GAC0BE,EAD1B,EACmE,cADnE,GACgCV,KAAA,CAAMR,SAAN,CAAAO,OAAA,CAAwB,CAAxB,CAA2B,EAA3B,CADhC,EAGE,QAPkB,CAYtBC,KAAA,CAAMR,SAAN,CAAA,CAAmBf,IAfiB,CARtC,CAJsD,CAAxD,CAJwC,CAA1CwB,CAlHA,CAAa1B,OAAAmB,WAAb,CAAiCnB,OAAAyB,MAAjC,CAxCiG;",
"sources":["node_modules/mime-types/index.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$mime_types$index\"] = function(global,require,module,exports) {\n/*!\n * mime-types\n * Copyright(c) 2014 Jonathan Ong\n * Copyright(c) 2015 Douglas Christopher Wilson\n * MIT Licensed\n */\n\n'use strict'\n\n/**\n * Module dependencies.\n * @private\n */\n\nvar db = require('mime-db')\nvar extname = require('path').extname\n\n/**\n * Module variables.\n * @private\n */\n\nvar EXTRACT_TYPE_REGEXP = /^\\s*([^;\\s]*)(?:;|\\s|$)/\nvar TEXT_TYPE_REGEXP = /^text\\//i\n\n/**\n * Module exports.\n * @public\n */\n\nexports.charset = charset\nexports.charsets = { lookup: charset }\nexports.contentType = contentType\nexports.extension = extension\nexports.extensions = Object.create(null)\nexports.lookup = lookup\nexports.types = Object.create(null)\n\n// Populate the extensions/types maps\npopulateMaps(exports.extensions, exports.types)\n\n/**\n * Get the default charset for a MIME type.\n *\n * @param {string} type\n * @return {boolean|string}\n */\n\nfunction charset (type) {\n  if (!type || typeof type !== 'string') {\n    return false\n  }\n\n  // TODO: use media-typer\n  var match = EXTRACT_TYPE_REGEXP.exec(type)\n  var mime = match && db[match[1].toLowerCase()]\n\n  if (mime && mime.charset) {\n    return mime.charset\n  }\n\n  // default text/* to utf-8\n  if (match && TEXT_TYPE_REGEXP.test(match[1])) {\n    return 'UTF-8'\n  }\n\n  return false\n}\n\n/**\n * Create a full Content-Type header given a MIME type or extension.\n *\n * @param {string} str\n * @return {boolean|string}\n */\n\nfunction contentType (str) {\n  // TODO: should this even be in this module?\n  if (!str || typeof str !== 'string') {\n    return false\n  }\n\n  var mime = str.indexOf('/') === -1\n    ? exports.lookup(str)\n    : str\n\n  if (!mime) {\n    return false\n  }\n\n  // TODO: use content-type or other module\n  if (mime.indexOf('charset') === -1) {\n    var charset = exports.charset(mime)\n    if (charset) mime += '; charset=' + charset.toLowerCase()\n  }\n\n  return mime\n}\n\n/**\n * Get the default extension for a MIME type.\n *\n * @param {string} type\n * @return {boolean|string}\n */\n\nfunction extension (type) {\n  if (!type || typeof type !== 'string') {\n    return false\n  }\n\n  // TODO: use media-typer\n  var match = EXTRACT_TYPE_REGEXP.exec(type)\n\n  // get extensions\n  var exts = match && exports.extensions[match[1].toLowerCase()]\n\n  if (!exts || !exts.length) {\n    return false\n  }\n\n  return exts[0]\n}\n\n/**\n * Lookup the MIME type for a file path/extension.\n *\n * @param {string} path\n * @return {boolean|string}\n */\n\nfunction lookup (path) {\n  if (!path || typeof path !== 'string') {\n    return false\n  }\n\n  // get the extension (\"ext\" or \".ext\" or full path)\n  var extension = extname('x.' + path)\n    .toLowerCase()\n    .substr(1)\n\n  if (!extension) {\n    return false\n  }\n\n  return exports.types[extension] || false\n}\n\n/**\n * Populate the extensions and types maps.\n * @private\n */\n\nfunction populateMaps (extensions, types) {\n  // source preference (least -> most)\n  var preference = ['nginx', 'apache', undefined, 'iana']\n\n  Object.keys(db).forEach(function forEachMimeType (type) {\n    var mime = db[type]\n    var exts = mime.extensions\n\n    if (!exts || !exts.length) {\n      return\n    }\n\n    // mime -> extensions\n    extensions[type] = exts\n\n    // extension -> mime\n    for (var i = 0; i < exts.length; i++) {\n      var extension = exts[i]\n\n      if (types[extension]) {\n        var from = preference.indexOf(db[types[extension]].source)\n        var to = preference.indexOf(mime.source)\n\n        if (types[extension] !== 'application/octet-stream' &&\n          (from > to || (from === to && types[extension].substr(0, 12) === 'application/'))) {\n          // skip the remapping\n          continue\n        }\n      }\n\n      // set the extension -> mime\n      types[extension] = type\n    }\n  })\n}\n\n};"],
"names":["shadow$provide","global","require","module","exports","charset","type","mime","match","EXTRACT_TYPE_REGEXP","exec","db","toLowerCase","TEXT_TYPE_REGEXP","test","extname","charsets","lookup","contentType","str","indexOf","extension","exts","extensions","length","Object","create","path","substr","types","populateMaps","preference","undefined","keys","forEach","forEachMimeType","i","from","source","to"]
}
