{"version":3,"sources":["frp/primitives/net.cljc"],"mappings":"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","names":["frp.primitives.net/initial-net-id","frp.primitives.net/initial-net","loom.graph/digraph","linked.core.map.cljs$core$IFn$_invoke$arity$0","frp.time/epoch","frp.primitives.net/initial-universe","linked.core.map.cljs$core$IFn$_invoke$arity$variadic","frp.primitives.net/universe-state","cljs.core.atom.cljs$core$IFn$_invoke$arity$1","frp.primitives.net/juxt*","cljs.core.comp.cljs$core$IFn$_invoke$arity$2","G__62718","G__62719","G__62720","aid.core/if-then-else","cljs.core/empty?","cljs.core/constantly","cljs.core.partial.cljs$core$IFn$_invoke$arity$2","cljs.core/apply","cljs.core/juxt","cljs.core/vector","p1__62721#","frp.primitives.net/run-effects!*","G__62724","fexpr__62723","cljs.core/vals","G__62726","cljs.core/deref","cljs.core.apply.cljs$core$IFn$_invoke$arity$2","G__62725","frp.primitives.net/set-active","net-id","x","cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$2","cljs.core.partial.cljs$core$IFn$_invoke$arity$3","com.rpl.specter/setval*","p1__62727#","frp.primitives.net/run-invocations","G__62728","f!","G__62729","cljs.core/first","com.rpl.specter/transform*","cljs.core/rest","p1__62731#","frp.primitives.net/get-new-time","current","frp.time/now","pred__62732","cljs.core/=","expr__62733","frp.primitives.net/run-effects-twice!","aid.core.curry.cljs$core$IFn$_invoke$arity$2","frp.primitives.net/invoke-net","G__62735","cljs.core.not_EQ_.cljs$core$IFn$_invoke$arity$2","this__4385__auto__","k__4386__auto__","this__4387__auto__","k62737","else__4388__auto__","G__62749","cljs.core/Keyword","cljs.core.get.cljs$core$IFn$_invoke$arity$3","__extmap","this__4404__auto__","f__4405__auto__","init__4406__auto__","cljs.core.reduce.cljs$core$IFn$_invoke$arity$3","ret__4407__auto__","p__62753","vec__62754","k__4408__auto__","cljs.core.nth.cljs$core$IFn$_invoke$arity$3","v__4409__auto__","this__4399__auto__","writer__4400__auto__","opts__4401__auto__","pr-pair__4402__auto__","keyval__4403__auto__","cljs.core/pr-sequential-writer","cljs.core.concat.cljs$core$IFn$_invoke$arity$2","cljs.core/PersistentVector","G__62736","cljs.core/RecordIter","cljs.core/-iterator","cljs.core/nil-iter","this__4383__auto__","__meta","this__4380__auto__","__hash","this__4389__auto__","cljs.core/count","this__4381__auto__","h__4243__auto__","fexpr__62763","coll__4382__auto__","cljs.core/hash-unordered-coll","this62738","other62739","cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2","this__4394__auto__","k__4395__auto__","cljs.core/contains?","cljs.core.dissoc.cljs$core$IFn$_invoke$arity$2","cljs.core/-with-meta","cljs.core.into.cljs$core$IFn$_invoke$arity$2","cljs.core/not-empty","this__4392__auto__","k__4393__auto__","pred__62764","cljs.core/keyword-identical?","expr__62765","G__62767","G__62768","cljs.core.assoc.cljs$core$IFn$_invoke$arity$3","this__4397__auto__","cljs.core/seq","cljs.core/MapEntry","this__4384__auto__","this__4390__auto__","entry__4391__auto__","cljs.core/vector?","cljs.core._nth.cljs$core$IFn$_invoke$arity$2","cljs.core/-conj","self__","args62748","cljs.core/aclone","cljs.core/PROTOCOL_SENTINEL","frp.primitives.net/Net","this__4428__auto__","cljs.core/List","writer__4429__auto__","cljs.core/-write","G__62740","extmap__4424__auto__","G__62772","cljs.core/record?","frp.primitives.net/->Net","frp.primitives.net/map->Net","_","G__62770","cats.util/make-printable","frp.primitives.net/parse-keyword","cljs.reader/read-string","cljs.core/name","frp.primitives.net/get-last-key","cljs.core/key","cljs.core/last","frp.primitives.net/parse-last-key","p1__62773#","frp.primitives.net/get-id-number","pred__62774","aid.core/call-pred","expr__62775","G__62777","G__62778","cljs.core/number?","frp.primitives.net/get-id","cljs.core.comp.cljs$core$IFn$_invoke$arity$3","cljs.core/keyword","cljs.core/str","frp.primitives.net/net","G__62779","frp.primitives.net/*net-id*"],"sourcesContent":["(ns frp.primitives.net\n  (:require #?(:cljs [cljs.reader :as reader])\n            [aid.core :as aid]\n            [cats.protocols :as cats-protocols]\n            [cats.util :as util]\n            [com.rpl.specter :as s]\n            [linked.core :as linked]\n            [loom.graph :as graph]\n            [frp.time :as time])\n  #?(:clj (:import [clojure.lang IDeref IFn]))\n  #?(:cljs (:require-macros frp.primitives.net)))\n\n;TODO move net definitions to its own namespace\n(def initial-net-id\n  :0)\n\n(def initial-net\n  {:dependency (graph/digraph)\n   :function   (linked/map)\n   :occs       (linked/map)\n   :effect     (linked/map)\n   :time       time/epoch})\n\n(def initial-universe\n  (linked/map initial-net-id initial-net))\n\n(def universe-state\n  (atom initial-universe))\n\n(def juxt*\n  (comp (aid/if-then-else empty?\n                          (constantly (constantly []))\n                          (partial apply juxt))\n        vector))\n\n(def run-effects!*\n  #((->> @universe-state\n         %\n         :effect\n         vals\n         (apply juxt*))\n     (% @universe-state)))\n\n(defn set-active\n  [net-id x]\n  (swap! universe-state (partial s/setval* [net-id :active] x)))\n\n(def run-invocations\n  #(when-not (-> @universe-state\n                 %\n                 :invocations\n                 empty?)\n     (let [f! (-> @universe-state\n                  %\n                  :invocations\n                  first)]\n       (swap! universe-state\n              (partial s/transform* [% :invocations] rest))\n       (f!))\n     (recur %)))\n\n(def get-new-time\n  #(let [current (time/now)]\n     (aid/case-eval %\n       current (recur %)\n       current)))\n\n(defn run-effects-twice!\n  [net-id]\n  (set-active net-id false)\n  (run-effects!* net-id)\n  (swap! universe-state\n         (partial s/setval* [net-id :time] (get-new-time (time/now))))\n  (run-effects!* net-id)\n  (set-active net-id true)\n  (run-invocations net-id))\n\n;TODO rename this function as invoke*\n(aid/defcurried invoke-net\n  [net-id x]\n  (when (-> @universe-state\n            net-id\n            (not= x))\n    (swap! universe-state (partial s/setval* net-id x))\n    (run-effects-twice! net-id)))\n\n(defrecord Net\n  [net-id]\n  IFn\n  #?(:clj (applyTo [_ xs]\n            (run! (invoke-net net-id) xs)))\n  (#?(:clj  invoke\n      :cljs -invoke) [_ x]\n    (invoke-net net-id x))\n  IDeref\n  (#?(:clj  deref\n      :cljs -deref) [_]\n    (net-id @universe-state))\n  cats-protocols/Printable\n  (-repr [_]\n    (str \"#[net \" net-id \"]\")))\n\n(util/make-printable Net)\n\n(def parse-keyword\n  (comp #?(:clj  read-string\n           :cljs reader/read-string)\n        name))\n\n(def get-last-key\n  (comp key\n        last))\n\n(def parse-last-key\n  (comp parse-keyword\n        get-last-key))\n\n(def get-id-number\n  #(aid/casep %\n     empty? 0\n     (comp number?\n           parse-last-key)\n     (-> %\n         parse-last-key\n         inc)\n     (->> %\n          get-last-key\n          (dissoc %)\n          recur)))\n\n(def get-id\n  ;TODO return uuid for production\n  (comp keyword\n        str\n        get-id-number))\n\n(def net\n  #(let [net-id (get-id @universe-state)]\n     (swap! universe-state (partial s/setval* net-id initial-net))\n     (->Net net-id)))\n\n(def ^:dynamic *net-id*\n  initial-net-id)\n\n(defmacro with-net\n  [net expr]\n  `(binding [*net-id* (:net-id ~net)]\n     ~expr))\n"]}