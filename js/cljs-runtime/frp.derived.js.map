{"version":3,"sources":["frp/derived.cljc"],"mappings":"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","names":["var_args","args__4736__auto__","len__4730__auto__","i__4731__auto__","argseq__4737__auto__","cljs.core/IndexedSeq","frp.derived/event","seq56614","self__4718__auto__","cljs.core/seq","as","pred__56615","aid.core/call-pred","expr__56616","cljs.core/empty?","frp.primitives.event/mempty","cljs.core.map.cljs$core$IFn$_invoke$arity$2","frp.primitives.event/pure","cljs.core.apply.cljs$core$IFn$_invoke$arity$2","cats.core/<>","frp.derived/behavior?","cljs.core.partial.cljs$core$IFn$_invoke$arity$2","cljs.core/instance?","frp.primitives.behavior/Behavior","frp.derived/behavior","frp.primitives.behavior/pure","frp.derived/behaviorize","aid.core/if-else","frp.derived/eventize","frp.primitives.event/event?","frp.derived/multiton?","cljs.core.comp.cljs$core$IFn$_invoke$arity$2","cljs.core/<","cljs.core/count","frp.derived/has-argument?","more__56618__auto__","and__4120__auto__","cljs.core/seq?","frp.derived/make-only?","x","y","more__56619__auto__","cljs.core/some","cljs.core/complement","frp.derived/event-only?","frp.derived/behavior-only?","frp.derived/transparent*","seq56620","G__56621","cljs.core/first","cljs.core/next","self__4717__auto__","f","more","pred__56635","expr__56636","cljs.core/identity","fexpr__56628","pred__56629","expr__56630","G__56632","G__56633","more__56634__auto__","or__4131__auto__","aid.core/lift-a","frp.derived/accum","frp.clojure.core/reduce","aid.core/flip","aid.core/funcall","frp.derived/switcher","cats.core/join","frp.primitives.behavior/stepper","frp.derived/SECOND","com.rpl.specter/nthpath","frp.derived/set-non-action","cljs.core.partial.cljs$core$IFn$_invoke$arity$3","com.rpl.specter/setval*","com.rpl.specter/FIRST","frp.derived/sfirst","cljs.core/second","frp.derived/get-undo-redo","size","undo","redo","net","G__56656","p1__56639#","G__56657","cats.core/<$>","G__56658","G__56659","cljs.core.comp.cljs$core$IFn$_invoke$arity$variadic","cljs.core/set","cljs.core/map","cljs.core/flatten","cljs.core/rest","cljs.core.comp.cljs$core$IFn$_invoke$arity$3","com.rpl.specter/LAST","com.rpl.specter/transform*","cljs.core/take","com.rpl.specter/BEFORE-ELEM","G__56645","G__56646","G__56647","aid.core/<$","G__56648","G__56649","aid.core/if-then","G__56650","G__56651","aid.core/transfer*","G__56652","G__56653","cljs.core/last","G__56654","G__56655","G__56643","G__56644","frp.clojure.core/filter","frp.clojure.core/dedupe","G__56640","G__56641","G__56642","frp.derived/prefix","cljs.core.gensym.cljs$core$IFn$_invoke$arity$0","frp.derived/get-alias","cljs.core/symbol","cljs.core/str","frp.derived/get-event-alias","cljs.core/apply","cljs.core/array-map","cljs.core/mapcat","cljs.core.juxt.cljs$core$IFn$_invoke$arity$2","cljs.core.sequence.cljs$core$IFn$_invoke$arity$1","cljs.core.concat.cljs$core$IFn$_invoke$arity$variadic","cljs.core/List","frp.derived/run-aciton","action","frp.derived/run-actions","frp.derived/get-result","history","initial-result","inner-result","outer-result","frp.io/run","G__56660","cljs.core/deref","pred__56661","expr__56662","G__56668","G__56669","G__56670","fexpr__56667","t","initial-result*","outer-result*","pred__56671","cljs.core/=","expr__56672","frp.time/epoch","frp.primitives.behavior/time","aid.unit/unit","aid.core.curry.cljs$core$IFn$_invoke$arity$2","frp.derived/get-binding","event*","frp.derived/get-bindings","actions","cljs.core.mapcat.cljs$core$IFn$_invoke$arity$variadic"],"sourcesContent":["(ns frp.derived\n  (:require [clojure.walk :as walk]\n            [aid.core :as aid]\n            [aid.unit :as unit]\n            [cats.core :as m]\n            [com.rpl.specter :as s]\n            #?(:clj [riddley.walk :as riddley])\n            [frp.clojure.core :as core]\n            [frp.io :as io]\n            [frp.primitives.behavior :as behavior]\n            [frp.primitives.event :as event]\n            [frp.primitives.net :as net]\n            [frp.time :as time])\n  #?(:cljs (:require-macros frp.derived)))\n\n(defn event\n  ([& as]\n   (aid/casep as\n     empty? (event/mempty)\n     (->> as\n          (map event/pure)\n          (apply m/<>)))))\n\n(defmacro defe\n  [& names]\n  `(do ~@(map (fn [x#]\n                `(def ~x#\n                   (event)))\n              names)))\n\n(def behavior?\n  (partial instance? frp.primitives.behavior.Behavior))\n\n(def behavior\n  behavior/pure)\n\n(def behaviorize\n  (aid/if-else behavior?\n               behavior))\n\n(def eventize\n  (aid/if-else event/event?\n               event))\n\n(def multiton?\n  (comp (partial < 1)\n        count))\n\n(def has-argument?\n  (aid/build and\n             seq?\n             multiton?))\n\n(defn make-only?\n  [x y]\n  (aid/build and\n             (partial some x)\n             (complement (partial some y))))\n\n(def event-only?\n  (make-only? event/event? behavior?))\n\n(def behavior-only?\n  (make-only? behavior? event/event?))\n\n(defn transparent*\n  [f & more]\n  (->> more\n       (map (aid/casep more\n              event-only? eventize\n              behavior-only? behaviorize\n              identity))\n       (apply ((aid/casep more\n                 (aid/build or\n                            event-only?\n                            behavior-only?)\n                 aid/lift-a\n                 identity)\n                f))))\n\n;The reader conditional avoids the following warning.\n;WARNING: Use of undeclared Var clojure.walk/macroexpand-all\n#?(:clj\n   (defmacro transparent\n     [expr]\n     (->> expr\n          ;TODO macroexpand expr when ClojureScript starts supporting runtime macro expansion\n          ;macroexpand is only intended as a REPL utility\n          ;https://cljs.github.io/api/cljs.core/macroexpand\n          walk/macroexpand-all\n          (walk/postwalk #(aid/casep %\n                            has-argument? `(apply transparent* ~(vec %))\n                            %)))))\n\n(def accum\n  (partial core/reduce (aid/flip aid/funcall)))\n\n(def switcher\n  (comp m/join\n        behavior/stepper))\n\n(def SECOND\n  (s/nthpath 1))\n\n(def set-non-action\n  (partial s/setval* s/FIRST true))\n\n(def sfirst\n  (comp first\n        second))\n\n(defn get-undo-redo\n  [size undo redo net]\n  (->> net\n       (m/<$> #(aid/if-else (comp (partial (aid/flip aid/funcall) (:occs %))\n                                  set\n                                  (partial map :occs)\n                                  flatten\n                                  rest)\n                            (comp (partial s/setval* s/FIRST false)\n                                  (partial s/setval* s/LAST [])\n                                  (partial s/transform*\n                                           SECOND\n                                           (comp (partial take (inc size))\n                                                 (partial s/setval*\n                                                          s/BEFORE-ELEM\n                                                          %))))))\n       (m/<> (aid/<$ (aid/if-then (comp multiton?\n                                        second)\n                                  (comp set-non-action\n                                        (partial s/transform*\n                                                 SECOND\n                                                 rest)\n                                        (aid/transfer* [s/LAST s/BEFORE-ELEM]\n                                                       sfirst)))\n                     undo)\n             (aid/<$ (aid/if-else (comp empty?\n                                        last)\n                                  (comp set-non-action\n                                        (partial s/transform*\n                                                 s/LAST\n                                                 rest)\n                                        (aid/transfer* [SECOND s/BEFORE-ELEM]\n                                                       (comp first\n                                                             last))))\n                     redo))\n       (accum [false [] []])\n       (core/filter first)\n       core/dedupe\n       (m/<$> sfirst)))\n\n(def prefix\n  (gensym))\n\n(def get-alias\n  (comp symbol\n        (partial str prefix)))\n\n(def get-event-alias\n  (comp (partial apply array-map)\n        (partial mapcat (juxt identity\n                              get-alias))))\n\n(defn run-aciton\n  [action]\n  `(io/run ~(get-alias action) ~action))\n\n(def run-actions\n  (partial map run-aciton))\n\n#?(:clj (defn alias-expression\n          [actions expr]\n          (->> actions\n               get-event-alias\n               (repeat 2)\n               (s/setval s/AFTER-ELEM expr)\n               (apply riddley/walk-exprs))))\n\n(defn get-result\n  [history size undo redo initial-result inner-result]\n  (let [net (event)\n        outer-result (event)]\n    (io/run (fn [x]\n              (outer-result x)\n              (net @history))\n            inner-result)\n    (->> net\n         (get-undo-redo size undo redo)\n         (io/run history))\n    (aid/casep inner-result\n      event/event? outer-result\n      ((aid/lift-a (fn [t initial-result* outer-result*]\n                     (aid/case-eval t\n                       time/epoch initial-result*\n                       outer-result*)))\n        behavior/time\n        initial-result\n        (behavior/stepper unit/unit outer-result)))))\n;This definition may leak memory because of fmapping behavior.\n;(defn get-result\n;  [history size undo redo actions initial-result inner-result]\n;  (let [net (event)\n;        outer-result (event)]\n;    (->> actions\n;         (apply m/<>)\n;         (aid/<$ true)\n;         (m/<> (->> redo\n;                    (m/<> undo)\n;                    (aid/<$ false)))\n;         (behavior/stepper true)\n;         ((aid/casep inner-result\n;            event/event? event/snapshot\n;            (aid/lift-a vector))\n;           inner-result)\n;         (io/on (fn [[inner-result* action]]\n;                  (outer-result inner-result*)\n;                  (if action\n;                    (net @history)))))\n;    (io/on #(if (not= (:occs @history) (:occs %))\n;              (history %))\n;           (get-state size undo redo net))\n;    (aid/casep inner-result\n;      event/event? outer-result\n;      (->> outer-result\n;           (m/<$> behavior)\n;           (switcher initial-result)))))\n\n(aid/defcurried get-binding\n  [event* action]\n  [(get-alias action) event*])\n\n(defn get-bindings\n  [event* actions]\n  (mapcat (get-binding event*) actions))\n\n#?(:clj\n   (defmacro undoable\n     ;TODO add reset as a parameter\n     ;TODO delete actions for Clojure\n     ;TODO delete actions for ClojureScript when ClojureScript supports dynamic macro expansion with advanced optimizations\n     ;TODO deal with the arity in a function\n     ;When expr is an event, with-undo doesn't go back to the state where there is no occurrence.\n     ([undo actions expr]\n      `(undoable event/positive-infinity ~undo (event) ~actions ~expr))\n     ([x y actions expr]\n      (aid/casep x\n        number? `(undoable ~x ~y (event) ~actions ~expr)\n        `(undoable event/positive-infinity ~x ~y ~actions ~expr)))\n     ([size undo redo actions expr]\n      (potemkin/unify-gensyms\n        `(let [history## (net/net)\n               ~@(get-bindings `(net/with-net history##\n                                              (event))\n                               actions)]\n           ~@(run-actions actions)\n           (get-result\n             history##\n             ~size\n             ~undo\n             ~redo\n             ~expr\n             (net/with-net history##\n                           ~(alias-expression actions expr))))))))\n"]}