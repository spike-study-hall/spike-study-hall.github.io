{"version":3,"sources":["frp/tuple.cljc"],"mappings":"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","names":["this__4385__auto__","k__4386__auto__","this__4387__auto__","k62709","else__4388__auto__","G__62713","cljs.core/Keyword","fst","snd","cljs.core.get.cljs$core$IFn$_invoke$arity$3","__extmap","this__4404__auto__","f__4405__auto__","init__4406__auto__","cljs.core.reduce.cljs$core$IFn$_invoke$arity$3","ret__4407__auto__","p__62714","vec__62715","k__4408__auto__","cljs.core.nth.cljs$core$IFn$_invoke$arity$3","v__4409__auto__","this__4399__auto__","writer__4400__auto__","opts__4401__auto__","pr-pair__4402__auto__","keyval__4403__auto__","cljs.core/pr-sequential-writer","cljs.core.concat.cljs$core$IFn$_invoke$arity$2","cljs.core/PersistentVector","G__62708","cljs.core/RecordIter","cljs.core/-iterator","cljs.core/nil-iter","this__4383__auto__","__meta","this__4380__auto__","__hash","this__4389__auto__","cljs.core/count","this__4381__auto__","h__4243__auto__","fexpr__62730","coll__4382__auto__","cljs.core/hash-unordered-coll","this62710","other62711","cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2","this__4394__auto__","k__4395__auto__","cljs.core/contains?","cljs.core.dissoc.cljs$core$IFn$_invoke$arity$2","cljs.core/-with-meta","cljs.core.into.cljs$core$IFn$_invoke$arity$2","cljs.core/not-empty","cljs.core/PROTOCOL_SENTINEL","this__4392__auto__","k__4393__auto__","pred__62741","cljs.core/keyword-identical?","expr__62742","G__62744","G__62745","G__62746","G__62747","cljs.core.assoc.cljs$core$IFn$_invoke$arity$3","this__4397__auto__","cljs.core/seq","cljs.core/MapEntry","this__4384__auto__","this__4390__auto__","entry__4391__auto__","cljs.core/vector?","cljs.core._nth.cljs$core$IFn$_invoke$arity$2","cljs.core/-conj","frp.tuple/Tuple","this__4428__auto__","cljs.core/List","writer__4429__auto__","cljs.core/-write","G__62712","extmap__4424__auto__","G__62769","cljs.core.dissoc.cljs$core$IFn$_invoke$arity$variadic","cljs.core/record?","frp.tuple/->Tuple","frp.tuple/map->Tuple","_","js/frp","js/frp.tuple","js/frp.tuple.t_frp$tuple62750","frp.tuple/t_frp$tuple62750","_62752","meta62751","this__4374__auto__","writer__4375__auto__","opt__4376__auto__","frp.tuple/->t_frp$tuple62750","f","a","G__62757","G__62758","cats.context.infer.cljs$core$IFn$_invoke$arity$1","cats.core.mempty.cljs$core$IFn$_invoke$arity$1","fab","fa","aid.core/ap","context","ma","G__62761","fexpr__62760","fexpr__62760.cljs$core$IFn$_invoke$arity$variadic","more__62762__auto__","cljs.core.apply.cljs$core$IFn$_invoke$arity$2","cljs.core.comp.cljs$core$IFn$_invoke$arity$2","cljs.core.partial.cljs$core$IFn$_invoke$arity$2","cats.core/<>","cats.core/<$>","cljs.core.pr_str.cljs$core$IFn$_invoke$arity$variadic","cats.util/make-printable","frp.tuple/tuple","frp.tuple/snd","frp.tuple/fst"],"sourcesContent":[";TODO use cats.data when pair implements monad\n(ns frp.tuple\n  (:require [aid.core :as aid]\n            [cats.context :as ctx]\n            [cats.core :as m]\n            [cats.protocols :as p]\n            [cats.util :as util]))\n\n(declare ->Tuple)\n;In ClojureScript declare works around the following warning:\n;WARNING: Use of undeclared Var frp.tuple/->Tuple\n\n(defrecord Tuple\n  [fst snd]\n  p/Contextual\n  (-get-context [_]\n    (reify\n      p/Context\n      p/Functor\n      (-fmap [_ f _]\n        (Tuple. fst (f snd)))\n      p/Applicative\n      (-pure [_ a]\n        (->Tuple (-> fst\n                     ctx/infer\n                     m/mempty)\n                 a))\n      (-fapply [_ fab fa]\n        (aid/ap fab fa))\n      p/Monad\n      (-mreturn [context a]\n        (p/-pure context a))\n      (-mbind [_ ma f]\n        ((aid/build Tuple.\n                    (comp (partial m/<> fst)\n                          :fst)\n                    :snd)\n          (:snd (m/<$> f ma))))))\n  p/Printable\n  (-repr [_]\n    (str \"#[tuple \" (pr-str fst) \" \" (pr-str snd) \"]\")))\n\n(util/make-printable Tuple)\n\n(def tuple\n  ->Tuple)\n\n(def snd\n  :snd)\n\n(def fst\n  :fst)\n"]}