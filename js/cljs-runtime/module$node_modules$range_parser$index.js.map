{
"version":3,
"file":"module$node_modules$range_parser$index.js",
"lineCount":3,
"mappings":"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",
"sources":["node_modules/range-parser/index.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$range_parser$index\"] = function(global,require,module,exports) {\n/*!\n * range-parser\n * Copyright(c) 2012-2014 TJ Holowaychuk\n * Copyright(c) 2015-2016 Douglas Christopher Wilson\n * MIT Licensed\n */\n\n'use strict'\n\n/**\n * Module exports.\n * @public\n */\n\nmodule.exports = rangeParser\n\n/**\n * Parse \"Range\" header `str` relative to the given file `size`.\n *\n * @param {Number} size\n * @param {String} str\n * @param {Object} [options]\n * @return {Array}\n * @public\n */\n\nfunction rangeParser (size, str, options) {\n  if (typeof str !== 'string') {\n    throw new TypeError('argument str must be a string')\n  }\n\n  var index = str.indexOf('=')\n\n  if (index === -1) {\n    return -2\n  }\n\n  // split the range string\n  var arr = str.slice(index + 1).split(',')\n  var ranges = []\n\n  // add ranges type\n  ranges.type = str.slice(0, index)\n\n  // parse all ranges\n  for (var i = 0; i < arr.length; i++) {\n    var range = arr[i].split('-')\n    var start = parseInt(range[0], 10)\n    var end = parseInt(range[1], 10)\n\n    // -nnn\n    if (isNaN(start)) {\n      start = size - end\n      end = size - 1\n    // nnn-\n    } else if (isNaN(end)) {\n      end = size - 1\n    }\n\n    // limit last-byte-pos to current length\n    if (end > size - 1) {\n      end = size - 1\n    }\n\n    // invalid or unsatisifiable\n    if (isNaN(start) || isNaN(end) || start > end || start < 0) {\n      continue\n    }\n\n    // add range\n    ranges.push({\n      start: start,\n      end: end\n    })\n  }\n\n  if (ranges.length < 1) {\n    // unsatisifiable\n    return -1\n  }\n\n  return options && options.combine\n    ? combineRanges(ranges)\n    : ranges\n}\n\n/**\n * Combine overlapping & adjacent ranges.\n * @private\n */\n\nfunction combineRanges (ranges) {\n  var ordered = ranges.map(mapWithIndex).sort(sortByRangeStart)\n\n  for (var j = 0, i = 1; i < ordered.length; i++) {\n    var range = ordered[i]\n    var current = ordered[j]\n\n    if (range.start > current.end + 1) {\n      // next range\n      ordered[++j] = range\n    } else if (range.end > current.end) {\n      // extend range\n      current.end = range.end\n      current.index = Math.min(current.index, range.index)\n    }\n  }\n\n  // trim ordered array\n  ordered.length = j + 1\n\n  // generate combined range\n  var combined = ordered.sort(sortByRangeIndex).map(mapWithoutIndex)\n\n  // copy ranges type\n  combined.type = ranges.type\n\n  return combined\n}\n\n/**\n * Map function to add index value to ranges.\n * @private\n */\n\nfunction mapWithIndex (range, index) {\n  return {\n    start: range.start,\n    end: range.end,\n    index: index\n  }\n}\n\n/**\n * Map function to remove index value from ranges.\n * @private\n */\n\nfunction mapWithoutIndex (range) {\n  return {\n    start: range.start,\n    end: range.end\n  }\n}\n\n/**\n * Sort function to sort ranges by index.\n * @private\n */\n\nfunction sortByRangeIndex (a, b) {\n  return a.index - b.index\n}\n\n/**\n * Sort function to sort ranges by start position.\n * @private\n */\n\nfunction sortByRangeStart (a, b) {\n  return a.start - b.start\n}\n\n};"],
"names":["shadow$provide","global","require","module","exports","mapWithIndex","range","index","start","end","mapWithoutIndex","sortByRangeIndex","a","b","sortByRangeStart","rangeParser","size","str","options","TypeError","indexOf","arr","slice","split","ranges","type","i","length","parseInt","isNaN","push","combine","ordered","map","sort","j","current","Math","min","combined"]
}
