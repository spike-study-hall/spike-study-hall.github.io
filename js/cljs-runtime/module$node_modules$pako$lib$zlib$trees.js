shadow$provide.module$node_modules$pako$lib$zlib$trees=function(global,require,module,exports){function zero(buf){for(var len=buf.length;0<=--len;)buf[len]=0}function StaticTreeDesc(static_tree,extra_bits,extra_base,elems,max_length){this.static_tree=static_tree;this.extra_bits=extra_bits;this.extra_base=extra_base;this.elems=elems;this.max_length=max_length;this.has_stree=static_tree&&static_tree.length}function TreeDesc(dyn_tree,stat_desc){this.dyn_tree=dyn_tree;this.max_code=0;this.stat_desc=stat_desc}
function put_short(s,w){s.pending_buf[s.pending++]=w&255;s.pending_buf[s.pending++]=w>>>8&255}function send_bits(s,value,length){s.bi_valid>16-length?(s.bi_buf|=value<<s.bi_valid&65535,put_short(s,s.bi_buf),s.bi_buf=value>>16-s.bi_valid,s.bi_valid+=length-16):(s.bi_buf|=value<<s.bi_valid&65535,s.bi_valid+=length)}function send_code(s,c,tree){send_bits(s,tree[2*c],tree[2*c+1])}function bi_reverse(code,len){var res=0;do res|=code&1,code>>>=1,res<<=1;while(0<--len);return res>>>1}function gen_codes(tree,
max_code,bl_count){var next_code=Array(16),code=0,bits;for(bits=1;15>=bits;bits++)next_code[bits]=code=code+bl_count[bits-1]<<1;for(bl_count=0;bl_count<=max_code;bl_count++)code=tree[2*bl_count+1],0!==code&&(tree[2*bl_count]=bi_reverse(next_code[code]++,code))}function init_block(s){var n;for(n=0;286>n;n++)s.dyn_ltree[2*n]=0;for(n=0;30>n;n++)s.dyn_dtree[2*n]=0;for(n=0;19>n;n++)s.bl_tree[2*n]=0;s.dyn_ltree[512]=1;s.opt_len=s.static_len=0;s.last_lit=s.matches=0}function bi_windup(s){8<s.bi_valid?put_short(s,
s.bi_buf):0<s.bi_valid&&(s.pending_buf[s.pending++]=s.bi_buf);s.bi_buf=0;s.bi_valid=0}function smaller(tree,n,m,depth){var _n2=2*n,_m2=2*m;return tree[_n2]<tree[_m2]||tree[_n2]===tree[_m2]&&depth[n]<=depth[m]}function pqdownheap(s,tree,k){for(var v=s.heap[k],j=k<<1;j<=s.heap_len;){j<s.heap_len&&smaller(tree,s.heap[j+1],s.heap[j],s.depth)&&j++;if(smaller(tree,v,s.heap[j],s.depth))break;s.heap[k]=s.heap[j];k=j;j<<=1}s.heap[k]=v}function compress_block(s,ltree,dtree){var lx=0;if(0!==s.last_lit){do{var dist=
s.pending_buf[s.d_buf+2*lx]<<8|s.pending_buf[s.d_buf+2*lx+1];var lc=s.pending_buf[s.l_buf+lx];lx++;if(0===dist)send_code(s,lc,ltree);else{var code=_length_code[lc];send_code(s,code+256+1,ltree);var extra=extra_lbits[code];0!==extra&&(lc-=base_length[code],send_bits(s,lc,extra));dist--;code=256>dist?_dist_code[dist]:_dist_code[256+(dist>>>7)];send_code(s,code,dtree);extra=extra_dbits[code];0!==extra&&(dist-=base_dist[code],send_bits(s,dist,extra))}}while(lx<s.last_lit)}send_code(s,256,ltree)}function build_tree(s,
desc){var tree=desc.dyn_tree,stree=desc.stat_desc.static_tree,has_stree=desc.stat_desc.has_stree,elems=desc.stat_desc.elems,n,max_code=-1;s.heap_len=0;s.heap_max=573;for(n=0;n<elems;n++)0!==tree[2*n]?(s.heap[++s.heap_len]=max_code=n,s.depth[n]=0):tree[2*n+1]=0;for(;2>s.heap_len;){var node=s.heap[++s.heap_len]=2>max_code?++max_code:0;tree[2*node]=1;s.depth[node]=0;s.opt_len--;has_stree&&(s.static_len-=stree[2*node+1])}desc.max_code=max_code;for(n=s.heap_len>>1;1<=n;n--)pqdownheap(s,tree,n);node=elems;
do n=s.heap[1],s.heap[1]=s.heap[s.heap_len--],pqdownheap(s,tree,1),stree=s.heap[1],s.heap[--s.heap_max]=n,s.heap[--s.heap_max]=stree,tree[2*node]=tree[2*n]+tree[2*stree],s.depth[node]=(s.depth[n]>=s.depth[stree]?s.depth[n]:s.depth[stree])+1,tree[2*n+1]=tree[2*stree+1]=node,s.heap[1]=node++,pqdownheap(s,tree,1);while(2<=s.heap_len);s.heap[--s.heap_max]=s.heap[1];n=desc.dyn_tree;node=desc.max_code;stree=desc.stat_desc.static_tree;has_stree=desc.stat_desc.has_stree;elems=desc.stat_desc.extra_bits;var base=
desc.stat_desc.extra_base,max_length=desc.stat_desc.max_length,bits,overflow=0;for(bits=0;15>=bits;bits++)s.bl_count[bits]=0;n[2*s.heap[s.heap_max]+1]=0;for(desc=s.heap_max+1;573>desc;desc++){var n$jscomp$0=s.heap[desc];bits=n[2*n[2*n$jscomp$0+1]+1]+1;bits>max_length&&(bits=max_length,overflow++);n[2*n$jscomp$0+1]=bits;if(!(n$jscomp$0>node)){s.bl_count[bits]++;var xbits=0;n$jscomp$0>=base&&(xbits=elems[n$jscomp$0-base]);var f=n[2*n$jscomp$0];s.opt_len+=f*(bits+xbits);has_stree&&(s.static_len+=f*(stree[2*
n$jscomp$0+1]+xbits))}}if(0!==overflow){do{for(bits=max_length-1;0===s.bl_count[bits];)bits--;s.bl_count[bits]--;s.bl_count[bits+1]+=2;s.bl_count[max_length]--;overflow-=2}while(0<overflow);for(bits=max_length;0!==bits;bits--)for(n$jscomp$0=s.bl_count[bits];0!==n$jscomp$0;)stree=s.heap[--desc],stree>node||(n[2*stree+1]!==bits&&(s.opt_len+=(bits-n[2*stree+1])*n[2*stree],n[2*stree+1]=bits),n$jscomp$0--)}gen_codes(tree,max_code,s.bl_count)}function scan_tree(s,tree,max_code){var n,prevlen=-1,nextlen=
tree[1],count=0,max_count=7,min_count=4;0===nextlen&&(max_count=138,min_count=3);tree[2*(max_code+1)+1]=65535;for(n=0;n<=max_code;n++){var curlen=nextlen;nextlen=tree[2*(n+1)+1];++count<max_count&&curlen===nextlen||(count<min_count?s.bl_tree[2*curlen]+=count:0!==curlen?(curlen!==prevlen&&s.bl_tree[2*curlen]++,s.bl_tree[32]++):10>=count?s.bl_tree[34]++:s.bl_tree[36]++,count=0,prevlen=curlen,0===nextlen?(max_count=138,min_count=3):curlen===nextlen?(max_count=6,min_count=3):(max_count=7,min_count=4))}}
function send_tree(s,tree,max_code){var n,prevlen=-1,nextlen=tree[1],count=0,max_count=7,min_count=4;0===nextlen&&(max_count=138,min_count=3);for(n=0;n<=max_code;n++){var curlen=nextlen;nextlen=tree[2*(n+1)+1];if(!(++count<max_count&&curlen===nextlen)){if(count<min_count){do send_code(s,curlen,s.bl_tree);while(0!==--count)}else 0!==curlen?(curlen!==prevlen&&(send_code(s,curlen,s.bl_tree),count--),send_code(s,16,s.bl_tree),send_bits(s,count-3,2)):10>=count?(send_code(s,17,s.bl_tree),send_bits(s,count-
3,3)):(send_code(s,18,s.bl_tree),send_bits(s,count-11,7));count=0;prevlen=curlen;0===nextlen?(max_count=138,min_count=3):curlen===nextlen?(max_count=6,min_count=3):(max_count=7,min_count=4)}}}function detect_data_type(s){var black_mask=4093624447,n;for(n=0;31>=n;n++,black_mask>>>=1)if(black_mask&1&&0!==s.dyn_ltree[2*n])return 0;if(0!==s.dyn_ltree[18]||0!==s.dyn_ltree[20]||0!==s.dyn_ltree[26])return 1;for(n=32;256>n;n++)if(0!==s.dyn_ltree[2*n])return 1;return 0}function _tr_stored_block(s,buf,stored_len,
last){send_bits(s,last?1:0,3);bi_windup(s);put_short(s,stored_len);put_short(s,~stored_len);utils.arraySet(s.pending_buf,s.window,buf,stored_len,s.pending);s.pending+=stored_len}var utils=require("module$node_modules$pako$lib$utils$common"),extra_lbits=[0,0,0,0,0,0,0,0,1,1,1,1,2,2,2,2,3,3,3,3,4,4,4,4,5,5,5,5,0],extra_dbits=[0,0,0,0,1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10,11,11,12,12,13,13],extra_blbits=[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,3,7],bl_order=[16,17,18,0,8,7,9,6,10,5,11,4,12,3,13,2,14,1,
15],static_ltree=Array(576);zero(static_ltree);var static_dtree=Array(60);zero(static_dtree);var _dist_code=Array(512);zero(_dist_code);var _length_code=Array(256);zero(_length_code);var base_length=Array(29);zero(base_length);var base_dist=Array(30);zero(base_dist);var static_l_desc,static_d_desc,static_bl_desc,static_init_done=!1;exports._tr_init=function(s){if(!static_init_done){var n,length,code,bl_count=Array(16);for(code=length=0;28>code;code++)for(base_length[code]=length,n=0;n<1<<extra_lbits[code];n++)_length_code[length++]=
code;_length_code[length-1]=code;for(code=length=0;16>code;code++)for(base_dist[code]=length,n=0;n<1<<extra_dbits[code];n++)_dist_code[length++]=code;for(length>>=7;30>code;code++)for(base_dist[code]=length<<7,n=0;n<1<<extra_dbits[code]-7;n++)_dist_code[256+length++]=code;for(n=0;15>=n;n++)bl_count[n]=0;for(n=0;143>=n;)static_ltree[2*n+1]=8,n++,bl_count[8]++;for(;255>=n;)static_ltree[2*n+1]=9,n++,bl_count[9]++;for(;279>=n;)static_ltree[2*n+1]=7,n++,bl_count[7]++;for(;287>=n;)static_ltree[2*n+1]=8,
n++,bl_count[8]++;gen_codes(static_ltree,287,bl_count);for(n=0;30>n;n++)static_dtree[2*n+1]=5,static_dtree[2*n]=bi_reverse(n,5);static_l_desc=new StaticTreeDesc(static_ltree,extra_lbits,257,286,15);static_d_desc=new StaticTreeDesc(static_dtree,extra_dbits,0,30,15);static_bl_desc=new StaticTreeDesc([],extra_blbits,0,19,7);static_init_done=!0}s.l_desc=new TreeDesc(s.dyn_ltree,static_l_desc);s.d_desc=new TreeDesc(s.dyn_dtree,static_d_desc);s.bl_desc=new TreeDesc(s.bl_tree,static_bl_desc);s.bi_buf=0;
s.bi_valid=0;init_block(s)};exports._tr_stored_block=_tr_stored_block;exports._tr_flush_block=function(s,buf,stored_len,last){var max_blindex=0;if(0<s.level){2===s.strm.data_type&&(s.strm.data_type=detect_data_type(s));build_tree(s,s.l_desc);build_tree(s,s.d_desc);scan_tree(s,s.dyn_ltree,s.l_desc.max_code);scan_tree(s,s.dyn_dtree,s.d_desc.max_code);build_tree(s,s.bl_desc);for(max_blindex=18;3<=max_blindex&&0===s.bl_tree[2*bl_order[max_blindex]+1];max_blindex--);s.opt_len+=3*(max_blindex+1)+14;var opt_lenb=
s.opt_len+3+7>>>3;var static_lenb=s.static_len+3+7>>>3;static_lenb<=opt_lenb&&(opt_lenb=static_lenb)}else opt_lenb=static_lenb=stored_len+5;if(stored_len+4<=opt_lenb&&-1!==buf)_tr_stored_block(s,buf,stored_len,last);else if(4===s.strategy||static_lenb===opt_lenb)send_bits(s,2+(last?1:0),3),compress_block(s,static_ltree,static_dtree);else{send_bits(s,4+(last?1:0),3);buf=s.l_desc.max_code+1;stored_len=s.d_desc.max_code+1;max_blindex+=1;send_bits(s,buf-257,5);send_bits(s,stored_len-1,5);send_bits(s,
max_blindex-4,4);for(opt_lenb=0;opt_lenb<max_blindex;opt_lenb++)send_bits(s,s.bl_tree[2*bl_order[opt_lenb]+1],3);send_tree(s,s.dyn_ltree,buf-1);send_tree(s,s.dyn_dtree,stored_len-1);compress_block(s,s.dyn_ltree,s.dyn_dtree)}init_block(s);last&&bi_windup(s)};exports._tr_tally=function(s,dist,lc){s.pending_buf[s.d_buf+2*s.last_lit]=dist>>>8&255;s.pending_buf[s.d_buf+2*s.last_lit+1]=dist&255;s.pending_buf[s.l_buf+s.last_lit]=lc&255;s.last_lit++;0===dist?s.dyn_ltree[2*lc]++:(s.matches++,dist--,s.dyn_ltree[2*
(_length_code[lc]+256+1)]++,s.dyn_dtree[2*(256>dist?_dist_code[dist]:_dist_code[256+(dist>>>7)])]++);return s.last_lit===s.lit_bufsize-1};exports._tr_align=function(s){send_bits(s,2,3);send_code(s,256,static_ltree);16===s.bi_valid?(put_short(s,s.bi_buf),s.bi_buf=0,s.bi_valid=0):8<=s.bi_valid&&(s.pending_buf[s.pending++]=s.bi_buf&255,s.bi_buf>>=8,s.bi_valid-=8)}}
//# sourceMappingURL=module$node_modules$pako$lib$zlib$trees.js.map
