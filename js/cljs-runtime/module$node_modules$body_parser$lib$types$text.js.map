{
"version":3,
"file":"module$node_modules$body_parser$lib$types$text.js",
"lineCount":3,
"mappings":"AAAAA,cAAA,+CAAA,CAAmE,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CAqH3GC,QAASA,YAAY,CAACC,IAAD,CAAO,CAC1B,MAAOC,SAAmB,CAACC,GAAD,CAAM,CAC9B,MAAO,CAAA,CAAQC,MAAA,CAAOD,GAAP,CAAYF,IAAZ,CADe,CADN,CAxG5B,IAAII,MAAQR,OAAA,CAAQ,iCAAR,CAAZ,CACIS,YAAcT,OAAA,CAAQ,wCAAR,CADlB,CAEIU,MAAQV,OAAA,CAAQ,uCAAR,CAAA,CAAiB,kBAAjB,CAFZ,CAGIW,KAAOX,OAAA,CAAQ,0CAAR,CAHX,CAIIO,OAASP,OAAA,CAAQ,mCAAR,CAMbC,OAAAC,QAAA,CAUAU,QAAc,CAACC,OAAD,CAAU,CAoBtBC,QAASA,MAAM,CAACC,GAAD,CAAM,CACnB,MAAOA,IADY;AAnBjBC,OAAAA,CAAOH,OAAPG,EAAkB,EAEtB,KAAIC,eAAiBD,OAAAC,eAAjBA,EAAwC,OAA5C,CACIC,QAA2B,CAAA,CAA3BA,GAAUF,OAAAE,QADd,CAEIC,MAA8B,QAAtB,GAAA,MAAOH,QAAAG,MAAP,CACRX,KAAAM,MAAA,CAAYE,OAAAG,MAAZ,EAA0B,OAA1B,CADQ,CAERH,OAAAG,MAJJ,CAKIf,KAAOY,OAAAZ,KAAPA,EAAoB,YALxB,CAMIgB,OAASJ,OAAAI,OAATA,EAAwB,CAAA,CAE5B,IAAe,CAAA,CAAf,GAAIA,MAAJ,EAA0C,UAA1C,GAAwB,MAAOA,OAA/B,CACE,KAAM,KAAIC,SAAJ,CAAc,gCAAd,CAAN,CAIF,IAAIC,YAA8B,UAAhB,GAAA,MAAOlB,KAAP,CACdD,WAAA,CAAYC,IAAZ,CADc,CAEdA,IAMJ,OAAOmB,SAAoB,CAACjB,GAAD,CAAMkB,GAAN,CAAWC,IAAX,CAAiB,CAC1C,GAAInB,GAAAoB,MAAJ,CACEhB,KAAA,CAAM,qBAAN,CACA,CAAAe,IAAA,EAFF,KASA,IAHAnB,GAAAqB,KAGK;AAHMrB,GAAAqB,KAGN,EAHkB,EAGlB,CAAApB,MAAAqB,QAAA,CAAetB,GAAf,CAAL,CASA,GAHAI,KAAA,CAAM,iBAAN,CAAyBJ,GAAAuB,QAAA,CAAY,cAAZ,CAAzB,CAGK,CAAAP,WAAA,CAAYhB,GAAZ,CAAL,CAAA,CA2BF,GAAI,CACF,IAAA,yBAAOwB,CAACrB,WAAAK,MAAA,CArBiBR,GAqBjB,CAAAyB,WAAAC,QAADF,EAA8C,EAA9CA,aAAA,EADL,CAEF,MAAOG,CAAP,CAAU,CACV,wBAAA,CAAOC,IAAAA,EADG,CAnBVvB,IAAA,CAAKL,GAAL,CAAUkB,GAAV,CAAeC,IAAf,CAAqBX,KAArB,CAA4BJ,KAA5B,CAAmC,CACjCyB,SAJY,wBAIZA,EAJ+BlB,cAGE,CAEjCC,QAASA,OAFwB,CAGjCC,MAAOA,KAH0B,CAIjCC,OAAQA,MAJyB,CAAnC,CAVA,CAAA,IACEV,MAAA,CAAM,cAAN,CACA,CAAAe,IAAA,EAXF,KACEf,MAAA,CAAM,iBAAN,CACA,CAAAe,IAAA,EAZwC,CAxBtB,CAjCmF;",
"sources":["node_modules/body-parser/lib/types/text.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$body_parser$lib$types$text\"] = function(global,require,module,exports) {\n/*!\n * body-parser\n * Copyright(c) 2014-2015 Douglas Christopher Wilson\n * MIT Licensed\n */\n\n'use strict'\n\n/**\n * Module dependencies.\n */\n\nvar bytes = require('bytes')\nvar contentType = require('content-type')\nvar debug = require('debug')('body-parser:text')\nvar read = require('../read')\nvar typeis = require('type-is')\n\n/**\n * Module exports.\n */\n\nmodule.exports = text\n\n/**\n * Create a middleware to parse text bodies.\n *\n * @param {object} [options]\n * @return {function}\n * @api public\n */\n\nfunction text (options) {\n  var opts = options || {}\n\n  var defaultCharset = opts.defaultCharset || 'utf-8'\n  var inflate = opts.inflate !== false\n  var limit = typeof opts.limit !== 'number'\n    ? bytes.parse(opts.limit || '100kb')\n    : opts.limit\n  var type = opts.type || 'text/plain'\n  var verify = opts.verify || false\n\n  if (verify !== false && typeof verify !== 'function') {\n    throw new TypeError('option verify must be function')\n  }\n\n  // create the appropriate type checking function\n  var shouldParse = typeof type !== 'function'\n    ? typeChecker(type)\n    : type\n\n  function parse (buf) {\n    return buf\n  }\n\n  return function textParser (req, res, next) {\n    if (req._body) {\n      debug('body already parsed')\n      next()\n      return\n    }\n\n    req.body = req.body || {}\n\n    // skip requests without bodies\n    if (!typeis.hasBody(req)) {\n      debug('skip empty body')\n      next()\n      return\n    }\n\n    debug('content-type %j', req.headers['content-type'])\n\n    // determine if request should be parsed\n    if (!shouldParse(req)) {\n      debug('skip parsing')\n      next()\n      return\n    }\n\n    // get charset\n    var charset = getCharset(req) || defaultCharset\n\n    // read\n    read(req, res, next, parse, debug, {\n      encoding: charset,\n      inflate: inflate,\n      limit: limit,\n      verify: verify\n    })\n  }\n}\n\n/**\n * Get the charset of a request.\n *\n * @param {object} req\n * @api private\n */\n\nfunction getCharset (req) {\n  try {\n    return (contentType.parse(req).parameters.charset || '').toLowerCase()\n  } catch (e) {\n    return undefined\n  }\n}\n\n/**\n * Get the simple type checker.\n *\n * @param {string} type\n * @return {function}\n */\n\nfunction typeChecker (type) {\n  return function checkType (req) {\n    return Boolean(typeis(req, type))\n  }\n}\n\n};"],
"names":["shadow$provide","global","require","module","exports","typeChecker","type","checkType","req","typeis","bytes","contentType","debug","read","text","options","parse","buf","opts","defaultCharset","inflate","limit","verify","TypeError","shouldParse","textParser","res","next","_body","body","hasBody","headers","toLowerCase","parameters","charset","e","undefined","encoding"]
}
