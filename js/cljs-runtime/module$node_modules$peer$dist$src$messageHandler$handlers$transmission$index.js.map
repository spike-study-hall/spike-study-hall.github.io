{
"version":3,
"file":"module$node_modules$peer$dist$src$messageHandler$handlers$transmission$index.js",
"lineCount":2,
"mappings":"AAAAA,cAAA,6EAAA,CAAiG,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CAEzIC,MAAAC,eAAA,CAAsBF,OAAtB,CAA+B,YAA/B,CAA6C,CAAEG,MAAO,CAAA,CAAT,CAA7C,CACA,KAAMC,QAAUN,OAAA,CAAQ,yCAAR,CAChBE,QAAAK,oBAAA,CAA8BC,QAAA,CAAC,2BAAD,CAAe,CAAZ,IAAAC,MAAF,2BAAE,MAAA,CACvBC,OAASA,QAAA,CAACC,MAAD,CAASC,OAAT,CAAqB,CAChC,IAAMC,KAAOD,OAAAC,KAAb,CACMC,MAAQF,OAAAG,IADd,CAEMC,MAAQJ,OAAAK,IAFd,CAGMC,kBAAoBT,KAAAU,cAAA,CAAoBH,KAApB,CAE1B,IAAIE,iBAAJ,CAAuB,CACbE,IAAAA;AAASF,iBAAAG,UAAA,EACf,IAAI,CACA,GAAID,IAAJ,CAAY,CACR,IAAME,KAAOC,IAAAC,UAAA,CAAeZ,OAAf,CACbQ,KAAAK,KAAA,CAAYH,IAAZ,CAFQ,CAAZ,IAMI,MAAUI,MAAJ,CAAU,WAAV,CAAN,CAPJ,CAUJ,MAAOC,CAAP,CAAU,CAIFP,IAAJ,CACIA,IAAAQ,MAAA,EADJ,CAIInB,KAAAoB,iBAAA,CAAuBX,iBAAAY,MAAA,EAAvB,CAEJ,CAAApB,MAAA,CAAOC,MAAP,CAAe,CACXE,KAAMP,OAAAyB,YAAAC,MADK,CAEXjB,IAAKC,KAFM,CAGXC,IAAKH,KAHM,CAAf,CAVM,CAZS,CAAvB,IAiCQ,CADiBmB,CAAC3B,OAAAyB,YAAAC,MAADC,CAA4B3B,OAAAyB,YAAAG,OAA5BD,CAChBE,SAAA,CAAsBtB,IAAtB,CAAL,EAAoCG,KAApC,CACIP,KAAA2B,kBAAA,CAAwBpB,KAAxB,CAA+BJ,OAA/B,CADJ,CAGSC,IAHT,GAGkBP,OAAAyB,YAAAC,MAHlB,EAGgDhB,KAHhD,EAIIP,KAAAoB,iBAAA,CAAuBf,KAAvB,CAOR,OAAO,CAAA,CAlDyB,CAoDpC,OAAOJ,OArDkC,CAJ4F;",
"sources":["node_modules/peer/dist/src/messageHandler/handlers/transmission/index.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$peer$dist$src$messageHandler$handlers$transmission$index\"] = function(global,require,module,exports) {\n\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst enums_1 = require(\"../../../enums\");\nexports.TransmissionHandler = ({ realm }) => {\n    const handle = (client, message) => {\n        const type = message.type;\n        const srcId = message.src;\n        const dstId = message.dst;\n        const destinationClient = realm.getClientById(dstId);\n        // User is connected!\n        if (destinationClient) {\n            const socket = destinationClient.getSocket();\n            try {\n                if (socket) {\n                    const data = JSON.stringify(message);\n                    socket.send(data);\n                }\n                else {\n                    // Neither socket no res available. Peer dead?\n                    throw new Error(\"Peer dead\");\n                }\n            }\n            catch (e) {\n                // This happens when a peer disconnects without closing connections and\n                // the associated WebSocket has not closed.\n                // Tell other side to stop trying.\n                if (socket) {\n                    socket.close();\n                }\n                else {\n                    realm.removeClientById(destinationClient.getId());\n                }\n                handle(client, {\n                    type: enums_1.MessageType.LEAVE,\n                    src: dstId,\n                    dst: srcId\n                });\n            }\n        }\n        else {\n            // Wait for this client to connect/reconnect (XHR) for important\n            // messages.\n            const ignoredTypes = [enums_1.MessageType.LEAVE, enums_1.MessageType.EXPIRE];\n            if (!ignoredTypes.includes(type) && dstId) {\n                realm.addMessageToQueue(dstId, message);\n            }\n            else if (type === enums_1.MessageType.LEAVE && !dstId) {\n                realm.removeClientById(srcId);\n            }\n            else {\n                // Unavailable destination specified with message LEAVE or EXPIRE\n                // Ignore\n            }\n        }\n        return true;\n    };\n    return handle;\n};\n\n};"],
"names":["shadow$provide","global","require","module","exports","Object","defineProperty","value","enums_1","TransmissionHandler","exports.TransmissionHandler","realm","handle","client","message","type","srcId","src","dstId","dst","destinationClient","getClientById","socket","getSocket","data","JSON","stringify","send","Error","e","close","removeClientById","getId","MessageType","LEAVE","ignoredTypes","EXPIRE","includes","addMessageToQueue"]
}
