{
"version":3,
"file":"module$node_modules$peer$dist$src$models$realm.js",
"lineCount":3,
"mappings":"AAAAA,cAAA,+CAAA,CAAmE,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CAEvGC,MAAAA,CAAmB,IAAnBA,EAA2B,IAAAA,gBAA3BA,EAAoD,QAAS,CAACC,GAAD,CAAM,CACnE,MAAQA,IAAD,EAAQA,GAAAC,WAAR,CAA0BD,GAA1B,CAAgC,CAAE,UAAWA,GAAb,CAD4B,CAGvEE,OAAAC,eAAA,CAAsBL,OAAtB,CAA+B,YAA/B,CAA6C,CAAEM,MAAO,CAAA,CAAT,CAA7C,CACA,KAAMC,KAAON,MAAA,CAAgBH,OAAA,CAAQ,6BAAR,CAAhB,CAAb,CACMU,eAAiBV,OAAA,CAAQ,uDAAR,CACjBW,QAAAA,CACFC,QAAW,EAAG,CACV,IAAAC,QAAA,CAAe,IAAIC,GACnB,KAAAC,cAAA,CAAqB,IAAID,GAFf,CAId,QAAA,UAAA,cAAAE,CAAAA,QAAa,EAAG,CACZ,MAAO,EAAA,OAAA,CAAA,OAAA,kBAAA,CAAI,IAAAH,QAAAI,KAAA,EAAJ,CAAA,CADK,CAGhB;OAAA,UAAA,cAAAC,CAAAA,QAAa,CAACC,QAAD,CAAW,CACpB,MAAO,KAAAN,QAAAO,IAAA,CAAiBD,QAAjB,CADa,CAGxB,QAAA,UAAA,uBAAAE,CAAAA,QAAsB,EAAG,CACrB,MAAO,EAAA,OAAA,CAAA,OAAA,kBAAA,CAAI,IAAAN,cAAAE,KAAA,EAAJ,CAAA,CADc,CAGzB,QAAA,UAAA,UAAAK,CAAAA,QAAS,CAACC,MAAD,CAASC,EAAT,CAAa,CAClB,IAAAX,QAAAY,IAAA,CAAiBD,EAAjB,CAAqBD,MAArB,CADkB,CAGtB,QAAA,UAAA,iBAAAG,CAAAA,QAAgB,CAACF,EAAD,CAAK,CAEjB,GAAI,CADW,IAAAN,cAAAK,CAAmBC,EAAnBD,CACf,CACI,MAAO,CAAA,CACX,KAAAV,QAAAc,OAAA,CAAoBH,EAApB,CACA,OAAO,CAAA,CALU,CAOrB,QAAA,UAAA,oBAAAI,CAAAA,QAAmB,CAACJ,EAAD,CAAK,CACpB,MAAO,KAAAT,cAAAK,IAAA,CAAuBI,EAAvB,CADa,CAGxB,QAAA,UAAA,kBAAAK;AAAAA,QAAiB,CAACL,EAAD,CAAKM,OAAL,CAAc,CACtB,IAAAF,oBAAA,CAAyBJ,EAAzB,CAAL,EACI,IAAAT,cAAAU,IAAA,CAAuBD,EAAvB,CAA2B,IAAId,cAAAqB,aAA/B,CAEJ,KAAAH,oBAAA,CAAyBJ,EAAzB,CAAAQ,WAAA,CAAwCF,OAAxC,CAJ2B,CAM/B,QAAA,UAAA,kBAAAG,CAAAA,QAAiB,CAACT,EAAD,CAAK,CAClB,IAAAT,cAAAY,OAAA,CAA0BH,EAA1B,CADkB,CAGtB,QAAA,UAAA,iBAAAU,CAAAA,QAAgB,CAACA,gBAAD,CAAmB,CACzBC,gBAAAA,CAAaD,gBAAA,CAAmBA,gBAAnB,CAAsCzB,IAAA2B,QAEzD,KADA,IAAIjB,SAAWgB,gBAAA,EACf,CAAO,IAAAjB,cAAA,CAAmBC,QAAnB,CAAP,CAAA,CACIA,QAAA,CAAWgB,gBAAA,EAEf,OAAOhB,SANwB,CASvCjB,QAAAS,MAAA,CAAgBA,OArD2F;",
"sources":["node_modules/peer/dist/src/models/realm.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$peer$dist$src$models$realm\"] = function(global,require,module,exports) {\n\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst v4_1 = __importDefault(require(\"uuid/v4\"));\nconst messageQueue_1 = require(\"./messageQueue\");\nclass Realm {\n    constructor() {\n        this.clients = new Map();\n        this.messageQueues = new Map();\n    }\n    getClientsIds() {\n        return [...this.clients.keys()];\n    }\n    getClientById(clientId) {\n        return this.clients.get(clientId);\n    }\n    getClientsIdsWithQueue() {\n        return [...this.messageQueues.keys()];\n    }\n    setClient(client, id) {\n        this.clients.set(id, client);\n    }\n    removeClientById(id) {\n        const client = this.getClientById(id);\n        if (!client)\n            return false;\n        this.clients.delete(id);\n        return true;\n    }\n    getMessageQueueById(id) {\n        return this.messageQueues.get(id);\n    }\n    addMessageToQueue(id, message) {\n        if (!this.getMessageQueueById(id)) {\n            this.messageQueues.set(id, new messageQueue_1.MessageQueue());\n        }\n        this.getMessageQueueById(id).addMessage(message);\n    }\n    clearMessageQueue(id) {\n        this.messageQueues.delete(id);\n    }\n    generateClientId(generateClientId) {\n        const generateId = generateClientId ? generateClientId : v4_1.default;\n        let clientId = generateId();\n        while (this.getClientById(clientId)) {\n            clientId = generateId();\n        }\n        return clientId;\n    }\n}\nexports.Realm = Realm;\n\n};"],
"names":["shadow$provide","global","require","module","exports","__importDefault","mod","__esModule","Object","defineProperty","value","v4_1","messageQueue_1","Realm","constructor","clients","Map","messageQueues","getClientsIds","keys","getClientById","clientId","get","getClientsIdsWithQueue","setClient","client","id","set","removeClientById","delete","getMessageQueueById","addMessageToQueue","message","MessageQueue","addMessage","clearMessageQueue","generateClientId","generateId","default"]
}
