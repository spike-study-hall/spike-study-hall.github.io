shadow$provide.module$node_modules$ws$lib$EventTarget=function(global,require,module,exports){var Event=function(type,target){this.target=target;this.type=type},MessageEvent=function(data,target){target=Event.call(this,"message",target)||this;target.data=data;return target};$jscomp.inherits(MessageEvent,Event);var CloseEvent=function(code,reason,target){var $jscomp$super$this=Event.call(this,"close",target)||this;$jscomp$super$this.wasClean=target._closeFrameReceived&&target._closeFrameSent;$jscomp$super$this.reason=
reason;$jscomp$super$this.code=code;return $jscomp$super$this};$jscomp.inherits(CloseEvent,Event);var OpenEvent=function(target){return Event.call(this,"open",target)||this};$jscomp.inherits(OpenEvent,Event);module.exports={addEventListener:function(method,listener){function onMessage(data){listener.call(this,new MessageEvent(data,this))}function onClose(code,message){listener.call(this,new CloseEvent(code,message,this))}function onError(event){event.type="error";event.target=this;listener.call(this,
event)}function onOpen(){listener.call(this,new OpenEvent(this))}if("function"===typeof listener)if("message"===method)onMessage._listener=listener,this.on(method,onMessage);else if("close"===method)onClose._listener=listener,this.on(method,onClose);else if("error"===method)onError._listener=listener,this.on(method,onError);else if("open"===method)onOpen._listener=listener,this.on(method,onOpen);else this.on(method,listener)},removeEventListener:function(method,listener){for(var listeners=this.listeners(method),
i=0;i<listeners.length;i++)listeners[i]!==listener&&listeners[i]._listener!==listener||this.removeListener(method,listeners[i])}}}
//# sourceMappingURL=module$node_modules$ws$lib$EventTarget.js.map
