shadow$provide.module$node_modules$body_parser$lib$read=function(global,require,module,exports){function contentstream(req,debug,inflate){var encoding=(req.headers["content-encoding"]||"identity").toLowerCase(),length=req.headers["content-length"];debug('content-encoding "%s"',encoding);if(!1===inflate&&"identity"!==encoding)throw createError(415,"content encoding unsupported",{encoding:encoding,type:"encoding.unsupported"});switch(encoding){case "deflate":inflate=zlib.createInflate();debug("inflate body");
req.pipe(inflate);break;case "gzip":inflate=zlib.createGunzip();debug("gunzip body");req.pipe(inflate);break;case "identity":inflate=req;inflate.length=length;break;default:throw createError(415,'unsupported content encoding "'+encoding+'"',{encoding:encoding,type:"encoding.unsupported"});}return inflate}var createError=require("module$node_modules$http_errors$index"),getBody=require("module$node_modules$raw_body$index"),iconv=require("module$node_modules$iconv_lite$lib$index"),onFinished=require("module$node_modules$on_finished$index"),
zlib=require("module$node_modules$browserify_zlib$lib$index");module.exports=function(req,res,next,parse,debug,options){req._body=!0;var encoding=null!==options.encoding?options.encoding:null,verify=options.verify;try{var stream=contentstream(req,debug,options.inflate);var length=stream.length;stream.length=void 0}catch(err){return next(err)}options.length=length;options.encoding=verify?null:encoding;if(null===options.encoding&&null!==encoding&&!iconv.encodingExists(encoding))return next(createError(415,
'unsupported charset "'+encoding.toUpperCase()+'"',{charset:encoding.toLowerCase(),type:"charset.unsupported"}));debug("read body");getBody(stream,options,function(error,body){if(error){var _error="encoding.unsupported"===error.type?createError(415,'unsupported charset "'+encoding.toUpperCase()+'"',{charset:encoding.toLowerCase(),type:"charset.unsupported"}):createError(400,error);stream.resume();onFinished(req,function(){next(createError(400,_error))})}else{if(verify)try{debug("verify body"),verify(req,
res,body,encoding)}catch(err$6){next(createError(403,err$6,{body:body,type:err$6.type||"entity.verify.failed"}));return}error=body;try{debug("parse body"),error="string"!==typeof body&&null!==encoding?iconv.decode(body,encoding):body,req.body=parse(error)}catch(err$7){next(createError(400,err$7,{body:error,type:err$7.type||"entity.parse.failed"}));return}next()}})}}
//# sourceMappingURL=module$node_modules$body_parser$lib$read.js.map
