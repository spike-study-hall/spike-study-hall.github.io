{"version":3,"sources":["frp/time.cljc"],"mappings":"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","names":["this__4385__auto__","k__4386__auto__","this__4387__auto__","k60095","else__4388__auto__","G__60099","cljs.core/Keyword","x","cljs.core.get.cljs$core$IFn$_invoke$arity$3","__extmap","this__4404__auto__","f__4405__auto__","init__4406__auto__","cljs.core.reduce.cljs$core$IFn$_invoke$arity$3","ret__4407__auto__","p__60100","vec__60101","k__4408__auto__","cljs.core.nth.cljs$core$IFn$_invoke$arity$3","v__4409__auto__","this__4399__auto__","writer__4400__auto__","opts__4401__auto__","pr-pair__4402__auto__","keyval__4403__auto__","cljs.core/pr-sequential-writer","cljs.core.concat.cljs$core$IFn$_invoke$arity$2","cljs.core/PersistentVector","G__60094","cljs.core/RecordIter","cljs.core/-iterator","cljs.core/nil-iter","this__4383__auto__","__meta","this__4380__auto__","__hash","this__4389__auto__","cljs.core/count","this__4381__auto__","h__4243__auto__","fexpr__60104","coll__4382__auto__","cljs.core/hash-unordered-coll","this60096","other60097","cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2","this__4394__auto__","k__4395__auto__","cljs.core/contains?","cljs.core.dissoc.cljs$core$IFn$_invoke$arity$2","cljs.core/-with-meta","cljs.core.into.cljs$core$IFn$_invoke$arity$2","cljs.core/not-empty","cljs.core/PROTOCOL_SENTINEL","this__4392__auto__","k__4393__auto__","pred__60107","cljs.core/keyword-identical?","expr__60108","G__60110","G__60111","cljs.core.assoc.cljs$core$IFn$_invoke$arity$3","this__4397__auto__","cljs.core/seq","cljs.core/MapEntry","this__4384__auto__","this__4390__auto__","entry__4391__auto__","cljs.core/vector?","cljs.core._nth.cljs$core$IFn$_invoke$arity$2","cljs.core/-conj","frp.time/Time","this__4428__auto__","cljs.core/List","writer__4429__auto__","cljs.core/-write","G__60098","extmap__4424__auto__","G__60116","cljs.core/record?","frp.time/->Time","frp.time/map->Time","_","js/frp","js/frp.time","js/frp.time.t_frp$time60112","frp.time/t_frp$time60112","_60114","meta60113","this__4374__auto__","writer__4375__auto__","opt__4376__auto__","frp.time/->t_frp$time60112","x*","y*","x__4219__auto__","cljs.core/deref","y__4220__auto__","f","fa","G__60115","cljs.core/compare","cats.util/make-printable","frp.time/time","frp.time/real-epoch-state","cljs.core.atom.cljs$core$IFn$_invoke$arity$1","frp.time/now-long","cljs-time.core/now","cljs-time.coerce/to-long","frp.time/start","cljs.core/reset!","frp.time/now","G__60117","p1__60118#","frp.time/to-real-time","G__60119","G__60120","cats.core/<$>","cljs.core.partial.cljs$core$IFn$_invoke$arity$2","cljs.core/+","frp.time/epoch"],"sourcesContent":["(ns frp.time\n  (:refer-clojure :exclude [time])\n  (:require [cats.core :as m]\n            [cats.protocols :as p]\n            [cats.util :as util]\n            #?@(:clj  [[clj-time.coerce :as c]\n                       [clj-time.core :as t]]\n                :cljs [[cljs-time.coerce :as c]\n                       [cljs-time.core :as t]]))\n  #?(:clj (:import (clojure.lang IDeref))))\n\n(defrecord Time\n  [x]\n  p/Contextual\n  (-get-context [_]\n    (reify\n      p/Context\n      p/Semigroup\n      (-mappend [_ x* y*]\n        (Time. (max @x* @y*)))\n      p/Monoid\n      (-mempty [_]\n        (Time. 0))\n      p/Functor\n      (-fmap [_ f fa]\n        (-> @fa\n            f\n            Time.))))\n  IDeref\n  (#?(:clj  deref\n      :cljs -deref) [_]\n    x)\n  #?(:clj  Comparable\n     :cljs IComparable)\n  (#?(:clj  compareTo\n      :cljs -compare) [x* y*]\n    (compare @x* @y*))\n  p/Printable\n  (-repr [_]\n    (str \"#[time \" x \"]\")))\n\n(util/make-printable Time)\n\n(def time\n  ->Time)\n\n(def real-epoch-state\n  (atom 0))\n\n(def now-long\n  #(-> (t/now)\n       c/to-long))\n\n(def start\n  #(->> (now-long)\n        ;dec ensures times for events are strictly increasing.\n        dec\n        (reset! real-epoch-state)))\n\n(def now\n  #(-> (now-long)\n       (- @real-epoch-state)\n       time))\n\n(def to-real-time\n  #(m/<$> (partial + @real-epoch-state) %))\n\n(def epoch\n  (time 0))\n"]}